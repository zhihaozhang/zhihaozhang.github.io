<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chih-Hao&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/ee6c42acd9e6fdf6da073aabf58a2ad9</icon>
  <subtitle>骨灰级果粉</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhihaozhang.github.io/"/>
  <updated>2018-09-20T09:55:24.766Z</updated>
  <id>http://zhihaozhang.github.io/</id>
  
  <author>
    <name>Chih-Hao</name>
    <email>zhihaozhang@me.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Match开发笔记&lt;肆&gt; 极光推送接入指南(Swift版)</title>
    <link href="http://zhihaozhang.github.io/2018/09/20/match4/"/>
    <id>http://zhihaozhang.github.io/2018/09/20/match4/</id>
    <published>2018-09-20T09:54:56.892Z</published>
    <updated>2018-09-20T09:55:24.766Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在接入极光推送过程中，发现<a href="https://docs.jiguang.cn/jpush/client/iOS/ios_guide_new/" target="_blank" rel="external">官网文档</a>比较老旧了，而且使用的是OC版本，在上架<a href="https://itunes.apple.com/cn/app/match问答/id1414728016?mt=8" target="_blank" rel="external">Match 2.0</a>的过程中，需要增加推送功能。于是就花了一些精力去研究，并最终改写得到了Swift版本的代码，这里写一个总结，希望能对想使用Swift接入极光推送的朋友们提供一些启发。</p><h1 id="iOS推送机制和JPush的意义"><a href="#iOS推送机制和JPush的意义" class="headerlink" title="iOS推送机制和JPush的意义"></a>iOS推送机制和JPush的意义</h1><h2 id="APNs"><a href="#APNs" class="headerlink" title="APNs"></a>APNs</h2><p>iOS推送，最终只有一条官方渠道，那就是<strong>APNs</strong>。APNs通知是指通过向Apple APNs服务器发送通知，到达iOS设备，由iOS系统提供展现的推送。</p><h2 id="极光推送的意义"><a href="#极光推送的意义" class="headerlink" title="极光推送的意义"></a>极光推送的意义</h2><p>一般开发者都是自己部署服务器，向APNs Server推送。极光推送，是在这中间增加了一步，即开发者自己部署的服务器向极光服务器推送，然后由极光服务器向APNs推送。</p><p><img src="https://docs.jiguang.cn/jpush/client/image/jpush_ios.png" alt=""></p><blockquote><p>iOS和JPush的关系图(来源极光推送官网)</p></blockquote><p>这样做有什么意义呢？极光认为带来了下列好处:</p><ol><li>减少开发及维护成本：应用开发者不需要去开发维护自己的推送服务器与 APNs 对接。集成了 JPush iOS SDK 后不必自己维护更新 device token。通过 JPush 的 Web Portal 直接推送，也可以调用 JPush 的 HTTP 协议 API 来完成，开发工作量大大减少。</li><li>减少运营成本：极光推送支持一次推送，同时向 Android, iOS, WinPhone 三个平台。支持统一的 API 与推送界面。极光推送提供标签、别名绑定机制，以及提供了非常细分的用户分群方式，运营起来非常简单、直观。</li><li>提供应用内推送：除了使得 APNs 推送更简单，也另外提供应用内消息推送。这在类似于聊天的场景里很有必要。</li></ol><h1 id="接入前期准备"><a href="#接入前期准备" class="headerlink" title="接入前期准备"></a>接入前期准备</h1><h2 id="设置iOS消息推送证书"><a href="#设置iOS消息推送证书" class="headerlink" title="设置iOS消息推送证书"></a>设置iOS消息推送证书</h2><p>接入通知前，需要严格按照此文档配置相关证书。否则将会影响消息推送组件的正常使用。苹果开发最烦人的部分恐怕证书绝对算的上是一个了，关于推送证书的生成，这里推荐<a href="https://www.jianshu.com/p/fc962db539e6" target="_blank" rel="external">一个博客</a>，可以参考。</p><p>iOS相比于安卓比较特殊，分为生产环境(上架版)和测试环境(开发版)，最后导出极光所需要的.p12文件。导出.p12文件的坑也不少，推荐<a href="https://www.jianshu.com/p/7d4bba2f1dcb" target="_blank" rel="external">这篇博文</a>，供参考。</p><p>最终在极光控制台上，分别将生产环境和开发环境的两个.p12文件上传，通过验证后，会出现下面截图的样子。</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fvg33e6zfyj30yg0i2weu.jpg" alt=""></p><h2 id="极光平台注册"><a href="#极光平台注册" class="headerlink" title="极光平台注册"></a>极光平台注册</h2><p>在极光平台注册你的app,主要需要Bundle ID和开发者认证(企业营业执照)。注册完成后，获得两个重要信息，<strong>AppKey</strong>，这两个码是后面一直需要使用的。</p><h2 id="极光SDK的导入"><a href="#极光SDK的导入" class="headerlink" title="极光SDK的导入"></a>极光SDK的导入</h2><p>导入极光SDK，既可以选择手动，也可以选择使用cocoapods。我使用的是cocoapods，原因很简单，因为如果不想要推送功能了，只需要在podfile里删掉pod ‘JPush’那行就行了。</p><p>导入后，一定记得要在XCode里勾上Application Target 的 Capabilities-&gt;Push Notifications 选项，否则将无法接受推送。</p><p><img src="https://docs.jiguang.cn/jpush/client/image/capabilities_intro.jpg" alt=""></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="添加bridge文件"><a href="#添加bridge文件" class="headerlink" title="添加bridge文件"></a>添加bridge文件</h2><p>因为极光推送是由OC写成，因此swift的项目里不能直接使用，需要借助桥接文件。只要在项目里新建一个OC文件，XCode就会创建一个xxx-Bridging-Header.h文件，在该文件中加入d代码，就可以使用极光推送SDK了，啊真香！</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> #<span class="keyword">import</span> "JPUSHService.h"</div><div class="line">#ifdef <span class="type">NSFoundationVersionNumber_iOS_9_x_Max</span></div><div class="line">#<span class="keyword">import</span> &lt;UserNotifications/UserNotifications.h&gt;</div><div class="line">#endif</div><div class="line"><span class="comment">// 如果需要使用idfa功能所需要引入的头文件（可选）</span></div><div class="line">#<span class="keyword">import</span> &lt;AdSupport/AdSupport.h&gt;</div></pre></td></tr></table></figure><h2 id="添加Delegate"><a href="#添加Delegate" class="headerlink" title="添加Delegate"></a>添加Delegate</h2><p>在AppDelegate.swift文件中，让AppDelegate遵从JPUSHRegisterDelegate，后面就可以使用相关代理方法了。</p><h2 id="初始化相关代码"><a href="#初始化相关代码" class="headerlink" title="初始化相关代码"></a>初始化相关代码</h2><h3 id="初始化APNs和JPush"><a href="#初始化APNs和JPush" class="headerlink" title="初始化APNs和JPush"></a>初始化APNs和JPush</h3><p>初始化代码如下<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line"><span class="keyword">let</span> entity = <span class="type">JPUSHRegisterEntity</span>()</div><div class="line">entity.types = <span class="number">1</span> &lt;&lt; <span class="number">0</span> | <span class="number">1</span> &lt;&lt; <span class="number">1</span> | <span class="number">1</span> &lt;&lt; <span class="number">2</span></div><div class="line"><span class="type">JPUSHService</span>.register(forRemoteNotificationConfig: entity, delegate: <span class="keyword">self</span>)</div><div class="line"></div><div class="line"><span class="keyword">let</span> advertisingId = <span class="type">ASIdentifierManager</span>.shared().advertisingIdentifier.uuidString</div><div class="line">        <span class="type">JPUSHService</span>.setup(withOption: launchOptions, appKey: <span class="string">"极光平台给分配的"</span>, channel: <span class="string">"App Store"</span>, apsForProduction: <span class="literal">true</span>, advertisingIdentifier: advertisingId)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="上报device-token"><a href="#上报device-token" class="headerlink" title="上报device_token"></a>上报device_token</h3><p>实现JPUSHRegisterDelegate的代理方法，上报device_token。device_token主要是用来帮助推送定位到特定的设备使用的。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data)</span></span> &#123;</div><div class="line">    <span class="comment">//注册 DeviceToken</span></div><div class="line">    <span class="type">JPUSHService</span>.registerDeviceToken(deviceToken)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="接收到消息的处理"><a href="#接收到消息的处理" class="headerlink" title="接收到消息的处理"></a>接收到消息的处理</h3><p>这个部分为可选，主要是用来实现用户点开通知后的特定动作，比如跳转到特定页面。这就要跟后端开发人员商量好，将特定的消息通过通知的extra选项传递过来，然后手机端在做相应的跳转。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">jpushNotificationCenter</span><span class="params">(<span class="number">_</span> center: UNUserNotificationCenter!, didReceive response: UNNotificationResponse!, withCompletionHandler completionHandler: <span class="params">(<span class="params">()</span></span></span></span> -&gt; <span class="type">Void</span>)!) &#123;</div><div class="line">      </div><div class="line">       <span class="keyword">let</span> userInfo = response.notification.request.content.userInfo</div><div class="line">       </div><div class="line">       <span class="keyword">let</span> page : <span class="type">String</span> = userInfo[<span class="type">AnyHashable</span>(<span class="string">"page"</span>)] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">       <span class="keyword">if</span>(page == <span class="string">"home"</span>) &#123;</div><div class="line">          <span class="comment">//跳转到home页面</span></div><div class="line">           </div><div class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(page == <span class="string">"display"</span>)&#123;</div><div class="line">           <span class="comment">//跳转到特定页面</span></div><div class="line">           &#125;</div><div class="line">           </div><div class="line">       &#125;</div></pre></td></tr></table></figure><p>根据通知类型跳转到不同页面的效果:<br><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fvg4hlrn7pg30om1hckjn.gif" alt=""></p><h3 id="清楚应用ICON角标"><a href="#清楚应用ICON角标" class="headerlink" title="清楚应用ICON角标"></a>清楚应用ICON角标</h3><p>当用户点进应用之后，应用角标的通知数目应该清0，否则强迫症患者会被逼疯。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">applicationWillEnterForeground</span><span class="params">(<span class="number">_</span> application: UIApplication)</span></span> &#123;</div><div class="line">        application.applicationIconBadgeNumber = <span class="number">0</span></div><div class="line">        application.cancelAllLocalNotifications()</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h3 id="设置Tags和alias"><a href="#设置Tags和alias" class="headerlink" title="设置Tags和alias"></a>设置Tags和alias</h3><p>Tags是区分通知类型的，可以给不同的推送类型打Tag，比如我想接受新题目通知，不想接收点赞通知。而alias一般是有唯一性的，需要根据用户名或手机号这种好区分的东西来分辨。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> outAlias:<span class="type">NSString</span>?</div><div class="line">            <span class="keyword">var</span> outTags:<span class="type">NSSet</span>?</div><div class="line">            (outAlias, outTags) = <span class="keyword">self</span>.analyseInput(alias <span class="keyword">as</span> <span class="type">NSString</span>!, tags: tags)</div><div class="line"></div><div class="line"><span class="type">JPUSHService</span>.setTags(outTags <span class="keyword">as</span>! <span class="type">Set</span>&lt;<span class="type">String</span>&gt;, completion: &#123; (a, b, <span class="built_in">c</span>) <span class="keyword">in</span></div><div class="line"></div><div class="line">            &#125;, seq: <span class="number">1</span>)</div><div class="line">            </div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">analyseInput</span><span class="params">(<span class="number">_</span> alias:NSString!, tags:NSSet!)</span></span>-&gt;(<span class="type">NSString</span>?,<span class="type">NSSet</span>?) &#123;</div><div class="line">        <span class="keyword">var</span> outAlias:<span class="type">NSString</span>?</div><div class="line">        <span class="keyword">var</span> outTags:<span class="type">NSSet</span>?</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> alias.length == <span class="number">0</span> &#123;</div><div class="line">            outAlias = <span class="literal">nil</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            outAlias = alias</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> tags.<span class="built_in">count</span> == <span class="number">0</span> &#123;</div><div class="line">            outTags = <span class="literal">nil</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            outTags = tags</div><div class="line">            <span class="keyword">var</span> emptyStringCount = <span class="number">0</span></div><div class="line">            tags.enumerateObjects(&#123; (tag:<span class="type">Any</span>, stop:<span class="type">UnsafeMutablePointer</span>&lt;<span class="type">ObjCBool</span>&gt;) -&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line">                <span class="keyword">if</span> (tag <span class="keyword">as</span> <span class="type">AnyObject</span>).isEqual(to: <span class="string">""</span>) &#123;</div><div class="line">                    emptyStringCount += <span class="number">1</span></div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    emptyStringCount = <span class="number">0</span></div><div class="line">                    stop.pointee = <span class="literal">true</span></div><div class="line">                &#125;</div><div class="line">                &#125; <span class="keyword">as</span>! (<span class="type">Any</span>, <span class="type">UnsafeMutablePointer</span>&lt;<span class="type">ObjCBool</span>&gt;) -&gt; <span class="type">Void</span>)</div><div class="line">            <span class="keyword">if</span> emptyStringCount == tags.<span class="built_in">count</span> &#123;</div><div class="line">                outAlias = <span class="literal">nil</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (outAlias,outTags)</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="http://blog.jiguang.cn/apns/" target="_blank" rel="external">APNs 推送原理及问题</a></li><li><a href="https://docs.jiguang.cn/jpush/client/iOS/ios_guide_new/" target="_blank" rel="external">iOS SDK 集成指南</a></li><li><a href="https://www.jianshu.com/p/fc962db539e6" target="_blank" rel="external">ios 消息推送证书设置和整理(备忘)</a></li><li><a href="https://www.jianshu.com/p/7d4bba2f1dcb" target="_blank" rel="external">p12证书导出按钮为灰色的处理办法</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在接入极光推送过程中，发现&lt;a href=&quot;https://docs.jiguang.cn/jpush/client/iOS/ios_gui
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="http://zhihaozhang.github.io/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus+微信实时报警模块的实现与Docker部署</title>
    <link href="http://zhihaozhang.github.io/2018/09/09/prometheusPlusWechat/"/>
    <id>http://zhihaozhang.github.io/2018/09/09/prometheusPlusWechat/</id>
    <published>2018-09-09T14:13:06.130Z</published>
    <updated>2018-09-09T14:13:22.313Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>对很多公司而言，保证服务可用，在服务不可用时报警到相关服务负责人提醒其及时修复，是非常重要的一件事。在我司，看服务可不可用，是分配给员工们还停留在人眼观察阶段。由行政人员安排轮流值班，每个人负责两周。</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fv3bsl5dfvj30u00m6jvk.jpg" alt=""></p><blockquote><p>每人两周的值班表</p></blockquote><p>我觉得这个事情由人来看有三个缺点：</p><ol><li>浪费了人力，值班的人不能全心全意把心思放到工作上。</li><li>报警不够及时，值班人员不可能时刻将注意力放在这上面。</li><li>值班人员只是将异常的服务截图发到群里，有可能不知道通知谁来处理，且真实的责任人看到这个截图又需要一定时间。</li></ol><p>这眼看着很快就要轮到我了，我比较<strong>懒</strong>，于是就找<strong>旁门左道</strong>来替我处理这件事了。</p><h1 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h1><h2 id="普罗米修斯介绍"><a href="#普罗米修斯介绍" class="headerlink" title="普罗米修斯介绍"></a>普罗米修斯介绍</h2><p><a href="https://github.com/prometheus" target="_blank" rel="external">Prometheus（普罗米修斯）</a>是一套开源的<strong>监控/报警/时间序列</strong>数据库的组合,由<strong>SoundCloud</strong>公司开发。</p><p>Prometheus基本原理是通过HTTP协议周期性抓取被监控组件的状态，这样做的好处是任意组件只要提供HTTP接口就可以接入监控系统，不需要任何SDK或者其他的集成过程。这样做非常适合虚拟化环境比如VM或者Docker。</p><p>Prometheus应该是为数不多的适合Docker、Mesos、Kubernetes环境的监控系统之一。</p><p><img src="https://upload-images.jianshu.io/upload_images/1814710-bb27d75d61b730a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/796" alt=""></p><blockquote><p>普罗米修斯架构图</p></blockquote><h2 id="Alertmanager模块的扩展-Email-VS-Wechat"><a href="#Alertmanager模块的扩展-Email-VS-Wechat" class="headerlink" title="Alertmanager模块的扩展 Email VS Wechat"></a>Alertmanager模块的扩展 Email VS Wechat</h2><p>普罗米修斯<em>Alertmanager模块</em>提供了<strong>Email</strong>通知，但是用户查Email不频繁，而且很容易将用户邮箱塞满，以至于后面被邮箱系统判为垃圾邮件，失去了通知的意义。</p><p>和<strong>邮件</strong>形成对比的是<strong>微信</strong>，微信似乎已经成了大部分人手机里使用最频繁的软件了，而且有桌面客户端，即使不看手机，在电脑上工作也能收到消息。一收到消息，特别是@到自己的消息，好奇心会趋势用户打开，看到了自己的服务出现了错误，在群聊里丢了脸，会尽力尽快修复，这也达到了及时通知的目的。</p><h2 id="wechaty"><a href="#wechaty" class="headerlink" title="wechaty"></a>wechaty</h2><p>之前美团和饿了么红包在微信里抢大红包，我那时候第一次知道微信有自动分组、回复和对消息的监听的框架。我在GitHub里搜到了一个叫<a href="https://github.com/wechaty/wechaty" target="_blank" rel="external">wechaty</a>的开源微信SDK，它基于微信公开的API，对接口进行了一系列的封装，提供一系列简单的接口，然后开发者可以在其之上进行微信机器人的开发。</p><blockquote><p>最终促使我使用这个库的原因很简单，是一个墙外用户的评价:**”太好用，好用的想哭”。没想到我后面在墙内部署的时候，真的哭了。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Wechaty.instance()</div><div class="line">.on(<span class="string">'scan'</span>, (url, code) =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(url)</div><div class="line">    <span class="keyword">let</span> loginUrl = url.replace(<span class="string">'qrcode'</span>, <span class="string">'l'</span>)</div><div class="line">    QrcodeTerminal.generate(loginUrl)</div><div class="line">  &#125;)</div><div class="line">.on(<span class="string">'login'</span>,user =&gt; &#123;<span class="built_in">console</span>.log(<span class="string">`User <span class="subst">$&#123;user&#125;</span> logined`</span>)&#125;)</div><div class="line">.on(<span class="string">'message'</span>, <span class="keyword">async</span> (message) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> contact = message.from()</div><div class="line">    <span class="keyword">const</span> content = message.text()</div><div class="line">    <span class="keyword">const</span> room = message.room()</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(room.toString() == <span class="string">"Room&lt;群聊名&gt;"</span>)&#123;</div><div class="line">        heliumMessage = message</div><div class="line">        heliumRoom = room</div><div class="line">    &#125;</div><div class="line">&#125;).start()</div><div class="line"></div><div class="line">server.post(<span class="string">'/sendMsg'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">if</span>(heliumMessage)&#123;</div><div class="line">    heliumMessage.say(req.body.msg)</div><div class="line">  &#125;</div><div class="line">    </div><div class="line">&#125;).listen(<span class="number">3000</span>)</div></pre></td></tr></table></figure><p>配合node.js用起来真挺方便的，如果起在本地，已经可以正常的工作了。虽然有个小瑕疵，就是需要在群聊里先说一句话，才能找到这个群聊，因为群聊跟联系人还不同。</p><h2 id="部署在docker端"><a href="#部署在docker端" class="headerlink" title="部署在docker端"></a>部署在docker端</h2><p>因为本地机器的IP地址是会发生变化的，因此需要将这个服务部署到docker端，且wechaty宣称支持docker端部署，于是就进行了一番尝试。</p><p>部署到docker，首先遇到的问题的是无法将二维码或url实时传出来，除非通过查询log文件。于是就在代码里集成了邮件模块，将二维码的url以邮件的形式发出来。url里有个坑，刚开始发出来的url是经过替换的，需要将/r/换成/qrcode/。</p><p>wechaty是需要<em>红芯浏览器(chromium)内核</em>的，需要科学的上网方式，整个Image build完之后居然有2G。node的版本也需要v8，v10检查会严格一些，跑不通。</p><p><em>(dockerfile附录于文末)</em></p><h1 id="反响和未来工作"><a href="#反响和未来工作" class="headerlink" title="反响和未来工作"></a>反响和未来工作</h1><p>服务投入使用第一天，值班人员觉得没他什么事了，我就觉得我做这项工作是值得的，减轻了所有人值班的压力。</p><p><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fv3f4r80h3j30le0dg74t.jpg" alt=""></p><blockquote><p>报警样例与值班人员的反响</p></blockquote><p>现在遇到的问题是报警给很多人，后面想实现一个基于订阅的点对点推送应用。</p><p>#附录 Dockerfile</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">FROM ubuntu:18.04</div><div class="line"></div><div class="line">ENV DEBIAN_FRONTEND     noninteractive</div><div class="line">ENV WECHATY_DOCKER      1</div><div class="line">ENV LC_ALL              C.UTF-8</div><div class="line">ENV NODE_ENV            $NODE_ENV</div><div class="line">ENV NPM_CONFIG_LOGLEVEL warn</div><div class="line"></div><div class="line"># Installing the &apos;apt-utils&apos; package gets rid of the &apos;debconf: delaying package configuration, since apt-utils is not installed&apos;</div><div class="line"># error message when installing any other package with the apt-get package manager.</div><div class="line"># https://peteris.rocks/blog/quiet-and-unattended-installation-with-apt-get/</div><div class="line">RUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \</div><div class="line">    apt-utils \</div><div class="line">    bash \</div><div class="line">    build-essential \</div><div class="line">    ca-certificates \</div><div class="line">    curl \</div><div class="line">    coreutils \</div><div class="line">    ffmpeg \</div><div class="line">    figlet \</div><div class="line">    git \</div><div class="line">    gnupg2 \</div><div class="line">    jq \</div><div class="line">    libgconf-2-4 \</div><div class="line">    moreutils \</div><div class="line">    python-dev \</div><div class="line">    shellcheck \</div><div class="line">    sudo \</div><div class="line">    tzdata \</div><div class="line">    vim \</div><div class="line">    wget \</div><div class="line">  &amp;&amp; apt-get purge --auto-remove \</div><div class="line">  &amp;&amp; rm -rf /tmp/* /var/lib/apt/lists/*</div><div class="line"></div><div class="line">RUN curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash - \</div><div class="line">    &amp;&amp; apt-get update &amp;&amp; apt-get install -y --no-install-recommends nodejs \</div><div class="line">    &amp;&amp; apt-get purge --auto-remove \</div><div class="line">    &amp;&amp; rm -rf /tmp/* /var/lib/apt/lists/*</div><div class="line"></div><div class="line"># https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md</div><div class="line"># https://github.com/ebidel/try-puppeteer/blob/master/backend/Dockerfile</div><div class="line"># Install latest chrome dev package.</div><div class="line"># Note: this also installs the necessary libs so we don&apos;t need the previous RUN command.</div><div class="line"></div><div class="line">RUN apt-get update -q </div><div class="line">RUN sudo apt-get install -y chromium-browser  xvfb libpango1.0-0 fonts-liberation libappindicator1 libdbusmenu-glib4 libdbusmenu-gtk4   libindicator7 indicator-application</div><div class="line">RUN apt-get install -f -y gconf-service gconf2-common  libgconf-2-4 gconf-service-backend</div><div class="line"></div><div class="line">RUN wget -c https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</div><div class="line">RUN sudo dpkg -i google-chrome-stable_current_amd64.deb</div><div class="line">RUN nohup Xvfb :0 -ac -screen 0 1024x768x24 &amp;</div><div class="line">RUN export DISPLAY=0:0</div><div class="line"></div><div class="line">RUNecho Asia/Shanghai &gt; /etc/timezone&amp;&amp;\</div><div class="line">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</div><div class="line"></div><div class="line">RUN apt-get update &amp;&amp; apt-get install -y tar</div><div class="line"></div><div class="line">WORKDIR /opt</div><div class="line"></div><div class="line">RUN mkdir -p /opt/wechat_robot</div><div class="line">COPY package.json /opt/wechat_robot/</div><div class="line">COPY wechat.js /opt/wechat_robot</div><div class="line">COPY start.sh /opt/wechat_robot</div><div class="line">RUN mkdir -p /opt/wechat_robot/node_modules</div><div class="line">COPY node_modules/ /opt/wechat_robot/node_modules/</div><div class="line"></div><div class="line">RUN chmod +x /opt/wechat_robot/start.sh</div><div class="line"></div><div class="line">ENTRYPOINT  [ &quot;/bin/bash&quot;, &quot;/opt/wechat_robot/start.sh&quot; ]</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;对很多公司而言，保证服务可用，在服务不可用时报警到相关服务负责人提醒其及时修复，是非常重要的一件事。在我司，看服务可不可用，是分配给员工们还
      
    
    </summary>
    
      <category term="监控" scheme="http://zhihaozhang.github.io/categories/%E7%9B%91%E6%8E%A7/"/>
    
    
      <category term="效率" scheme="http://zhihaozhang.github.io/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>上架沙盒化应用,重启应用后保持文件持久访问性指南</title>
    <link href="http://zhihaozhang.github.io/2018/08/24/invisibilitycloak/"/>
    <id>http://zhihaozhang.github.io/2018/08/24/invisibilitycloak/</id>
    <published>2018-08-24T09:44:50.320Z</published>
    <updated>2018-08-25T05:54:01.106Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><em>Invisibility Cloak</em>上架Mac App Store了，在此过程中，遇到了一些困难，在这里记录一下又一次与苹果审核团队撕逼的过程。</p><p>开发这款软件的<strong>初衷</strong>是<del>将xxx.mp4/xxx.avi/xxx.mkv在白天藏起来，免得被别人发现。</del> 在Apple store上发现了一款类似的文件隐藏软件<strong>Secret Folder</strong>，售价128元，而且卖的不错。我觉得这个应用蛮有用(坏笑)，而且实现起来难度不是特别大，于是就做了一个相同功能的软件，并将它上架了。</p><p>功能上，我额外支持了drag&amp;drop添加文件的操作，比Secret Folder的体验更<strong>丝滑</strong>一些。定价上，仅为<strong>Secret Folder</strong>的一折，12RMB，现在特价一周，仅售6元，<em>有将某些文件在白天或演讲时藏起来的朋友们别错过。</em> <a href="https://itunes.apple.com/cn/app/invisibility-cloak/id1426266978?mt=12" target="_blank" rel="external">苹果商店下载地址</a></p><p align="center"><br>  <a href="https://itunes.apple.com/cn/app/invisibility-cloak/id1426266978?mt=12" target="_blank" rel="external"><br>    <img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fukxuftu8vj309g09gt8n.jpg" width="200"><br>  <img alt="Download on the app store" src="https://user-images.githubusercontent.com/7317008/43209852-4ca39622-904b-11e8-8ce1-cdc3aee76ae9.png" width="160"><br>  </a><br></p><h1 id="上架过程中遇到的坑"><a href="#上架过程中遇到的坑" class="headerlink" title="上架过程中遇到的坑"></a>上架过程中遇到的坑</h1><p>不得不说，mac应用的审核比iOS应用的审核快多了，短短两天内审核了四次，这或许也从一定程度上反映了两者提交应用数量的差别。</p><p>第一次拒绝我的原因很<strong>奇葩</strong>，说我的名字起的不好，<strong>AVHider</strong>难道有些露骨？</p><p>第二次拒绝我是因为我勾选了Downloads/Picture/Music/Movie folder的读写权限，隐藏文件嘛，能Access的路径当然是越多越好了，但苹果不这么认为，他认为不该勾选的权限绝不能勾。</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fugf3euvrlj313q0qggml.jpg" alt=""></p><blockquote><p>沙盒中的File Access</p></blockquote><p>第三次被拒其实有点懵，因为我在《macOS开发基础教程》这本书里看到说如果要上架，一定要勾上sandbox和printing，但苹果审核团队以printing对我没用为由，拒绝了我。或许是我理解有误，也有可能是作者的笔误。</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fugfcmp305j311g0dggmq.jpg" alt=""></p><blockquote><p>《macOS开发基础教程》一书中关于上架前注意事项的描述</p></blockquote><p>第四次拒绝的原因是为了解决所有路径文件可用性时，我采取了一种粗暴的手法，直接在.entitlements文件里增加了根目录，即所有文件</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;key&gt;com.apple.security.temporary-exception.files.absolute-path.read-write&lt;/key&gt;</div><div class="line">&lt;array&gt;</div><div class="line">    &lt;string&gt;/&lt;/string&gt;</div><div class="line">&lt;/array&gt;</div></pre></td></tr></table></figure><p>苹果让我重新找其他方法上架，于是我找到了本文需要重点介绍的:<strong>com.apple.security.files.bookmarks.app-scope</strong>.</p><h1 id="沙盒访问机制中的File-Access"><a href="#沙盒访问机制中的File-Access" class="headerlink" title="沙盒访问机制中的File Access"></a>沙盒访问机制中的File Access</h1><p>在iOS和macOS中，每个应用都有一个<strong>专属</strong>存储空间，它就是<strong>沙盒(sandbox)</strong>。就macOS来说，苹果规定从macOS X 10.6开始，所有发布到Mac App Store的应用都必须遵从沙盒约定，主要是考虑到第三方恶意应用对系统进行攻击，从安全性角度出发， 对应用访问的系统资源,硬件外设,文件,网络,XPC等做了严格的限制。</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fukwjs9uylj31iu0pq0x0.jpg" alt=""></p><blockquote><p>引入沙盒机制前后APP对系统资源、数据开放程度对比</p></blockquote><p>在没有上架之前，我没有考虑过这个问题，同样，如果你的应用不准备上架，可以不开启Sandbox，随意访问mac上的文件和数据。</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fukwohw5ofj30is05ujts.jpg" alt=""></p><blockquote><p>Sandbox中的File Access</p></blockquote><p>经过第二次被拒之后，我只勾上了用户选择的文件这个Type的读/写权限。但我很快就发现了问题，在应用没重启之前，一切正常运行，但是应用退出再重新打开之后，之前的文件就失去了读写的权限。</p><p>我们需要找到一种策略，让app<strong>记住</strong>我们曾经有过某个文件路径的读写权限，这就是app-scoped bookmark。翻译成中文是<strong>书签</strong>，也很好理解，就好像我们读一本书，某天读累了，<em>夹一张书签在上次看过的地方，下次我们再读的时候，就可以快速回到这一页，而不必从头开始一页页的翻阅了。</em></p><p>既然要记录下来，就涉及到持久化的问题，由于书签比较轻量级，因此我选用了相对简单的<strong>NSUserDefaults</strong>. 网上有OC版本的代码，我用Swift进行了改写，代码如下:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">saveBookmarks</span><span class="params">(<span class="number">_</span> filePath : String)</span></span>&#123;</div><div class="line"> </div><div class="line">       <span class="keyword">let</span> userDefault = <span class="type">UserDefaults</span>.standard</div><div class="line">       <span class="keyword">let</span> folderPath = <span class="type">NSURL</span>(fileURLWithPath: filePath)</div><div class="line">       <span class="built_in">print</span>(folderPath.absoluteString!)</div><div class="line">       <span class="keyword">do</span> &#123;</div><div class="line">           <span class="keyword">let</span> bookmark = <span class="keyword">try</span> folderPath.bookmarkData(options: .securityScopeAllowOnlyReadAccess, includingResourceValuesForKeys: <span class="literal">nil</span>, relativeTo: <span class="literal">nil</span>)</div><div class="line">           userDefault.<span class="keyword">set</span>(bookmark, forKey: folderPath.absoluteString!)</div><div class="line">       &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">           <span class="built_in">print</span>(<span class="string">"Set Bookmark Fails: <span class="subst">\(error.description)</span>"</span>)</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   <span class="function"><span class="keyword">func</span> <span class="title">readBookmarks</span><span class="params">(<span class="number">_</span> filePath : String)</span></span>&#123;</div><div class="line">       </div><div class="line">       <span class="keyword">let</span> userDefault = <span class="type">UserDefaults</span>.standard</div><div class="line">       <span class="keyword">if</span> <span class="keyword">let</span> bookmarkData = userDefault.object(forKey: filePath) <span class="keyword">as</span>? <span class="type">NSData</span> &#123;</div><div class="line">           <span class="keyword">do</span> &#123;</div><div class="line">               <span class="keyword">let</span> url = <span class="keyword">try</span> <span class="type">NSURL</span>.<span class="keyword">init</span>(resolvingBookmarkData: bookmarkData <span class="keyword">as</span> <span class="type">Data</span>, options: .withoutUI, relativeTo: <span class="literal">nil</span>, bookmarkDataIsStale: <span class="literal">nil</span>)</div><div class="line">               url.startAccessingSecurityScopedResource()</div><div class="line">           &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">               <span class="built_in">print</span>(<span class="string">"Bookmark Access Fails: <span class="subst">\(error.description)</span>"</span>)</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p>分为<strong>保存</strong>书签和<strong>读取</strong>书签两个函数，考虑到key的唯一性，为了避免冲突我以文件路径为key存bookmark。每次应用启动之后，都根据之前的路径索取这些路径的读写权限。当然这里也是有<strong>注意点</strong>的，主要是当文件路径中包含<em>数字、字母之外</em>的字符(如中文字符、特殊字符等)时，需要注意<strong>转码</strong>。</p><h1 id="上架后思考"><a href="#上架后思考" class="headerlink" title="上架后思考"></a>上架后思考</h1><p>上架的第一天，在中国区付费应用总排行榜出乎我的意料的排到了第121名。这件事说明了: 1.小而美的应用是有市场的；2.用户对价格还是很敏感的；3.不少用户愿意为他们需要的应用付费。</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fuger4jpwtj31kw10j46x.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;em&gt;Invisibility Cloak&lt;/em&gt;上架Mac App Store了，在此过程中，遇到了一些困难，在这里记录一下又一次与苹
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="macOS开发" scheme="http://zhihaozhang.github.io/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Match for iPhone开发笔记 &lt;三&gt; 测试与上架篇</title>
    <link href="http://zhihaozhang.github.io/2018/08/02/Match3/"/>
    <id>http://zhihaozhang.github.io/2018/08/02/Match3/</id>
    <published>2018-08-02T07:31:04.373Z</published>
    <updated>2018-08-18T05:05:42.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>“Match问答”App今天终于通过了苹果的审核，在<em>App Store上架了，</em><a href="https://itunes.apple.com/cn/app/match问答/id1414728016?mt=8" target="_blank" rel="external">苹果商店下载地址</a>，不得不说，苹果的审核还是很严格的。因此今天想写一下从提交审核到被拒(<em>若干回合</em>)再到最终上架这段时间里的故事，其他技术方面的<strong>难点总结</strong>放到后面写。</p><h1 id="上架前的必经之路————测试"><a href="#上架前的必经之路————测试" class="headerlink" title="上架前的必经之路————测试"></a>上架前的必经之路————测试</h1><p>在上架之前有一个关键的步骤其实很容易被<strong>忽略</strong>，特别是<em>个人开发者</em>，没法像公司那样聘请专业的测试团队进行完备的测试。大体上讲，iOS的测试可以分为3类:</p><ol><li>单元测试、UI测试、性能测试、集成测试，通常在模拟器上进行</li><li>真机测试</li><li>Testflight内测</li></ol><h2 id="模拟器测试"><a href="#模拟器测试" class="headerlink" title="模拟器测试"></a>模拟器测试</h2><p>第一类测试通常可以发现App里所有可能的<strong>逻辑错误</strong>、<strong>排版问题</strong>和<strong>用户体验</strong>，在进行真机测试之前，一般需要保证模拟器适配各个手机尺寸，需要特别注意的是iPhone X<em>刘海的打理</em>。因为iPhone大小各异，而独立开发者通常不会有所有屏幕尺寸的机型，因此模拟器进行全面测试很有必要。</p><h2 id="真机测试"><a href="#真机测试" class="headerlink" title="真机测试"></a>真机测试</h2><p>第二类测试是<em>真机测试</em>，和模拟器的区别主要集中在<strong>功能</strong>和<strong>硬件</strong>两方面。功能方面，模拟器不支持信息、通话、短信、Accessibility功能(为残障人士准备);硬件方面，模拟器没有蓝牙、相机等硬件，模拟不了相关功能。如果使用了上述的功能，<strong>必须</strong>真机测试。即使没有使用，也应该安装到真机试试，<em>如果你自己都不想用这个APP，别人更不会用</em>。</p><h2 id="Testflight内测"><a href="#Testflight内测" class="headerlink" title="Testflight内测"></a>Testflight内测</h2><p>第三类也是需要苹果审核的，不过Testflight通常比较松，没有明显的bug、闪退一般会在24小时内批准。这一步通过之后，就可以<strong>邀请</strong>更多的亲朋好友来使用了，注意，这一步是<strong>邀请制</strong>的。需要开发者在<a href="https://appstoreconnect.apple.com/WebObjects/iTunesConnect.woa/ra/ng/app/1414728016/testflight?section=iosbuilds" target="_blank" rel="external">itunes connect</a>里手动添加相关测试人员的iCloud账号，当然也是支持<strong>CSV批量导入</strong>功能的。</p><p>当然Testflight测试也有限制，目前的限制提现在两方面:测试时间不超过<strong>90</strong>天、总测试人数上限是<strong>10000</strong>人，对于大部分应用来说已经很足够了。</p><p><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1ftvhqlaq9kj31kw0yctbb.jpg" alt=""></p><blockquote><p>TestFilght页截图，可见信息有测试剩余天数、邀请数、安装数、活跃用户数、崩溃数</p></blockquote><h2 id="App崩溃的可能原因"><a href="#App崩溃的可能原因" class="headerlink" title="App崩溃的可能原因"></a>App崩溃的可能原因</h2><p>在测试过程中，App崩溃会经常发生。我遇到的比较常见的原因有:</p><ol><li>代码出错</li><li>OOM</li><li>网络状况</li><li>cocoapods的问题</li></ol><p>代码出错很常见，比如我经常犯的错误是ViewController的<em>强制向下转型**，明明不是某个特定VC，你强制向他转，肯定会出错；JSON编码解码也经常会出错，如果没有相应机制，就会引起闪退。</em>Objective-C*动态性能比较好，[obj method]这行代码即使obj对象没有method这个方法，在编译器也是不会报错的，但是运行时就会出错。</p><p>内存不够主要是应用在运行时占用了大量收集内存，使得系统强制将应用回收了。通过<strong>Instruments</strong>可以找到原因。</p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdly1ftvo50ywacj30vk0iy3zd.jpg" alt=""></p><blockquote><p>Instruments截图</p></blockquote><p>网络状况出问题主要是网络不佳(<em>蜂窝2G/3G信号网速慢</em>)造成了相应超时;另外也有可能是后端服务器down掉了(<strong>请求太多处理不过来或受到攻击</strong>)。</p><p>cocoapods里的第三方库质量参差不齐，很难保证没有错误，我在开发Match初期就引了一个非常小众的库(<em>这里就不点名了</em>)，已经不work了。我没有<em>深究原因</em>，有可能是Swift版本原因或者我个人使用有误。后面换了一个star数很多的库，就解决了。总体来说，那些<strong>大名鼎鼎、维护比较勤、关注度高</strong>的库比较<strong>solid</strong>一点，也推荐大家尽量使用那样的库。</p><h1 id="上架"><a href="#上架" class="headerlink" title="上架"></a>上架</h1><p>上架的流程比较复杂，具体的操作步骤我在这里就不展开介绍了，有需求的读者可以参考<a href="http://www.xiaoboswift.com/course/44" target="_blank" rel="external">这个教程</a>。</p><p>上架过程中会遇到一些坑，我不能全方面覆盖，只能结合一些自身经历给大家一些建议。</p><h2 id="第一次提交审核-gt-Reject"><a href="#第一次提交审核-gt-Reject" class="headerlink" title="第一次提交审核 -&gt; Reject"></a>第一次提交审核 -&gt; Reject</h2><p>返回意见：</p><p><strong>Guideline 2.1 - Information Needed</strong></p><p>We have started the review of your app, but we were unable to successfully register for an in-app account. In order for us to review your app, please provide a demo account so that we may fully assess your app’s features.</p><p>第一次返回的意见是让我提供一个账户给他。Match采用的是短信动态验证，虽然我在审核信息里也说了需要审核人员填自己的手机号<em>动态获取</em>。。。但是! 谁让他的爷呢，我不得不给应用开了<strong>后门</strong>，乖乖的重新提交第二个版本。</p><p>第一次审核时间真是快，<strong>24小时内</strong>。</p><h2 id="第二次审核-gt-Reject"><a href="#第二次审核-gt-Reject" class="headerlink" title="第二次审核  -&gt; Reject"></a>第二次审核  -&gt; Reject</h2><p>返回意见：<br><strong>Guideline 2.1 - Information Needed</strong></p><p>This type of app has been identified as one that may violate one or more of the following App Store Review Guidelines. Specifically, these types of apps often:</p><p>1.1.6 - Include false information, features, or misleading metadata.</p><p>2.3.0 - Undergo significant concept changes after approval</p><p>2.3.1 - Have hidden or undocumented features, including hidden “switches” that redirect to a gambling or lottery website</p><p>3.1.1 - Use payment mechanisms other than in-app purchase to unlock features or functionality in the app</p><p>3.2.1 - Do not come from the financial institution performing the loan services</p><p>4.3.0 - Are a duplicate of another app or are conspicuously similar to another app</p><p>5.2.1 - Were not submitted by the legal entity that owns and is responsible for offering any services provided by the app</p><p>5.2.3 - Facilitate illegal file sharing or include the ability to save, convert, or download media from third party sources without explicit authorization from those sources</p><p>5.3.4 - Do not have the necessary licensing and permissions for all the locations where the app is used</p><p><strong>Guideline 5.1.1 - Legal - Privacy - Data Collection and Storage</strong></p><p>We noticed that your app requests the user’s consent to access their camera and photos but does not clarify the use of this feature in the permission modal alert.</p><p>第二次审核终于进入正题了，<em>Guideline 2.1</em>给的意见比较<strong>模糊</strong>，审核人员只是将所有的条款列了出来，并没有具体说到底违反了哪条。</p><p><em>Guideline 5.1.1</em>是个坑，我搜了一下，很多其他开发者也都中过招。我记得之前在<strong>infoplist</strong>里是说了需要获得<em>相机/相册</em>的权限的，但是5.1.1说的是，你不仅需要申明你需要使用相机/相册，还要说<strong>为什么需要使用</strong>，编造一个原因吧。</p><p>针对<em>Guideline 2.1</em>，我们为了得到比较具体的回复，针对条款，<strong>逐条</strong>进行了回复，写了整整一页纸。</p><p>第二次审核时间：<strong>2天。</strong></p><h2 id="第三次审核-gt-Reject"><a href="#第三次审核-gt-Reject" class="headerlink" title="第三次审核  -&gt; Reject"></a>第三次审核  -&gt; Reject</h2><p><em>Guideline 2.1 - Information Needed</em></p><ul><li>How do users obtain 积分?</li></ul><p>终于得到了不那么应付的2.1，原来是审核人员对我们应用内的虚拟货币的获取方式产生了怀疑。这点其实挺<strong>尴尬</strong>的，因为苹果不让接入支付宝和微信购买虚拟的货品，而内购的方式苹果会抽成<strong>30</strong>%，这个比例对于我们来说太高了。因此，我们制定了一个策略，即每天登陆送1个积分；内购功能正在做(<em>其实还没有</em>)，回复了苹果提出的问题。</p><p><em>Guideline 2.3.10 - Performance - Accurate Metadata</em></p><ul><li>We noticed that your app or its metadata includes irrelevant third-party platform information. </li></ul><p>Specifically, a non-iOS status bar is shown in the screenshots.</p><p>Referencing third-party platforms in your app or its metadata is not permitted on the App Store unless there is specific interactive functionality.</p><p>针对<em>2.3.10</em>，这点大家也需要特别注意，苹果特别<strong>反感安卓</strong>，在任何审核人员可见的地方，尽量不要出现安卓这个词。</p><p>问答系统里有很多安卓用户，回答高数的形式主要有两种，一种是在纸上手写答案；第二种是在软件内写公式和推导过程，写完后，用户直接截图，就会有安卓系统的顶栏。这点也被审核人员吐槽了，没办法，只能<strong>认错</strong>，说我们会尽量要求用户去掉顶栏。</p><p>第三次审核时间长了起来：<strong>5天</strong>,包含了<strong>周末两天</strong>。</p><h2 id="第四次审核-gt-Reject"><a href="#第四次审核-gt-Reject" class="headerlink" title="第四次审核  -&gt; Reject"></a>第四次审核  -&gt; Reject</h2><p>第四次审核返回的还是2.1，关于用户获取如何积分的疑问。可能不是同一个审核人员吧，没有看我们的回复？这次我直接将首次针对这条的回复贴了进去，也是想得到一个不那么敷衍的回复罢了。</p><p>第四次审核时间:<strong>3天</strong>。</p><h2 id="第五次审核-gt-Accepted"><a href="#第五次审核-gt-Accepted" class="headerlink" title="第五次审核 -&gt; Accepted"></a>第五次审核 -&gt; Accepted</h2><p>不抱任何希望的情况下，今早收到了通知，居然被允许上架了，苹果审核真是<strong>玄学</strong>。虽然这时候已经做了最坏的打算，并开始2.0新版本的开发了，这其中就包括了<strong>内购</strong>，但1.0最终被接受也算是一件振奋人心好事儿。</p><blockquote><p>苹果审核挺蛋疼的，需要做好被拒绝几次的准备。</p></blockquote><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>至此，我完成了当初给<strong>XZJ同学</strong>许诺的让Match上架App Store的约定。在1个月时间内利用下班时间重拾iOS开发技巧，<strong>熬夜</strong>克服了一个又一个困难，现在回想起来还挺<strong>值得</strong>的。看到别人手机、电脑上跑着我写的应用，是我作为一个程序员最大的<strong>满足</strong>。</p><p>最后，打一个广告，欢迎各位同学使用Match来学高数、赚零花钱。<strong>各大应用商店有售!</strong></p><p align="center"><br>  <a href="https://itunes.apple.com/cn/app/match问答/id1414728016?mt=8" target="_blank" rel="external"><br>  <img alt="Download on the app store" src="https://user-images.githubusercontent.com/7317008/43209852-4ca39622-904b-11e8-8ce1-cdc3aee76ae9.png" width="160"><br>  </a><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;“Match问答”App今天终于通过了苹果的审核，在&lt;em&gt;App Store上架了，&lt;/em&gt;&lt;a href=&quot;https://itune
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="http://zhihaozhang.github.io/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>浅谈函数式编程 (Introducing Functional Programming)</title>
    <link href="http://zhihaozhang.github.io/2018/07/30/FunctionalPrograming/"/>
    <id>http://zhihaozhang.github.io/2018/07/30/FunctionalPrograming/</id>
    <published>2018-07-30T12:30:44.000Z</published>
    <updated>2018-08-01T09:16:20.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近两周利用空余时间<strong>艰难</strong>“啃完”了objc.io出版的<a href="https://objccn.io/products/functional-swift/" target="_blank" rel="external">《函数式Swift》</a>这本书，感觉有些摸到了函数式编程的门道;在函数式编程<strong>思维</strong>的影响下，将之前的项目代码进行了改造。关于函数式编程，也算是有了一点心得，遂写成此文，虽然行文主要是以Swift为<strong>载体</strong>，但并不影响函数式思想的介绍。由于本人才疏学浅，而函数式编程本身<em>博大精深</em>，故谬误在所难免，如发现，还请指出。</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fts0h9ibzrj31kw0r2ahf.jpg" alt=""></p><blockquote><p>《函数式Swift》</p></blockquote><h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><h2 id="WHAT-is-函数式编程"><a href="#WHAT-is-函数式编程" class="headerlink" title="WHAT is 函数式编程"></a>WHAT is 函数式编程</h2><p>wiki对于函数式编程的定义如下:</p><blockquote><p>In computer science, functional programming is a <strong>programming paradigm</strong>—a style of building the structure and elements of computer programs—that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data. It is a <strong>declarative</strong> programming paradigm, which means programming is done with expressions or declarations instead of statements. </p></blockquote><p>我认为最重要的两个单词是<strong>programming Paradigm</strong>和<strong>declarative</strong>，而后者又是为了描述前者准备的。什么是programming Paradigm？我在前几个月写的博客<a href="http://zhihaozhang.github.io/2018/05/20/ProtocolOP/">《面向协议编程初探》</a>中已经解释过了，中文可以翻译为<em>编程范式</em>，我理解为<strong>编程语言设计者希望编程语言的使用者在使用编程语言的时候，思考问题的方式。</strong></p><p>而declarative可以翻译为<em>声明式</em>的，与之相对应的是<strong>imperative</strong>(指令式的)，目前最为广泛使用的<em>面向对象编程</em>就可以划到指令式编程这一类。(declarative和imperative的区别在下文中有所提及)</p><h2 id="函数式编程的和面向对象编程的历史"><a href="#函数式编程的和面向对象编程的历史" class="headerlink" title="函数式编程的和面向对象编程的历史"></a>函数式编程的和面向对象编程的历史</h2><p>在函数式编程面前，面向对象编程其实是晚辈。如果以smalltalk的出现作为面向对象编程元年，那么面向对象编程的历史应该从1975年算起(数据来源<a href="https://baike.baidu.com/item/smalltalk/1379989?fr=aladdin" target="_blank" rel="external">百度百科</a>);而函数式编程的元年可以追溯到Lisp语言出现的1958年(数据来源<a href="https://baike.baidu.com/item/LISP/22083" target="_blank" rel="external">百度百科</a>)。</p><p>函数式编程被很多大佬美誉为<strong>the next big thing</strong>，甚至被称为<strong>最好</strong>的编程范式。让人不免疑惑，既然比面向对象编程出来的早，为什么之前没火，而现在又火了呢？</p><h2 id="WHY函数式编程这两年又火了"><a href="#WHY函数式编程这两年又火了" class="headerlink" title="WHY函数式编程这两年又火了"></a>WHY函数式编程这两年又火了</h2><p>带着疑问，我在搜索引擎中搜索了“函数式编程”和“火了”这两个关键词，找到了一个<a href="https://www.zhihu.com/question/30190384/answer/142902047" target="_blank" rel="external">知乎问答</a>，了解了这一段历史。</p><p>很赞成知乎用户<em>狗好看</em>的回答:</p><blockquote><p>根本的原因是<em>摩尔定律</em>不适用。cpu的性能提升将体现在<strong>核数</strong>增加，这样并行的程序运行速度会越来越快。并行的程序的写法就是找出不能并行的地方，其他地方都尽量并行。如果要这样写，最需要避免的事情就是赋值。函数式编程的本质就是，规避掉“赋值”。</p></blockquote><p>他的回答比较不容易懂，我来用我的理解<em>翻译翻译</em>。</p><blockquote><p>摩尔定律: 当价格不变时，集成电路上可容纳的元器件的数目，约每隔18-24个月便会增加一倍，性能也将提升一倍。</p></blockquote><p>越来越多的人知道，放在初期还是成立的摩尔定律，最近有点不适用了。这和其他很多学科一样，开始的指数级发展，很容易让人过于乐观，到了瓶颈期后，学科发展很容易停滞不前。一个最明显的例子是医学领域关于癌症的笑话，说癌症被攻克，<strong>永远还需要30年</strong>。我用的第一台电脑的CPU是<strong>奔腾4</strong>的，同期经常听到的词还有<strong>赛扬</strong>处理器，奔四有1.4GHz左右的内核时钟，到今天我用的是2016年的顶配MacBook Pro，查了一下，参数为2.7GHz(<em>约20年过去了，还不到2000年的两倍</em>)。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fts1rk3ge3j30wk0jo46i.jpg" alt=""></p><blockquote><p>2016年的顶配MacBook Pro</p></blockquote><p>Intel的工程师也尝试过将这一参数加到3GHz甚至更高，但是他们发现功耗太高、发热太快。但是每年产品线又要更新，那怎么办呢？只能是往CPU里<em>塞核心</em>来获得<strong>计算能力</strong>和<strong>吞吐量</strong>，刚刚发布的MacBook Pro 2018顶配已经用上了<strong>多达6核心的i9</strong>处理器，甚至连iPhone X都已经有了6个核心。将这些核心都利用上，可以让设备充分发挥作用，如果没有充分利用，很多核心就会在那里空转。为了充分利用多核心，在面向对象编程的世界中，经常用到的技术是<strong>同步机制和加锁</strong>，但由于函数式编程的特性，在函数式编程的世界里就不会出现这个问题，因此函数式编程又<strong>火了</strong>。</p><p>其实在科技界这种死灰复燃的例子还有很多，zelear的<em>王自如</em>在他的节目《科技相对论》<a href="http://www.zealer.com/post/223.html" target="_blank" rel="external">小众产品复活指南</a>里曾经介绍过几款死灰复燃产品，比如：<em>有轨电车、死飞、机械键盘、拍立得、车载广播</em>等。这些产品和函数式编程一样，都没有被<strong>替代</strong>的那么彻底，时过境迁，找到了合适的土壤，用户突然又开始想念他的某个功能，所以又活过来了。</p><h1 id="函数式编程的特性-HOW"><a href="#函数式编程的特性-HOW" class="headerlink" title="函数式编程的特性(HOW)"></a>函数式编程的特性(HOW)</h1><p>很遗憾，经过上一节的解释，我依然未能说清函数式编程是什么。这个问题跟面向对象等其他编程范式一样很难给出准确的定义，只能从几个比较<strong>热门</strong>的特性列举一些例子。</p><h2 id="一等函数"><a href="#一等函数" class="headerlink" title="一等函数"></a>一等函数</h2><p>函数的重要性在函数式编程里不言而喻，在支持函数式编程特性的语言里，函数被<strong>提到</strong>了一个非常重要的位置，他跟<em>Int、String、Bool</em>有着相同的地位。函数可以作为变量的字面量存储起来、作为函数的参数和返回值在函数之间传递。</p><p>函数作为变量的例子很多，只想说一句话：</p><blockquote><p>闭包是函数的<em>字面量</em>，就像1之于Int，true之于Bool。</p></blockquote><h2 id="Currying"><a href="#Currying" class="headerlink" title="Currying"></a>Currying</h2><p>接下来举一个函数作为返回值的例子：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">addFactory</span><span class="params">(value1 : Int)</span></span> -&gt; (<span class="type">Int</span> -&gt; <span class="type">Int</span>)&#123;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">(value2 : Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line"><span class="keyword">return</span> value1+value2</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> adder</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> addOne = addFactory(<span class="number">1</span>)</div><div class="line">addOne(<span class="number">2</span>)  <span class="comment">// return 3</span></div><div class="line"></div><div class="line">addFactory(<span class="number">1</span>)(<span class="number">2</span>)  <span class="comment">// return 3</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(value1 : Int , value2 : Int)</span></span>&#123;</div><div class="line"><span class="keyword">return</span> value1 + value2</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>addFactory返回的值是一个函数，其类型为(Int -&gt; Int),意思是返回值是一个接受Int并且返回Int的函数，我们可以用两种方式调用它。其中第二种addFactory(1)(2)又被称为我们习以为常的add(1,2)这种函数调用方式的<strong>Currying(柯里化)</strong>。多说一句，Currying是一个人的名字，他的全名叫<em>Haskell</em> Currying，剩下的应该不需要多解释了。</p><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>接受其它函数作为参数的函数有时被称为<strong>高阶函数</strong>。或许大多数人都使用过<em>Map/Reduce/Filter</em>，他们就是高阶函数最常见的例子。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>]</div><div class="line"></div><div class="line"><span class="comment">// way 1</span></div><div class="line"><span class="keyword">let</span> strs : [<span class="type">String</span>] = []</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span>..&lt;nums.<span class="built_in">count</span>) &#123;</div><div class="line">strs[i] = <span class="string">"No."</span> + <span class="type">String</span>(nums[i])</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// way 2</span></div><div class="line"><span class="keyword">let</span> brr = nums.<span class="built_in">map</span> &#123;</div><div class="line">    <span class="string">"No."</span> + <span class="type">String</span>($<span class="number">0</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以Map为例，假设我们有这样一个需求，将一个整型数组，变为一个String类型的数组，并且在每个数字前加上“No.”，一个没有函数式编程思想的程序员极可能写出way1的代码，这种循环的代码几乎每个程序员都写了几千遍了，很好懂也并没有觉得有什么异常，但其实这是一种<strong>指令式</strong>的编程方式。何为指令式编程呢？就是人以机器的思维方式去思考，我们把自己当做了一台机器，比如上面way1的实现方式，就是我们将思维映射到了CPU上，强迫自己像CPU一样去思考。机器是怎么处理这个问题的呢？他首先要开辟一片内存，然后变更寄存器的值映射到变量i上，通过递增来做循环，然后创建字符串的字面量放到刚开辟出来的内存指定位置上。</p><p>way2使用了集合类型的高阶函数，它接收一个参数，这个参数是另一个函数(函数名不重要)，负责String的初始化的方法。当它拿到这个函数之后，自动帮我们把里面的每一个元素拿出来，传到这个String的初始化函数里面去，就生成了最终的数组。这就是<strong>声明式编程</strong>，好处很明显，代码比以前短了很多，思维方式变得更像人思考的方式了。</p><p>有了高阶函数，函数可以自由<strong>装配</strong>，由一些简单的函数<strong>装配</strong>出一些高级的函数。</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fts5pfl6e9j30fz089jrz.jpg" alt=""></p><blockquote><p>装配过程的可视化</p></blockquote><p>关于函数组合的例子，《函数式Swift》给出的实例是对CoreImage库的使用，对一幅图像进行<strong>模糊、加滤镜、切圆角</strong>等操作。一些网红照片的出炉，通常也是由这些看似最简单的操作组合起来的。</p><h2 id="纯函数-pure-function"><a href="#纯函数-pure-function" class="headerlink" title="纯函数(pure function)"></a>纯函数(pure function)</h2><p>在函数式编程中，对于函数还有两点特殊的要求。</p><ol><li>不依赖外部</li><li>不改变外部<br>满足上面两点要求的函数被称为<em>纯函数(pure function)</em>。这两点保证了无论在什么时候调用函数，对于相同的输入，总会得到相同的输出。这至少带来了两点好处：</li></ol><p>1.函数的可测试性</p><p>2.上文提到的函数式编程没有的<em>同步与加锁</em>问题</p><p>至此也可以引出函数式编程的<strong>思想</strong>了:</p><blockquote><p>避免使用程序状态和可变对象，是降低程序复杂度的有效方式之一，而这也正是函数式编程的精髓。函数式编程强调执行的结果，而非执行的过程。我们先构建一系列简单却具有一定功能的小函数，然后再将这些函数进行组装以实现完整的逻辑和复杂的运算，这是函数式编程的基本思想。</p></blockquote><h2 id="函子、适用函子、单子-Functor-Applicative-Monad"><a href="#函子、适用函子、单子-Functor-Applicative-Monad" class="headerlink" title="函子、适用函子、单子(Functor, Applicative, Monad)"></a>函子、适用函子、单子(Functor, Applicative, Monad)</h2><p>这个部分需要单独写一篇文章介绍，我在理解过程中发现了一个很好的<a href="http://jiyinyiyong.github.io/monads-in-pictures/" target="_blank" rel="external">图解blog</a>.</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fts5vo3dsoj30og07gmy7.jpg" alt=""></p><p>这里先给出结论：<br>functor: 通过 fmap 或者 &lt;$&gt; 应用是函数到封装过的值<br>applicative: 通过 &lt;*&gt; 或者 liftA 应用封装过的函数到封装过的值<br>monads: 通过 &gt;&gt;= 或者 liftM 应用会返回封装过的值的函数到封装过的值</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li>《函数式Swift》(<a href="https://objccn.io/products/functional-swift/" target="_blank" rel="external">https://objccn.io/products/functional-swift/</a>)</li><li>smallTalk 百度百科 (<a href="https://baike.baidu.com/item/smalltalk/1379989?fr=aladdin" target="_blank" rel="external">https://baike.baidu.com/item/smalltalk/1379989?fr=aladdin</a>)</li><li>Lisp 百度百科(<a href="https://baike.baidu.com/item/LISP/22083" target="_blank" rel="external">https://baike.baidu.com/item/LISP/22083</a>)</li><li>知乎:为什么函数式编程这两年又火了(<a href="https://www.zhihu.com/question/30190384/answer/142902047" target="_blank" rel="external">https://www.zhihu.com/question/30190384/answer/142902047</a>)</li><li>《科技相对论》小众产品复活指南(<a href="http://www.zealer.com/post/223.html" target="_blank" rel="external">http://www.zealer.com/post/223.html</a>)</li><li>Functor, Applicative, 以及 Monad 的图片阐释 (<a href="http://jiyinyiyong.github.io/monads-in-pictures/" target="_blank" rel="external">http://jiyinyiyong.github.io/monads-in-pictures/</a>)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近两周利用空余时间&lt;strong&gt;艰难&lt;/strong&gt;“啃完”了objc.io出版的&lt;a href=&quot;https://objccn.io
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="swift" scheme="http://zhihaozhang.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Match for iPhone开发笔记 &lt;二&gt; 网络请求和数据流篇</title>
    <link href="http://zhihaozhang.github.io/2018/07/23/Match2/"/>
    <id>http://zhihaozhang.github.io/2018/07/23/Match2/</id>
    <published>2018-07-23T09:43:02.370Z</published>
    <updated>2018-07-24T08:03:21.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>书接<a href="http://zhihaozhang.github.io/2018/07/11/Match/">上文</a>,作为一个<strong>数据驱动</strong>(<em>Data driven</em>)类的APP,如何从服务器端<em>获取到数据</em>并发送<strong>尽量少</strong>的请求次数是一个非常重要的点，甚至被定为<strong>最重要</strong>的点也不为过。这篇博客将介绍我在做Match这个应用过程中使用到的技术以及优化的方法。</p><h1 id="网络请求库"><a href="#网络请求库" class="headerlink" title="网络请求库"></a>网络请求库</h1><h2 id="Alamofire、Moya和Just"><a href="#Alamofire、Moya和Just" class="headerlink" title="Alamofire、Moya和Just"></a>Alamofire、Moya和Just</h2><p>现有的网络请求库非常多，从OC时代<em>大名鼎鼎</em>的<strong><a href="https://github.com/AFNetworking/AFNetworking" target="_blank" rel="external">AFNetworking</a></strong>到Swift时代的<strong><a href="https://github.com/Alamofire/Alamofire" target="_blank" rel="external">Alamofire</a></strong>及它的进一步封装<em><a href="https://github.com/Moya/Moya" target="_blank" rel="external">Moya</a></em>,都是对苹果网络层URLSession的封装，且有着相似的目的<strong>：将网络请求从ViewController中解耦出去。</strong>ViewController中如果混杂了太多的网络请求的<strong>构建</strong>、<strong>发送</strong>、<strong>响应接收</strong>、<strong>响应请求的处理</strong>，会使得ViewController非常<strong>臃肿</strong>，不利于代码维护。</p><p><img src="https://moya.github.io/web/diagram.png" alt=""></p><blockquote><p>Moya在Alamofire的基础上进一步对网络请求进行了封装，使网络请求更容易</p></blockquote><p>考虑到Alamofire和Moya引入的成本较高，我发现了另一个更容易上手的库，名字也很酷，叫<a href="https://github.com/JustHTTP/Just" target="_blank" rel="external">Just</a>,名字就感觉<strong>屌屌</strong>的，用起来也是出奇的好用，调用<em>GET/POST</em>请求<strong>Just</strong>需要一行代码，</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  get request</span></div><div class="line"><span class="type">Just</span>.<span class="keyword">get</span>(<span class="string">"http://httpbin.org/get"</span>)</div><div class="line"></div><div class="line"><span class="comment">//  post request</span></div><div class="line"><span class="type">Just</span>.post(</div><div class="line">    <span class="string">"http://justiceleauge.org/member/register"</span>,</div><div class="line">    data: [<span class="string">"username"</span>: <span class="string">"barryallen"</span>, <span class="string">"password"</span>:<span class="string">"ReverseF1ashSucks"</span>],</div><div class="line">    files: [<span class="string">"profile_photo"</span>: .<span class="type">URL</span>(fileURLWithPath:<span class="string">"flash.jpeg"</span>, <span class="literal">nil</span>)]</div><div class="line">) &#123; r <span class="keyword">in</span></div><div class="line">    <span class="keyword">if</span> r.ok &#123; <span class="comment">/* success! */</span> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>但由于这个项目已经1年多没人维护了，只支持到了Swift 3，在github上发现一堆Swift 4的issue list，因此不得不再寻找其他网络请求库。这时候，<a href="https://github.com/daltoniam/SwiftHTTP" target="_blank" rel="external">SwiftHTTP</a>出现在我视野中，并成了我最终的选择。</p><h2 id="SwiftHTTP成了最终的选择"><a href="#SwiftHTTP成了最终的选择" class="headerlink" title="SwiftHTTP成了最终的选择"></a>SwiftHTTP成了最终的选择</h2><p>SiwftHTTP有着和Just类似的简洁语法，能做到一行代码解决HTTP请求。对需要快速完成整个APP开发的我来说，它能够<em>构建请求并发送</em>、<em>接收响应并处理</em>，加上它的体积小、用法简单等优点，简直就是<strong>简单、可依赖</strong>最好的诠释。当然，Alamofire和Moya存在的价值是不可否定的。</p><p><img src="https://user-gold-cdn.xitu.io/2018/4/3/16288fa6039c2696?imageView2/0/w/1280/h/960/ignore-error/1" alt=""></p><blockquote><p>网络请求库的简单流程</p></blockquote><h2 id="SwiftHTTP响应的处理"><a href="#SwiftHTTP响应的处理" class="headerlink" title="SwiftHTTP响应的处理"></a>SwiftHTTP响应的处理</h2><p>网络请求的响应都是二进制数据，具体到iOS，是NSData类型的数据，因此需要将响应结果进行<strong>编码</strong>。比如拿到的结果是一张图片，在你用<strong>UIImage</strong>对其<em>编码(decode)</em>之前，在计算机看来，它跟其他音频、视频甚至字符串没有什么俩样，都是一串<em>二进制码</em>。</p><p>有过网络方面开发经验的朋友都知道，无论是响应还是请求，除了我们最想要数据部分(<em>请求体</em>)，还有额外的<strong>开销(头部)</strong>，他们告诉你这段请求成功了没有、什么原因没有成功、请求从哪里来、到哪里去等信息，真正有用的部分其实只占了一部分。这也是为什么需要尽量减少网络请求次数的原因，因为这些<strong>额外</strong>的部分，也是会带来<strong>开销</strong>的。网络请求次数太多难免造成应用卡顿，使得用户体验较差。</p><p>具体到SwiftHTTP，我获取到的响应体可能是一个<strong>String</strong>、一个<strong>Int</strong>值、一个<strong>Double</strong>值，更多的时候，是一个<em>对象(Object)</em>，我们需要根据和后端开发者的约定，将其进行正确编码。对Object的编码是较为复杂的,示例如下:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> <span class="type">HTTP</span>.<span class="type">POST</span>(servlet_path!)&#123; response <span class="keyword">in</span></div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> error = response.error&#123;</div><div class="line">                <span class="built_in">print</span>(error)</div><div class="line">                <span class="keyword">return</span></div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">do</span> &#123;</div><div class="line">                <span class="keyword">let</span> decoder = <span class="type">JSONDecoder</span>()</div><div class="line">                <span class="keyword">self</span>.user_history = <span class="keyword">try</span> decoder.decode(history.<span class="keyword">self</span>, from: r.data)</div><div class="line">            &#125;<span class="keyword">catch</span>&#123;</div><div class="line">                <span class="keyword">return</span></div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        </div><div class="line"></div><div class="line"><span class="comment">// history 遵从**Codable**</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">history</span> : **<span class="title">Codable</span>**</span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> asked : [<span class="type">Int</span>]!</div><div class="line">    <span class="keyword">var</span> campaigning : [<span class="type">Int</span>]!</div><div class="line">    <span class="keyword">var</span> favourite : [<span class="type">Int</span>]!</div><div class="line">    <span class="keyword">var</span> phoneNumber : <span class="type">Int</span>!</div><div class="line">    <span class="keyword">var</span> replied : [<span class="type">Int</span>]!</div><div class="line">    <span class="keyword">var</span> tableIndex : <span class="type">Int</span>!</div><div class="line">    <span class="keyword">var</span> voting : [<span class="type">Int</span>]!</div><div class="line">    <span class="keyword">var</span> won : [<span class="type">Int</span>]!</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>相应的处理流程是先判断有没有错误，如果有错，直接返回；没有错误的前提下，使用SwiftyJSON中的JSONDecoder对Object进行编码，需要用do和catch<strong>包围</strong>，因为这一过程不保证一定能成功。</p><blockquote><p>如果结果是数组，将<strong>history.self</strong>改为<strong>[history].self</strong>即可。</p></blockquote><p>需要提前申明Object的类型，且服从<strong>Codable</strong>协议。这里我选用了<strong>Strcut</strong>而不是<strong>Class</strong>，两者的具体区别感兴趣的可以自行去搜索，主要区别是Struct是<strong>值类型</strong>，Class是<strong>引用类型</strong>的。</p><p>当然，String和Int等其他基本类型也有自己的编码方法。比如String的编码方法为:String(data: r.data, encoding: String.Encoding.utf8)。</p><h2 id="Object-Model文件的生成和注意事项"><a href="#Object-Model文件的生成和注意事项" class="headerlink" title="Object Model文件的生成和注意事项"></a>Object Model文件的生成和注意事项</h2><p>Struct和Class的生成可以借助第三方工具<strong><a href="https://github.com/Ahmed-Ali/JSONExport" target="_blank" rel="external">JSONExport</a></strong>完成，国内有人将其进行了<a href="https://github.com/yagamis/JSONExport" target="_blank" rel="external">汉化</a>,可以很方便的导出我们所需要的Swift model文件。</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1ftjy4408vwj31ju1440xs.jpg" alt=""></p><blockquote><p>JSONExport汉化版界面</p></blockquote><p>在使用JSONExport之前，网络请求的结果一般是通过PostMan获取的，有些字段的结果可能是<strong>nil</strong>,直接复制进去JSONExport就会将该字段申明为<strong>Any</strong>，但是这就让编译器为难了，因为他并不知道需要为这个字段开多大的空间。因此当你尝试让该Struct服从<strong>Codable</strong>协议时，<strong>会报错</strong>，这时就需要与后端开发人员沟通，<em>将Any改为正确的特定类型。</em></p><h1 id="从数据流角度减少网络请求数"><a href="#从数据流角度减少网络请求数" class="headerlink" title="从数据流角度减少网络请求数"></a>从数据流角度减少网络请求数</h1><p>上文已经提到了，网络请求会给系统带来很大的一笔开销，减少网络请求数是开发者在开发应用过程中优化应用的一个<strong>重要方面</strong>。这里，我给出在做Match过程中减少网络请求数比较<em>Hack</em>的一个小技巧，也不知道对不对，总之是有效的减少了网络请求数。</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1ftjx2jktw7j31j417yadt.jpg" alt=""></p><blockquote><p>从<em>数据流(data-flow)</em>角度看应用</p></blockquote><p>鉴于在应用开发过程中反复了这种模式，这里只需举一个业务场景来说明即可。上图中涉及了三个场景，第一个场景是问题列表页，是一个TableView，数据是从服务器端获取的(默认20个)。当用户点击TableView的某个Cell，会跳转到问题详情页，包含了该问题的题干和回复部分，这部分数据是由第一个场景传过来的，至此没有<strong>再次</strong>发送获取信息的网络请求。</p><p>第三个场景是用户尝试回答这道题目，点击发送之后，回到第二个场景，这时候如果不做任何动作，用户是看不到自己刚刚的回复内容的，这很容易让用户<strong>造成困惑。</strong>但是我又不想再次发送网络请求来更新数据，于是我借助了<strong>App Delegate</strong>这个<em>中转站</em>，将刚刚用户回复的相关信息进行了保存，并<em>人为的</em>添加到了TableView的数据中。这样，在没有发送任何数据请求的前提下，做到了视图已经更新的<strong>假象</strong>。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>早在写上一篇开发笔记的时候，就有读者问能否像之前的应用一样将Match<strong>开源</strong>。诚然，作为一个完整的应用，有着较大的借鉴意义，但是考虑到朋友为这个应用的开发向我支付了不菲的费用，这个应用最终版权应属于他，所以考虑再三，决定<strong>不开源</strong>，还望大家理解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;书接&lt;a href=&quot;http://zhihaozhang.github.io/2018/07/11/Match/&quot;&gt;上文&lt;/a&gt;,作为一个
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="http://zhihaozhang.github.io/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>魔都买房杂记(下)</title>
    <link href="http://zhihaozhang.github.io/2018/07/18/buyhousetwo/"/>
    <id>http://zhihaozhang.github.io/2018/07/18/buyhousetwo/</id>
    <published>2018-07-18T05:47:26.015Z</published>
    <updated>2018-07-18T05:47:26.015Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>上一篇博客<a href="http://zhihaozhang.github.io/2018/07/16/buy-house/">魔都买房杂记(上)</a>写完分享以来，我只在朋友圈进行了分享，便得到了近300次的阅读，我微信好友一共才<em>400</em>人。虽然可能存在某些好友多次阅读了这个文章的现象，但还是不难看出<strong>楼市</strong>的受关注度，毕竟它挑动着每一个人的<strong>神经</strong>，每个人都迟早是有一块地方要安定下来的。</p><p>在写这篇博客的时候，我已经走完了剩下的几乎所有流程，完成了<strong>草签</strong>(合同与正式网签一样)，只剩下网签这最后一步了。这篇博客，我准备书接上文，将后续的流程写出来，方便读者就看到完整的新房购买过程;同时，将重点放在二手房的<strong>看房、选购</strong>和<strong>谈价</strong>技巧，和上文一样，由于我的<em>不专业性</em>，所提意见有强烈的<em>个人主观色彩</em>，也不接受任何质疑和撕逼，仅供大家参考。</p><h1 id="选房后的签约"><a href="#选房后的签约" class="headerlink" title="选房后的签约"></a>选房后的签约</h1><p>签约有很多流程，由于我认购楼盘的房源比较多，需要打印的东西太多，即使10台打印机同时出动依然来不及。并且网签需要时间，而zf网签系统只在指定的时间段内开放，所以昨晚我经历的只能算是<strong>草签</strong>。</p><p>草签和正式签差别并不大，所有合同都是一样的，只是为了<em>减少正式网签</em>的确认时间，过程还是需要<strong>仔细核对</strong>的，我在核对过程中就发现草签合同里把我购买的房屋售价<strong>写错</strong>了。</p><p>需要签的合同非常多，而且通常至少是一式两份，如果嫌写名字太麻烦，也可以带<strong>个人印章</strong>。合同的细节非常多，这时候我不知道除了接受，还有没有argue的余地了。反正我是无脑的签完了，整个流程需要<strong>两个小时</strong>。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fte9lrckdnj30r80qadh3.jpg" alt=""></p><blockquote><p>众多合同之一，其他涉及敏感信息的合同不宜展示</p></blockquote><p>草签最终合同之前，是需要付清<strong>除了贷款部分所有钱的</strong>。注意，只能刷个人名下的银行卡(最多两张)。由于金额太大，刷卡前最好跟银行客服确认好刷卡额度，现场排队的时候你再去跟人确认申请调整就太浪费时间了。付完钱后，注意<strong>一定</strong>要保留好pos机的票和<strong>收据</strong>。</p><p>接下来就是等正式的网签通知啦~</p><h1 id="二手房看房、选购、谈价"><a href="#二手房看房、选购、谈价" class="headerlink" title="二手房看房、选购、谈价"></a>二手房看房、选购、谈价</h1><p>坦率的讲，这批16年被捂的新盘开完后，上海未来三年内新房将会<strong>极少</strong>。这并非我信口开河，而是由土拍市场决定的，且后面zf想租售并举，所以短期内买新房的机会真的<strong>不多</strong>了，有<strong>房票</strong>和<strong>火力</strong>的抓紧了。<br><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fte9rsnspej30u60omgn3.jpg" alt=""></p><p>我看的二手房也不少，也经历过几次与房东谈价格(包括面对面和电话谈价)，也小小的总结了一点点经验和教训，提供给有购买二手房打算的朋友做个参考。</p><h2 id="二手房看房"><a href="#二手房看房" class="headerlink" title="二手房看房"></a>二手房看房</h2><p>二手房看房一般是需要提前预约的，守时很重要，因为对方交易也想找个靠谱、讲信用的人，而守时都不能做到，会大大减分。</p><p>除此之外，我觉得二手房看房最需要注意是<strong>不卑不亢</strong>，在房东(包括中介)面前不要<strong>暴露</strong>出你的真实想法。在房东面前，<strong>尽量找他房子的一些缺点</strong>，比如<em>楼层不好、朝向不好、装修</em>不好等，<strong>暗示他你的房子并没有你想象的那么好</strong>，给后面的谈价<strong>留出足够的余地</strong>。之前就是有次在某个房东面前表现的太喜欢他房子了，被他吃定了的感觉。最后跟他谈价没有成功，后面他居然以低于我报价10万的价格将房子售出了。</p><p>如果真的是很喜欢，<strong>暗自窃喜</strong>就行，不要表现出来，最多就说还行吧。如果真的不喜欢，那也好办，当房东面多说一些他的优点，出门后再也不联系就行。</p><p>我发现我最开始看房最大的一个错误就是主要<strong>看装修了</strong>，其实装修好这事也不全是好处。房东会在总价里体现出来，而房屋的装修用料什么的需要时间来<em>检验</em>。其实看二手房，最主要看的是<strong>户型</strong>，户型好很重要，相比于高昂的房价，<em>装修其实没那么值钱</em>。有些装修一般的房子，售价要比<strong>号称“精装”</strong>的房子便宜非常多，那他的房子就显得性价比非常高了。</p><p>之前有人说毛坯房最好，自己拿来想怎么装修就怎么装修。这点我非常认同，因为那种<strong>半吊子</strong>房屋你如果想重新装修，不得不先把之前装修处理掉，然后再进行重新装修，这个过程显然是比毛坯直接装修要<strong>麻烦</strong>的，当然装修过程中是需要费一些<strong>精力</strong>和<strong>时间</strong>的。</p><p>觉得满意的房子，在正式进入谈价之前，需要<strong>委托中介做产调、确认房子无抵押、向小区里的人打听房子里面没有出过事(成交后因为凶宅闹上法庭的案例不少)。</strong></p><p>总结：</p><blockquote><p>二手房<strong>看户型不看装修</strong>，通常 毛坯房 &gt; 简装房，<strong>真</strong>精装房根据与毛坯的溢价定，谈价前请中介做产调。</p></blockquote><h2 id="二手房谈价"><a href="#二手房谈价" class="headerlink" title="二手房谈价"></a>二手房谈价</h2><p>二手房谈价是个技术活，一般是由中介进行<strong>初步沟通</strong>的。比如这个房子你想以<strong>500</strong>万买到，你就应该告诉中介，我最多出<strong>480</strong>万，让他去跟房东进行沟通。房东一般是不同意的，会抛出一个价格，如果不高于<strong>520</strong>，那你们就可以坐下来面对面谈了，因为房东对中介也不会说出心里的底价，最终价格都是需要和真实客户面对面商量的。</p><p>有了上一步的铺垫，你抓住他房子的缺点，告诉他你出价的理由(<em>列缺点</em>)，如果对方态度友好，最后适当降价达到了你心理预期价格，你就装作免为其难的<strong>接受</strong>吧，毕竟人都有贪小便宜的缺点，愉快的成交就行。如果实在不行，而且你又很想得到这个房子，那就看加价的幅度能不能承受，遇到真正喜欢的就下手吧，多几万<strong>放在30年来看</strong>也不是多大的问题。</p><p>谈价分为税费各付价和买房付价，其实差别也不大，羊毛还是出在羊身上。还是那句话，这种重要的事情最好是能够当面坐下来谈，如果谈到价格低于你的心理预期了，可以付个十万二十万定金，防止房东<strong>反悔</strong>，因为你看中的房子，其他人很可能因为喜欢这套房子，愿意比你多出几万。</p><h2 id="对中介的态度"><a href="#对中介的态度" class="headerlink" title="对中介的态度"></a>对中介的态度</h2><p>买二手房，选中介真的很重要，好的中介推荐的房子靠谱，而且砍价多，做事稳妥。站在中介的立场上考虑，他最希望的就是卖家和买家尽快成交，他好去搞定新的客户，最怕把战线拖的太长了。</p><p>一般中介不会特别<strong><em>偏袒</em></strong>买家或者卖家，他能迅速找到一个价格，让买卖双方都能接受，拿到中介费，对他来说是最重要的。在中介面前也需要有所保留，不能把你心里的真实想法和价格告诉他。极端情况下，你甚至可以给中介<strong>悬赏</strong>，比如上面的例子，你告诉他如果他能把价格搞到480万，你另给<strong>5</strong>万他作为奖励，这样他就会<strong>有动力</strong>去跟房东砍价，中介的口才一般是比你好的多的。如果最终他做到了，你也以<strong>485</strong>万(低于心理预期的<strong>500万</strong>)成交了；如果他没有做到，有了上面中介与房东的砍价过程，房东的<em>心理预期价格</em>通常会有所<strong>松动</strong>，你后面再谈价会<strong>顺利</strong>一些。</p><p>如果价格合适，双方都能接受，下面就是谈中介费了。很遗憾，我没能走到这一步，因此不能给出太多有效建议，但是上海的中介一般会要求你给房屋售价的<strong>2%</strong>，从我身边朋友了解到的情况来看，通常最终都在<strong>1.4%-1.6%</strong>之间，这里推荐<strong>正规的大中介(如链家)</strong>。某些中介上来就说他们只收<strong>1%</strong>的费用，这种尤其需要<strong>警惕</strong>。</p><h1 id="市区二手小房子和郊区大房子怎么选"><a href="#市区二手小房子和郊区大房子怎么选" class="headerlink" title="市区二手小房子和郊区大房子怎么选"></a>市区二手小房子和郊区大房子怎么选</h1><p><strong>写在前面:</strong>如果你资金足够，市区成熟的<em>学区、医院和商圈</em>还是会给你的生活带来很多便利。这个章节主要是给预算<strong>不那么足</strong>的人看的。</p><p>选购市区二手房的主要原因可能还是由于它的<em>地段好，周边配套比较齐全</em>。相比于郊区的房子，市区的二手房更为<strong>保值</strong>，这点是毋庸置疑的。保值是指大环境不好，万一房价下跌时候，市区价格表现更为坚挺;但是对于房价上涨，升值空间就不好说了，由于市区配套已经很齐全了，周边配套暂时不全的郊区完善后带来的利好，市区是享受不到的。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fte4z3bv7pj308c0ckglz.jpg" alt=""></p><blockquote><p>1997年从东方明珠上俯瞰陆家嘴</p></blockquote><p>20年前从东方明珠上俯瞰陆家嘴，是上图的场景，从图片中看，荒凉到还不如现在的郊区。放到当时，你会投资吗？房子买的是未来，买配套成熟的不叫<strong>投资</strong>，只能叫<strong>储蓄</strong>。</p><p>郊区空气好，环境好，也相对比较安静。但郊区也可能会有<strong>飞机</strong>经过、<strong>高铁</strong>经过，距离<em>垃圾焚烧厂、变电站</em>等对人体不利的功能场所比较近等缺点。这些都是需要<strong>综合考虑</strong>的。</p><h1 id="最后的感悟"><a href="#最后的感悟" class="headerlink" title="最后的感悟"></a>最后的感悟</h1><p>其实在大城市买房，是需要<em>两代</em>(<em>甚至三代人</em>)的努力的，知乎上经常有问题问该不该掏空6个钱包来买房这种问题。大部分的回答是趋同的，即<em>应该掏空买</em>。因为这样能让父辈和祖辈的资产更保值甚至升值，因为把钱投入到楼市，比起存到银行或者放到最近经常炸雷的<strong>P2P</strong>，已经是<strong>对抗通货膨胀</strong>很优秀、<em>很无脑</em>的方法了。房贷也是这样，<strong>4.9%</strong>的基础利率，比起每年通货膨胀率的7%-9%来说，<strong>狠赚</strong>，因此能多贷尽量多贷。毕竟国家肯一次性借给你这么多钱的机会，通常也就买房这一次了。</p><p>工薪阶层如果完全白手起家，是很难凑够首付的，正如上篇博客结尾梁老师微博说的那样，郊区买不了也别拧巴，东南沿海城市了解一下，实在不行就回家找个能发挥先进经验的行业，<strong>给孩子铺个路。</strong></p><h2 id="三代人的“美国梦”"><a href="#三代人的“美国梦”" class="headerlink" title="三代人的“美国梦”"></a>三代人的“美国梦”</h2><p>文末，我引两个故事。第一个是美国<strong>华裔</strong>前商务部部长骆家辉的故事。骆家辉先生的祖父<strong>1880</strong>年去到美国，从一名仆人做起，学习语言同时挣钱，而后回到中国组建家庭。在骆家辉的父亲12岁时，祖父又把一家人带回了美国。骆家辉父亲像半个ABC一样，在美国度过了青少年时光，成年后参军并参加了第二次世界大战，还参与了诺曼底登陆。随后，他的父亲也像祖父一样，回到香港组建了家庭，最后再次举家回到美国，定居西雅图。</p><p>骆家辉记得，在自己幼儿园时期，母亲也在为了成为美国公民学习英语。除了学习语言，父母还做了一些小生意维持生计。不管做什么，他很清楚的认识到，家庭的重心，父母的重心，都放在三件事情上：<strong>第一，获得优良的教育；第二，努力奋斗；第三相互扶持。</strong></p><p>他的父母和中国大多数父母一样，节俭的生活，即使再穷也没有穷子女的教育，为的就是让他们能够过上更好的生活，抓住更多的机遇。正是因为如此，骆家辉先生成为了美国历史上第一位美国本土的亚裔州长和第一位华裔州长。</p><p><img src="https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=920aeb7fbe096b63951456026d5aec21/b03533fa828ba61e309fe47f4134970a304e5968.jpg" alt=""></p><blockquote><p>在就职典礼上，他开玩笑说，州长宅邸距离自己祖父曾经帮佣的那间房子只有<em>一英里的距离</em>，但是他们家族花了<strong>整整100年时间</strong>才<em>走完这段路</em>。</p></blockquote><h2 id="《神秘的西夏》"><a href="#《神秘的西夏》" class="headerlink" title="《神秘的西夏》"></a>《神秘的西夏》</h2><p>我最近一直在看一部央视纪录片《神秘的西夏》，讲的是西夏的开国皇帝<strong>李元昊</strong>在祖父李继迁和父亲<strong>李德明</strong>长达数十年积攒实力后，<strong>称帝</strong>并和建立了与宋、辽三分天下的百年基业。</p><p><img src="https://gss2.bdstatic.com/9fo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=4720b4d9b6b7d0a26fc40ccfaa861d6c/50da81cb39dbb6fdb8723d4d0d24ab18972b37b4.jpg" alt=""></p><p>神秘的西夏这部<strong>充满诚意</strong>的纪录片，涉及了西夏<em>文化、经济、政治、军事</em>等诸多方面，看完这部纪录片我懂了很多，<em>历史</em>就是不断重复的<strong>人性</strong>，很多道理和规律放到今天还是这样，<strong>强烈</strong>建议感兴趣的朋友可以去看看。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>买房这段时间我一直在想，我的<strong>成长过程</strong>和我的孩子将来会怎么样。</p><p>我出生于江苏<strong>四线</strong>城市(的镇子上)，从小少有人管，属于完全的<strong>放养</strong>状态。由于父母比较忙，我经常是只能放了学玩到天黑，饿到不行才到隔壁老爷爷家吃口饭。虽然贪玩，但我还算自觉，基本能坚持做到先做完作业再玩。初到大学，我发现周围的同学都有很多才艺，而我却没有什么拿得出手的才艺。但我从未抱怨过，我觉得农民身上的<strong>纯朴</strong>是千金难换的。我预感到我孩子将来的成长环境<strong>同比</strong>会比我好一些，可能也会像很多城里孩子那样接受很多种类的学前班、兴趣班。另外，优秀小学也是个资源，这就是<strong>学区房</strong>售价高的主要原因，但是由于预算不够，暂时不能给他提供好的学区。</p><p>上一辈总是希望下一辈能够过的比自己好，因为下一辈总是站在上一辈的肩膀上。和平年代，那种<strong>朝为田舍郎，暮登天子堂</strong>的情况已然不可能发生，某一代人突然成为行业的领袖、一飞冲天，概率也并不是很大。</p><p>吴军老师曾在《<strong>硅谷来信</strong>》中提到过这个现象，他把社会阶级进行了分层(比如<strong>100</strong>层)，这100层大致是类似于金字塔那样的结构，越往上走，人数会越少。有些人命好，出生在第10层的家庭，那他10%的努力可能都比第90层的人100%的努力有效。这不能说是不公平，是由他父辈甚至祖辈的努力带来的。对第90层的人来说，让在他这一辈就冲到第10层的难度非常大，他能通过自己的努力，尽可能多<strong>往上*</strong>拱几层<em>，为他的孩子铺个路已经很好了。同样，对于第10层的人来说，如果他不够努力，在他这一代人掉到二三十层也是有可能的，但他通常活的比开始第90层要好很多。</em>懂了这个道理，看很多东西也就看开了。*</p><p>大部分家庭是需要一代人接着上一代人进行<strong>扎实努力</strong>，<em>扶摇曲折向上</em>的。最后希望大家日子都能越过越<strong>红火</strong>，家族越来越<strong>兴旺</strong>，一代更比一代强!</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fte9nruvz2j30u01sz78m.jpg" alt=""></p><blockquote><p>我未来的家</p></blockquote><p>———<strong>谨以此文献给帮助过我的亲人们</strong>———</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;上一篇博客&lt;a href=&quot;http://zhihaozhang.github.io/2018/07/16/buy-hous
      
    
    </summary>
    
      <category term="购房" scheme="http://zhihaozhang.github.io/categories/%E8%B4%AD%E6%88%BF/"/>
    
    
      <category term="随感" scheme="http://zhihaozhang.github.io/tags/%E9%9A%8F%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>魔都买房杂记(上)</title>
    <link href="http://zhihaozhang.github.io/2018/07/16/buy-house/"/>
    <id>http://zhihaozhang.github.io/2018/07/16/buy-house/</id>
    <published>2018-07-16T11:14:16.002Z</published>
    <updated>2018-08-24T10:02:39.975Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么要写这篇博客"><a href="#为什么要写这篇博客" class="headerlink" title="为什么要写这篇博客"></a>为什么要写这篇博客</h1><p>近期终于在魔都<strong>上海</strong>买到了一个属于自己的三房，在一线城市有了一个稳定的<em>安身立命</em>场所。经历了大半年的看二手房、和房东谈价格，到最终选择新房、认筹、摇号、选房。一来记录一下这段经历，二来也为想买房的人提供一些<strong>参考</strong>吧，也仅仅是参考了，毕竟我不是<strong>专业</strong>的。</p><h1 id="购买新房"><a href="#购买新房" class="headerlink" title="购买新房"></a>购买新房</h1><p>决定购买新房是在一次和二手房房东谈价谈崩之后，加上刚刚过去，印象比较深刻，有必要先行记录一下。</p><h2 id="购买新房的好处"><a href="#购买新房的好处" class="headerlink" title="购买新房的好处"></a>购买新房的好处</h2><p>众所周知，由于zf限价，新楼盘一般售价是低于周边二手房的，因为二手房需要支付约2%的中介费、个税(与是否满五唯一相关)、增值税(<strong>5.37%</strong>)和契税(新房也需要)，大部分的房子加起来也要9%，即使是满五唯一的房子，也会被卖家作为一个卖点体现在了售价之中，<strong>毕竟羊毛出在羊身上</strong>。</p><p>而新房就没这么多杂七杂八的费用，现在由于限价，售价比起周边二手，有不小的优势。因为zf可以限制开发商定价，不让他们拿预售证，但是无法跟老百姓们说，你们卖贵了，降价吧。</p><p>除了这些费用，新房最大的好处是房子是全新的，没有他人使用过，也不用担心之前里面出过什么事情，一般买二手房都需要去小区里打听打听需要购买的房子里面出了什么事情没有、咨询房东的出售房子的动机(回答不一定真实)。</p><p>这一批开盘的房子，很多都是被捂盘了两年的，如果是精装交付的房子，装修一般是已经装修好了，没法降低装修标准，在zf限价的大环境下显得尤为值当。无法保证，后面如果继续限价，开发商在装修时候不降准，达到一期同样的水准。</p><p>新房由开发商统一定价，都有一房一价表，不需要(也不可能)遇到二手房时和房东谈价的过程，这个过程真的<strong>超累</strong>！这也是最终促使我购买新房的原因。</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1ftbywzz6waj31kw16o7wh.jpg" alt=""></p><blockquote><p>我购买楼盘的一房一价表</p></blockquote><h2 id="新房的坏处"><a href="#新房的坏处" class="headerlink" title="新房的坏处"></a>新房的坏处</h2><p>新房也有坏处，即新房一般是期房，二手房一般三四个月的流程走完后，就可以交房了，而新房一般需要等待两年左右(被捂成准现房的大约1年甚至更短)。</p><p>有些新房的学区是暂时没有确定的，存在一定的不确定因素。</p><h1 id="新房购买流程"><a href="#新房购买流程" class="headerlink" title="新房购买流程"></a>新房购买流程</h1><p>在上海购买新房一般需要经历<em>认筹、验资、交认筹金、摇号、选房、付首付、办理贷款、网签等后续过程</em>。</p><h2 id="认筹与验资"><a href="#认筹与验资" class="headerlink" title="认筹与验资"></a>认筹与验资</h2><p>认筹与验资其实是一个过程，新楼盘拿到zf开盘许可证后，一般有一周左右的时间让客户认筹。认筹是需要验资的，验资一方面是验证购房者有购房资格，另一方面是验证购房者能够拿出足够的首付款和资金来购买此楼盘的房子。</p><p>拥有购房资格据我所知一般有两种途径，一种是已经落户了的，这种最好办，带个人户口卡或户籍证明原件及复印件到现场即可;另一种是<strong>已婚</strong>并连续缴纳五年以上的社保的，相比之下第二种更为麻烦，所带的材料大约有结婚证、社保缴纳证明和夫妻双方身份证原件和复印件。(我比较幸运，从复旦毕业后，幸运地落了户。所以走的第一条，<strong>第二条所需材料可能不全</strong>)</p><p>检验资产这部分是根据楼盘售价定的，主要是确保你有此楼盘售价最便宜房屋的资金的首付(首套不低于35%/二套不低于70%)。比如我看的楼盘，房屋售价从400-700w，那么就需要有银行开具的200w存款证明(首套)，并且需要冻结认筹金50w。又比如昨天新开的<strong>前滩晶耀</strong>，由于地段好，售价大多在1000w以上，需要验资410w(<em>二套820w</em>)，冻结认筹金<strong>234</strong>万。</p><p>由于新房的性价比不同，认筹比差别非常大，有些楼盘认筹比大约是<strong>1000%</strong>，被笑称为彩票盘;有些性价比低的楼盘认筹比仅有<strong>1.5%</strong>。一句话，群众的眼睛是雪亮的，认筹比越高的楼盘通常意味着性价比越高。</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ftbzm120m4j30m80go76r.jpg" alt=""></p><blockquote><p>博主所购楼盘认筹现场</p></blockquote><h2 id="摇号"><a href="#摇号" class="headerlink" title="摇号"></a>摇号</h2><p>摇号是由公证处完成并公布的，有没有猫腻我不知道，但大抵是公平的。虽然有人说，凡是有阳光照到的地方都有阴影。但作为毫无背景的人来说，也只能是听天由命了。我一个好朋友，在杭州3000多人认筹的楼盘里摇号结果为第一名。这件事也从一个侧面说明了，运气还是很重要的。当然我平时<strong>好事做的比较多</strong>，运气也很好，1700认筹里排在了320+，还算是比较靠前的。</p><h2 id="选房"><a href="#选房" class="headerlink" title="选房"></a>选房</h2><p>选房之前，是需要好好研究上文提到的一房一价表的，需要将在预算内的房子，综合考虑性价比和想要的程度，列一个从前往后的list。很幸运，我所列的list第一个房间就被我选到啦，12楼的东边套，因此我仅用了<strong>5秒钟</strong>就完成了这一步骤。</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1ftc00326z4j31400u0q5h.jpg" alt=""></p><blockquote><p>我们的选房攻略</p></blockquote><p>上面的步骤还是很重要的，因为不是每个人都可以如我一般幸运。如果号够靠前，很容易在里面纠结很久，看到后面进来的人选了房子，很难不着急。特别是在想要的楼栋号和楼层之间怎么选，1楼、2楼和顶楼、次顶楼怎么选，在你纠结的时候，你发现旁边人把你的候选项选走了，选择空间越来越小。当然，号码比较靠后也不全是坏处，选择空间不大了，倒也不至于那么纠结，因为凡事都有两面性。</p><p>多说两句，选房现场和外场不是同一个地方，大约1分钟放10个人进去，这10个人是不分先后选房顺序的，如果1分钟后，你没有选房，又会进来10个人跟你一起选，同样，没有先后顺序。外场跟传销现场差不多，一旦里面有客户选房成功，喇叭里就会喊:”恭喜客户选房成功！” 在外面的人变得更紧张了。真正轮到你之后，会有人带领你<strong>冲</strong>选房内场，并以极快的语速向你喊：“要几号楼几楼，快！快！快！”那语气感觉跟抢劫没啥两样，如果你没有提前做好攻略，很容易进退维谷。</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ftc09s78qnj31kw0ehtqs.jpg" alt=""></p><blockquote><p>内场选房现场，几乎全部售出</p></blockquote><p>选好之后，工作人员会将印有该房间的信息和售价贴到你的选房卡上，这时候就不能反悔了，认筹金就自动变为了<strong>定金</strong>。</p><h2 id="付首付等后续环节"><a href="#付首付等后续环节" class="headerlink" title="付首付等后续环节"></a>付首付等后续环节</h2><p>我刚刚进行到这一环节，知道的也比较少。一般选完房之后，开发商会给约一周的时间给你筹款。这里<strong>郑重申明</strong>一下:由于上海房价较高，因此即使是首套，首付款也不可能只有35%,因为通常工薪阶层的人贷不到那65%。当然，如果你收入高或者有自己的产业、公司，提供流水，最低最低也要准备房价的35%。<em>我发现很多人将首付款误解为了房价的35%，其实除了贷款外的所有钱，都是需要你一次性给清的。</em></p><p>一句话:</p><blockquote><p>首付款 = 房价 - 你能贷款到的钱</p></blockquote><p>贷款的话，就在<strong>售楼现场</strong>咨询各家银行贷款的信息，选一家贷款最多的吧，一般建设银行和中国银行是比较好的。为什么一定要在售楼现场，因为如果不是开发商合作的银行，将会非常麻烦，要走的流程很复杂，所以不推荐。</p><p>后续的等走完全部流程，在下一篇博客中写。</p><h1 id="一点小建议"><a href="#一点小建议" class="headerlink" title="一点小建议"></a>一点小建议</h1><p>由于我现在已经购入了房子，因此说话难免有失公允，但我仍觉得当下对于上海是一个好的购房时机。原因如下：</p><ol><li>在上海已经限制一般公司购房的大背景下，博主所购的楼盘依然一日卖光，说明了上海不缺买房的资金，也不缺买房的人，缺的是高性价比的产品，像上海现在这样的低谷期，遇到合适的就上。</li><li>zf调控楼市，对购房者有利，从容进场，比恐慌性地进场更能选到自己喜欢的房子。</li><li>由于房企资金链压力，房企不得不接受zf的低价入市，精装房子没有降低标准，性价比比后续的要高。</li><li><strong>在城市里拥有一本印有自己名字的房产证，其意义是何等重要，无法用文字来表达，不仅是代表了从此之后有了安身立命之处，也是从无产转变到有产的标志，人生地位从此跨出新舞台。</strong>(引自房产孟老师的微博)</li></ol><p>用梁老师的微博结束正文部分，共勉吧。最后祝大家都能买到自己<strong>称心如意</strong>的房子!</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1ftc0sjm2cjj30u01sz0wb.jpg" alt=""></p><blockquote><p>梁老师的微博</p></blockquote><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p>感谢<strong>父母</strong>，他们每天辛勤劳作、省吃俭用为我准备了首付款;</p><p>感谢大家庭里的亲人们，在我困难的时候提供了周转资金，让我<strong>倍感温暖</strong>;</p><p>感谢之前带我看二手房的中介L总，他跟我年纪相仿，教会了我很多房产的知识。都是在这个大城市奋斗的年轻人，最后没能经他手买到房子，感到有些抱歉;也要感谢龙湖的销售LQQ，这次相处时间并不长，但是给我的建议非常中肯和有用；</p><p>last but not least, <strong> My soul-mate xiaoli，Thank you very much indeed! </strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;为什么要写这篇博客&quot;&gt;&lt;a href=&quot;#为什么要写这篇博客&quot; class=&quot;headerlink&quot; title=&quot;为什么要写这篇博客&quot;&gt;&lt;/a&gt;为什么要写这篇博客&lt;/h1&gt;&lt;p&gt;近期终于在魔都&lt;strong&gt;上海&lt;/strong&gt;买到了一个属于自己的三房，在一线
      
    
    </summary>
    
      <category term="购房" scheme="http://zhihaozhang.github.io/categories/%E8%B4%AD%E6%88%BF/"/>
    
    
      <category term="随感" scheme="http://zhihaozhang.github.io/tags/%E9%9A%8F%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>Match for iPhone开发笔记 &lt;一&gt; 开篇杂谈</title>
    <link href="http://zhihaozhang.github.io/2018/07/11/Match/"/>
    <id>http://zhihaozhang.github.io/2018/07/11/Match/</id>
    <published>2018-07-11T02:30:17.303Z</published>
    <updated>2018-07-23T09:49:28.047Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开发Match的初衷"><a href="#开发Match的初衷" class="headerlink" title="开发Match的初衷"></a>开发Match的初衷</h1><p>大约一个月前的某天，一个很久未曾联系的同学突然给我发微信，问我有没有时间帮他做一个iOS App。此人从小学开始就与我是同学，一直是传说中的别人家的孩子，中考、高考都是全市第二名，后进入了南京大学数学系读本科，然后去了复旦读研，跟我又成了校友…</p><p>跟他见面后，他给我讲起了故事，在大学，有一棵树，叫高树，很多人挂在了上面多年，甚至无法毕业。因此，他想做一款叫做Match的产品，来帮助高数方面有困难的同学…</p><h2 id="Match代表什么"><a href="#Match代表什么" class="headerlink" title="Match代表什么"></a>Match代表什么</h2><p>Match，里面包含了MATH(数学)这个单词，而且有匹配的意思，寓意与答题系统中的求助者寻求匹配的答题者吻合。</p><h2 id="我接手Match前"><a href="#我接手Match前" class="headerlink" title="我接手Match前"></a>我接手Match前</h2><p>在找到我之前，他一直看我在朋友圈分享我的技术博客和开发心得，除去编程思想和随感，大多是跟苹果Mac开发和Swift开发相关的，因此他觉得我可以胜任这个工作。回头看，这也可以作为写技术博客的好处之一了吧。</p><h2 id="从拒绝到接受"><a href="#从拒绝到接受" class="headerlink" title="从拒绝到接受"></a>从拒绝到接受</h2><p>一开始，我内心是拒绝的，因为坦率的讲，自2015年后，我就再也没进行过iOS的完整应用开发，甚至连网络请求都用不6了，我不得不利用下班和周末时间重拾iOS开发的细节，并在一个极短的时间内完成整个应用的开发工作，并使其尽可能美观，以达到Apple store严格的上架要求。同事，网上充斥着例如：现在重拾iOS跟1948年加入国军没啥区别、iOS开发已经没人要了之类世俗的看法，虽然我并不认同这种看法，但不可否认，<strong>移动开发的红利期过去了。</strong></p><p>但他的真诚打动了我，<strong>这真不是一句客套话</strong>，在我了解到他作为一个非科班出身的程序猿，独自完成了Match平台的<strong>前端、后端和Android端</strong>初步开发，还是挺让我感动的，加上我本身喜欢苹果的iDev和swift开发，另外我希望用我的技能，让这个世界变得美好哪怕一点点，因此我当时下我就爽快地答应了他的请求。现在回想起来，还挺佩服我当时的勇气的，因为在做这个iOS APP的过程中，我真的遇到了很多问题，熬了好几夜，终于一一克服。或许，就像电影无问西东电影里的独白说的那样:</p><blockquote><p>“如果提前了解了你所面对的人生，你是否还有勇气前来？”   ——《无问西东》</p></blockquote><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1531287863629&amp;di=b921ee9503b175737d5011be0831eab3&amp;imgtype=0&amp;src=http%3A%2F%2Fpic.spider.com.cn%2Fpic%2Fbookpic%2F201801%2F1516515254495080008.jpg" alt=""></p><p>我现在也在反问自己这个问题，如果知道有这么多坑，是不是还会那么爽快的答应下来。</p><h1 id="Match-for-iPhone的界面"><a href="#Match-for-iPhone的界面" class="headerlink" title="Match for iPhone的界面"></a>Match for iPhone的界面</h1><p>作为一个完整应用的开发，肯定是无法在一篇博客中写完的，需要<em>一系列</em>文章来将实现的逻辑给<strong>理顺</strong>。本文作为系列文章的开篇之作，暂且不涉及技术细节，而是介绍这款应用的界面和使用，在实现过程中遇到的坑放到后面的博客中写出来与大家分享。</p><h2 id="从StoryBoard看整个应用"><a href="#从StoryBoard看整个应用" class="headerlink" title="从StoryBoard看整个应用"></a>从StoryBoard看整个应用</h2><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1ft5pr6ddzxj31k41hggo8.jpg" alt=""></p><blockquote><p>Match的StoryBoard原型</p></blockquote><p>从StoryBoard来看，大约有15个场景，其实由于我的优化，已经将不少可以重复使用的场景进行了合并，达到了复用的目的。</p><p>麻雀虽小，五脏俱全，这些场景覆盖了包括登陆页、导航页、问题列表页、问题与回复页、提问题页、写回复页、个人主页、规则说明页、申请提现页和图片预览页等页面，基本上实现了这个平台所需要的所有场景。</p><h2 id="真实的界面截图"><a href="#真实的界面截图" class="headerlink" title="真实的界面截图"></a>真实的界面截图</h2><p>真实的界面响应了iOS 11的号召，采用推荐的大标题风格。</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1ft5qztdcb1j30v91vodhz.jpg" alt=""></p><blockquote><p>模仿Apple store的卡片式问题列表页，增加了下拉刷新和上拉加载更多</p></blockquote><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1ft5rdz2e8fg307s0dwqv6.gif" alt=""></p><blockquote><p>从Github上“学来”的萌萌哒登录页</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1ft5r0w55sdj30v91voq4t.jpg" alt=""></p><blockquote><p>模仿知乎的多Section TableView问题与回复页</p></blockquote><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1ft5r2bwbxkj30v91vojsl.jpg" alt=""></p><blockquote><p>坑点巨多的富文本提问和回复页</p></blockquote><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1ft5r4jilvcj30v91voabt.jpg" alt=""></p><blockquote><p>设计风格良好的交互框</p></blockquote><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1ft5r53oz15j30v91vowgp.jpg" alt=""></p><blockquote><p>中规中矩的个人主页</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1ft5r5zmt7kj30v91vowgu.jpg" alt=""></p><blockquote><p>诱人的答题收入页</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1ft5r75c2vsj30v91vodx7.jpg" alt=""></p><blockquote><p>APP icon 页面，图标由“别人家的孩子”提供</p></blockquote><p>限于篇幅原因，这里只列出了一小部分应用截图。</p><h2 id="系统要求-amp-支持的手机"><a href="#系统要求-amp-支持的手机" class="headerlink" title="系统要求&amp;支持的手机"></a>系统要求&amp;支持的手机</h2><p>系统要求支持iOS 11.0以上，支持的机型包括iPhone 5s、6/7/8 <em>(plus)</em>和 <em>iPhone X</em>。</p><p>最后也欢迎大家支持一下Match的<strong>安卓</strong>版，在各大安卓商店有售。</p><p>从下一篇开始，我将会把在开发这款应用中遇到的困难和解决方案列出来，作一个总结。</p><p>最后学一下电影无问西东，首尾呼应，也当是扪心自问一下：</p><blockquote><p>“如果提前了解了你所面对的人生，你是否还有勇气前来？”</p></blockquote><p>电影《无问西东》描述了四段故事，主人公经历着背叛与毁灭，品尝着分别与想念，也都在最后选择了坚持与盛放。其实到现在也不是很理解这部电影的精神和情怀，但我知道我<strong>肯定是没有</strong>。</p><p>只能列出张果果最后的独白,分享给大家:</p><blockquote><p>看到和听到的，经常会令你们沮丧，世俗是这样强大，强大到生不出改变它们的念头来。可是如果有机会提前了解了你们的人生，知道青春也不过只有这些日子，不知你们是否还会在意那些世俗希望你们在意的事情。愿你在被打击时，记起你的珍贵，抵抗恶意；愿你在迷茫时，坚信你的珍贵，爱你所爱，行你所行，听从你心。</p></blockquote><p><img src="http://t12.baidu.com/it/u=3594607433,4071731292&amp;fm=173&amp;s=B628E1A7579A03D8D1CCEC2F0300A042&amp;w=600&amp;h=375&amp;img.JPEG" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;开发Match的初衷&quot;&gt;&lt;a href=&quot;#开发Match的初衷&quot; class=&quot;headerlink&quot; title=&quot;开发Match的初衷&quot;&gt;&lt;/a&gt;开发Match的初衷&lt;/h1&gt;&lt;p&gt;大约一个月前的某天，一个很久未曾联系的同学突然给我发微信，问我有没有时间帮他
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="http://zhihaozhang.github.io/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>绕开迅雷的利器:thunderPassby开发笔记</title>
    <link href="http://zhihaozhang.github.io/2018/06/01/thunderPassby/"/>
    <id>http://zhihaozhang.github.io/2018/06/01/thunderPassby/</id>
    <published>2018-06-01T11:47:53.000Z</published>
    <updated>2018-06-02T06:47:49.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="thunder-Bypass-for-macOS-开发初衷"><a href="#thunder-Bypass-for-macOS-开发初衷" class="headerlink" title="thunder-Bypass for macOS 开发初衷"></a>thunder-Bypass for macOS 开发初衷</h1><p>前天无意中看到了<a href="http://free.apprcn.com/get-thunder-real-url/" target="_blank" rel="external">Thunder Real Url</a>的限免信息，觉得这款软件有点意思，而且对于我这种<strong>非迅雷vip</strong>来说好像挺有用。不过点进去后发现是windows的客户端，于是我就萌生了做一个<strong><em>功能类似</em></strong>，但<strong><em>体验更好</em></strong>的macOS客户端。</p><h1 id="软件开源-下载链接"><a href="#软件开源-下载链接" class="headerlink" title="软件开源/下载链接"></a>软件开源/下载链接</h1><p><a href="https://github.com/zhihaozhang/thunder-Bypass" target="_blank" rel="external">开源地址</a></p><p>想下载直接使用的朋友请移步：<br><a href="https://github-production-release-asset-2e65be.s3.amazonaws.com/135258364/f2905dee-65e5-11e8-91ee-5cd6458b500a?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20180602%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20180602T064722Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=21abfd513fa7ec1908a4958e5c0cec59f647cb8061cbbc6d2274782cd0de07e5&amp;X-Amz-SignedHeaders=host&amp;actor_id=4500659&amp;response-content-disposition=attachment%3B%20filename%3DthunderPassby.app.zip&amp;response-content-type=application%2Foctet-stream" target="_blank" rel="external">下载地址</a></p><h1 id="软件用途"><a href="#软件用途" class="headerlink" title="软件用途"></a>软件用途</h1><h2 id="icon-gt-软件用途"><a href="#icon-gt-软件用途" class="headerlink" title="icon -&gt; 软件用途"></a>icon -&gt; 软件用途</h2><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1frtjl9v4kjj308y06mt90.jpg" alt=""></p><blockquote><p>icon和迅雷icon对比</p></blockquote><p>icon很有趣，是围绕着迅雷的图标展开的。迅雷的图标是一只鸟，thunder-Bypass旨在<strong>绕开(Bypass)*</strong>迅雷(thunder)<em>，因此，我用迅雷icon那只鸟飞出鸟笼的瞬间作为图标，<em>*寓意着突破迅雷的禁锢</em></em>。</p><p>希望icon很好的诠释了软件的用途:</p><blockquote><p>破解并获得以thunder:// 开头的迅雷下载地址背后的真实下载地址，自动复制到您的剪切板，您可以用非迅雷的第三方下载软件另行下载。 <em>Get the real dwnload url from encrypted thunder url which starts with thunder://</em></p></blockquote><h2 id="为什么要突破迅雷的限制"><a href="#为什么要突破迅雷的限制" class="headerlink" title="为什么要突破迅雷的限制"></a>为什么要突破迅雷的限制</h2><p>你们也知道，迅雷非vip的下载速度越来越慢了，通过本软件获取真实的磁力链接，然后复制到良心的第三方下载软件，下载速度可以非常快。关于第三方下载软件的推荐，可以参考知乎上的帖子:<a href="https://www.zhihu.com/question/24471469/answer/28122044" target="_blank" rel="external">除了迅雷，还有什么其他下载软件 ？</a></p><h2 id="磁力链接是什么"><a href="#磁力链接是什么" class="headerlink" title="磁力链接是什么"></a>磁力链接是什么</h2><p>【1】简单地说，磁力链接是一种特殊链接，但是它与传统基于文件的位置或名称的普通链接不一样，它只是通过不同文件内容的Hash结果生成一个纯文本的“数字指纹”，并用它来识别文件。它类似于生活消费品包装上常见的条码，不同的是这个“数字指纹”可以被任何人从任何文件上生成，这也就注定了“磁力链接”不需要任何“中心机构”的支持（例如：BT Tracker服务器），且识别准确度极高。因此任何人都可以生成一个Magnet链接并确保通过该链接下载的文件准确无误。更简单地说：类似【magnet:?xt=urn:sha1:YNCKHTQCWBTRNJIV4WNAE52SJUQCZO5C】这样以“magnet:?”开头的字符串，就是一条“磁力链接”，其在网页上的图标像一块磁铁，很容易辨别。</p><h1 id="软件使用方法"><a href="#软件使用方法" class="headerlink" title="软件使用方法"></a>软件使用方法</h1><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1frvhpcuu58j30qo0ia406.jpg" alt=""></p><blockquote><p>链接是百度里搜的，貌似有福利哟~</p></blockquote><p>主界面很清爽，上面的textField是提供给用户输入需要破解的迅雷下载地址的。<strong>注意该url前后不要有空格、回车等特殊字符，否则可能造成无法解码。</strong></p><p>点击中间的解锁按钮后，如果解码成功，下面的textField会显示解码后的磁力链接，并<strong>自动</strong>复制到您的剪切板，通知中心会发送通知。</p><p>当然，无论解码成功与否，通知中心均会有相应提示。</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1frvhqibpksj30is0gijtb.jpg" alt=""></p><h1 id="破解机制"><a href="#破解机制" class="headerlink" title="破解机制"></a>破解机制</h1><p>破解机制是在网上找的，<a href="https://www.douban.com/note/624978147/" target="_blank" rel="external">参考2</a>，其实就是去掉thunder://后，用base64解密，解密后的url在前面加了AA，在最后加了ZZ。</p><p>核心代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">decryptButtonClicked</span><span class="params">(<span class="number">_</span> sender: Any)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> thunderURL = thunderURLFiled.stringValue</div><div class="line">        <span class="keyword">if</span> thunderURL.hasPrefix(<span class="string">"thunder://"</span>) &#123;</div><div class="line">            <span class="keyword">let</span> encryptedURL = thunderURL.substring(from: thunderURL.index(thunderURL.startIndex,offsetBy :<span class="number">10</span>))</div><div class="line">            </div><div class="line">            </div><div class="line">            <span class="keyword">let</span> decryptedURL0 = <span class="type">Base64FS</span>.decodeString(str: encryptedURL)</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> decryptedURL0.<span class="built_in">count</span> &gt; <span class="number">0</span>&#123;</div><div class="line">                </div><div class="line">                <span class="keyword">let</span> decryptedURL1 = decryptedURL0.substring(from: decryptedURL0.index(decryptedURL0.startIndex,offsetBy :<span class="number">2</span>))</div><div class="line">            </div><div class="line">                <span class="keyword">let</span> decryptedURL2 = decryptedURL1.substring(to: decryptedURL1.index(decryptedURL1.endIndex,offsetBy :-<span class="number">2</span>))</div><div class="line">                </div><div class="line">                decryptedURL.stringValue = decryptedURL2</div><div class="line">                </div><div class="line">                <span class="comment">// copy decrypted URL automaticly for users</span></div><div class="line">                <span class="keyword">let</span> pasteboard = <span class="type">NSPasteboard</span>.general</div><div class="line">                pasteboard.declareTypes([<span class="type">NSPasteboard</span>.<span class="type">PasteboardType</span>.string], owner: <span class="literal">nil</span>)</div><div class="line">                pasteboard.setString(decryptedURL2, forType: <span class="type">NSPasteboard</span>.<span class="type">PasteboardType</span>.string)</div><div class="line">                </div><div class="line">                <span class="keyword">let</span> userNotification = <span class="type">NSUserNotification</span>()</div><div class="line">                userNotification.title = <span class="string">"Message"</span></div><div class="line">                userNotification.subtitle = <span class="string">"恭喜成功破解迅雷下载地址"</span></div><div class="line">                userNotification.informativeText = <span class="string">"提示:地址已帮您复制到剪切板"</span></div><div class="line">                <span class="comment">// 使用NSUserNotificationCenter发送NSUserNotification</span></div><div class="line">                <span class="keyword">let</span> userNotificationCenter = <span class="type">NSUserNotificationCenter</span>.<span class="keyword">default</span></div><div class="line">               </div><div class="line">               </div><div class="line">                userNotificationCenter.delegate = <span class="keyword">self</span></div><div class="line">                </div><div class="line">                userNotificationCenter.scheduleNotification(userNotification)</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">let</span> userNotification = <span class="type">NSUserNotification</span>()</div><div class="line">                userNotification.title = <span class="string">"Message"</span></div><div class="line">                userNotification.subtitle = <span class="string">"解码失败"</span></div><div class="line">                userNotification.informativeText = <span class="string">"请输入正确的迅雷下载地址"</span></div><div class="line">                <span class="comment">// 使用NSUserNotificationCenter发送NSUserNotification</span></div><div class="line">                <span class="keyword">let</span> userNotificationCenter = <span class="type">NSUserNotificationCenter</span>.<span class="keyword">default</span></div><div class="line">                </div><div class="line">                </div><div class="line">                userNotificationCenter.delegate = <span class="keyword">self</span></div><div class="line">                </div><div class="line">                userNotificationCenter.scheduleNotification(userNotification)</div><div class="line">                </div><div class="line">                thunderURLFiled.stringValue = <span class="string">""</span></div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125; <span class="keyword">else</span>&#123;</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> alert = <span class="type">NSAlert</span>()</div><div class="line">            alert.addButton(withTitle: <span class="string">"OK"</span>)</div><div class="line">            </div><div class="line">            alert.messageText = <span class="string">"Alert"</span></div><div class="line">            </div><div class="line">            alert.informativeText = <span class="string">"please input correct thunder download url which hasPrefix thunder://"</span></div><div class="line">            </div><div class="line">            alert.alertStyle = .informational</div><div class="line">        </div><div class="line">            alert.beginSheetModal(<span class="keyword">for</span>: <span class="keyword">self</span>.view.window!, completionHandler: <span class="literal">nil</span>)</div><div class="line">            </div><div class="line">            thunderURLFiled.stringValue = <span class="string">""</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>主要的坑点是有些链接是以thunder://开头的，但是并不能被正确的解码，并引起了程序的崩溃，必须对解码的过程加入错误判断。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>开发完成后，有网友留言说网上有很多在线的，这点我确认过了，确实有。如果提早知道有，我想我还是会做它。因为不管这事看起来有多么简单、无意义，你没有探索过，就无法体会到其中探索的乐趣。另外，这件事或许只是对于开发者来说相对简单，普通用户想理解base64就比较困难，更别说实现它了，他们更想要一个GUI的界面，给输入，得到想要的输出，实现的过程他们不想关心。</p><p>也有人留言说迅雷加密的方式有很多，这个我试了10多条下载链接，暂时没有发现不符合上面提到的加密方式的，欢迎网友提供反例帮我完善解密机制。</p><p>最后用蔡学镛老师的一段话结束本文，大家共勉:</p><blockquote><p>建立一个自己的项目，很重要。它不属于公司或其他人，是你独自拥有的一种精神寄托。它有一部分研究性质，有一部分实验性质，如果还有应用潜力甚至商业潜力就更好了。这样项目的存在，会让你专注思考和动手，会激发你精益求精的态度。你不会在意别人是否理解你在干什么，因为你的自信爆棚。 ​​​  ——蔡学镛</p></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>1.<a href="https://www.zhihu.com/question/36151980/answer/66732525" target="_blank" rel="external">知乎：郭无心的回答</a><br>2.<a href="https://www.douban.com/note/624978147/" target="_blank" rel="external">豆瓣</a><br>3.<a href="https://github.com/jdjack/Swift-URL-Safe-Base64" target="_blank" rel="external">Github:Base64FS</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;thunder-Bypass-for-macOS-开发初衷&quot;&gt;&lt;a href=&quot;#thunder-Bypass-for-macOS-开发初衷&quot; class=&quot;headerlink&quot; title=&quot;thunder-Bypass for macOS 开发初衷&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="macOS开发" scheme="http://zhihaozhang.github.io/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>面向协议编程初探</title>
    <link href="http://zhihaozhang.github.io/2018/05/20/ProtocolOP/"/>
    <id>http://zhihaozhang.github.io/2018/05/20/ProtocolOP/</id>
    <published>2018-05-20T09:06:16.024Z</published>
    <updated>2018-07-30T06:27:13.291Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从编程范式讲起"><a href="#从编程范式讲起" class="headerlink" title="从编程范式讲起"></a>从编程范式讲起</h1><p>或许你经常听到诸如面向对象编程、面向过程编程、面向协议编程、函数式编程这些词，心中也不免疑惑，这些词都是些啥？</p><h2 id="编程范式-on-wiki"><a href="#编程范式-on-wiki" class="headerlink" title="编程范式 on wiki"></a>编程范式 on wiki</h2><p>相比于本文要介绍的面向协议编程，面向对象编程的名声似乎更响。面向对象由于<em>C++</em>和<em>java</em>的流行，成为近二十年来最为流行的<strong><a href="https://zh.wikipedia.org/wiki/编程范型" target="_blank" rel="external">编程范式</a></strong>。其他编程范式还有比面向对象更早的<strong>面向过程编程</strong>、<strong>指令编程</strong>，以及以<em>Haskell</em>为代表的<em>*函数式</em>编程和苹果提出的<em>面向协议</em>编程。</p><p>编程范式是一类典型的<strong>编程风格</strong>，是指从事软件工程的一类典型的风格（可以对照方法学）。编程范型提供了（同时决定了）程序员对程序执行的看法。             ——wiki</p><h2 id="我理解的编程范式"><a href="#我理解的编程范式" class="headerlink" title="我理解的编程范式"></a>我理解的编程范式</h2><p>说说我的理解，我认为编程范式<strong>反应了某种编程语言的设计者希望程序员在使用他设计的语言时，用什么样的方式去思考问题。</strong>因此不同的编程范式各有自身的长处，也难免有不足之处，在应对各种问题的时候，某种编程范式可能会更适合一些，选择得当，程序员的工作量会减少很多。</p><p>一种语言，可能支持多种编程范式，例如Swift，既支持面向协议编程，又支持面向对象编程、面向协议编程和函数式编程。只是在解决不同任务时，某些范式更合适。</p><h3 id="Swift-amp-面向对象编程"><a href="#Swift-amp-面向对象编程" class="headerlink" title="Swift &amp; 面向对象编程"></a>Swift &amp; 面向对象编程</h3><p>举个例子，由于历史原因，在开发Cocoa和cocoa touch程序时，还是广泛使用了UIkit、Foundation框架和控制器视图(ViewController)，他们使用的是OC时代的面向对象编程的方式，从<strong>继承</strong>的角度去考虑问题的。</p><p><img src="http://img.my.csdn.net/uploads/201210/18/1350528267_1570.jpg" alt=""></p><blockquote><p>UIkit框架类组织架构图</p></blockquote><h3 id="Swift-amp-面向过程编程"><a href="#Swift-amp-面向过程编程" class="headerlink" title="Swift &amp; 面向过程编程"></a>Swift &amp; 面向过程编程</h3><p>在解决<strong>动画</strong>、<strong>渲染</strong>、<strong>数据可视化</strong>等问题时，还是以古老的面向过程式的思维方式进行编程。因为在画图时，先绘制的东西会被后绘制的东西盖住，形成<strong>层(Layer)</strong>的概念。如果不能保证代码是同步一条条执行，那很可能每次渲染出来的图形是不同的。</p><h3 id="Swift-amp-函数式编程"><a href="#Swift-amp-函数式编程" class="headerlink" title="Swift &amp; 函数式编程"></a>Swift &amp; 函数式编程</h3><p><a href="https://objccn.io/products/functional-swift/" target="_blank" rel="external">函数式编程</a>本身是一个很大的课题，精髓是避免使用程序状态和可变对象，从而降低程序复杂度。函数式编程强调执行的结果，而非执行的过程。我们先构建一系列简单却具有一定功能的小函数，然后再将这些函数进行组装以实现完整的逻辑和复杂的运算，这是函数式编程的基本思想。</p><p>Swift在函数式编程方面表现虽不如Haskell来的纯粹，但是作为一个比Haskell流行的多的语言，和很多已有的函数式编程语言，Swift在语法上更加优雅灵活，语言本身也遵循了函数式的设计模式，是大部分程序员接触函数式编程的第一门语言。以后有机会单独介绍一下函数式编程，有兴趣的读者也可以先看chase Zhang的这篇<a href="https://io-meter.com/2017/05/29/A-Brief-Intro-to-Functional-Programming/" target="_blank" rel="external">blog</a>。</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1frhyb0vzaaj30q80er0t2.jpg" alt=""></p><h1 id="面向协议编程出现的历史"><a href="#面向协议编程出现的历史" class="headerlink" title="面向协议编程出现的历史"></a>面向协议编程出现的历史</h1><p>回到今天的主角，面向协议编程。面向协议编程是由面向对象编程演变来的，协议在诸如c++和java等面向对象的语言中有一个别名，<strong>接口</strong>。(别骂街、别关网页，好戏在后头)</p><h2 id="面向对象编程的好处"><a href="#面向对象编程的好处" class="headerlink" title="面向对象编程的好处"></a>面向对象编程的好处</h2><p>面向对象编程这些年能够风光无限，主要是由于它有的很多优点，例如：</p><ol><li>数据封装</li><li>访问控制</li><li>类型抽象为类</li><li>继承关系，更符合人类思维</li><li>代码以逻辑关系组织到一起，方便阅读</li><li>由于继承、多态的特性，自然设计出高内聚、低耦合的系统结构，使得系统更灵活、更容易扩展，而且成本较低</li><li>在设计时，可重用现有的，在以前的项目的领域中已被测试过的类使系统满足业务需求并具有较高的质量</li></ol><p>这么多优点，不可能一下全抛弃，所以也注定了面向协议编程不是一种革命性的编程范式，而是对面向对象编程的改良和演变。</p><h2 id="Who-is-Crusty-at-Apple"><a href="#Who-is-Crusty-at-Apple" class="headerlink" title="Who is Crusty at Apple"></a>Who is Crusty at Apple</h2><p>长久以来，大家似乎默认了面向对象编程的好处都是由class带来的，但在苹果公司内部，有个叫Crusty的老兄<strong>think different</strong>了，他认为这一切是抽象类型带来的，而不是class带来的。我们知道，在面向对象编程中，接口和类都是对数据类型的抽取，类只是抽象类型众多实现的手段之一。在很多编程语言中，Struct和枚举同样可以做到对数据类型的抽取。</p><blockquote><p>It’s Type, not Classes.                           ————Crusty</p></blockquote><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1frhz1ha9i8j30jg0d6dg6.jpg" alt=""></p><p>Crusty认为，较好的抽象类型应该：</p><ol><li>更多地支持值类型，同时也支持引用类型</li><li>更多地支持静态类型关联（编译期），同时也支持动态派发（runtime）</li><li>结构不庞大不复杂</li><li>模型可扩展</li><li>不给模型强制添加数据</li><li>不给模型增加初始化任务的负担</li><li>清楚哪些方法该实现哪些方法不需实现</li></ol><p>经过改良的接口，达到了上面的要求，并改名为协议。至此，苹果决定将面向对象中的继承父类发展为服从协议，面向协议编程出现了。</p><h1 id="面向协议编程的好处"><a href="#面向协议编程的好处" class="headerlink" title="面向协议编程的好处"></a>面向协议编程的好处</h1><p>前面提到了，经过Apple改良的接口达到了上节提出的较好抽象类型的目标。Swift的面向协议编程相比于OC的面向对象编程的好处主要体现在两点：1.<strong>动态派发的安全性</strong>、2.<strong>横切关注点</strong>。</p><h2 id="动态派发的安全性"><a href="#动态派发的安全性" class="headerlink" title="动态派发的安全性"></a>动态派发的安全性</h2><p>OC有强大的Runtime，在OC中，message与方法是在执行阶段绑定的，而不是编译阶段。简单的说 [a someFunc] 这样一个调用，在编译阶段，编译器并不知道someFunc要执行哪段代码。这个时候[a someFunc]会被转换为 objc_msgSend(a, “someFunc”)，字面的意思也很容易理解，就是给a这个instance，发“someFunc”这个消息，以selector的形式。在运行阶段，执行到上述的objc_msgSend这个函数时。函数内部会到a对应的内存地址，寻找someFunc这个方法的地址，并执行。如果找不到，就会抛一个“unknown selector sent to instance”的异常。（比如.h中声明了方法，但.m中没有实现，就可以重现这个错误）</p><p>下面举的例子来自于喵神在MDCC 16上的演讲<a href="https://blog.csdn.net/it_zhaoxiaowei/article/details/53436851" target="_blank" rel="external">《面向协议编程与 Cocoa 的邂逅》</a>中的ppt：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="type">ViewController</span> *v1 = ...</div><div class="line">[v1 myMethod];</div><div class="line"><span class="type">AnotherViewController</span> *v2 = ...</div><div class="line">[v2 myMethod];</div><div class="line"><span class="type">NSObject</span> *v3 = [<span class="type">NSObject</span> new] <span class="comment">// v3  `myMethod`</span></div><div class="line"><span class="type">NSArray</span> *array = @[v1, v2, v3];</div><div class="line"><span class="keyword">for</span> (id obj <span class="keyword">in</span> array) &#123;</div><div class="line">    [obj myMethod];</div><div class="line">&#125;</div><div class="line"><span class="comment">// Runtime error:</span></div><div class="line"><span class="comment">// unrecognized selector sent to instance blabla</span></div></pre></td></tr></table></figure><p>上面的代码是可以编译过的，但是在运行时程序会崩溃。有了<strong>协议</strong>(<strong>protocol</strong>),可以申明数组的每个对象都是遵从某个协议的，如果塞进去了不遵从该协议的对象，就会报错，通不过编译。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Greetable</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">greet</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cat</span>: <span class="title">Greetable</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> name: <span class="type">String</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">greet</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"meow~ <span class="subst">\(name)</span>"</span>)</div><div class="line">&#125; &#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> array: [<span class="type">Greetable</span>] = [</div><div class="line">        <span class="type">Person</span>(name: <span class="string">"Wei Wang"</span>),</div><div class="line">        <span class="type">Cat</span>(name: <span class="string">"onevcat"</span>)]</div><div class="line"><span class="keyword">for</span> obj <span class="keyword">in</span> array &#123;</div><div class="line">    obj.greet()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Bug</span>: <span class="title">Greetable</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> name: <span class="type">String</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// Compiler Error:</span></div><div class="line"><span class="comment">// 'Bug' does not conform to protocol 'Greetable'</span></div><div class="line"><span class="comment">// protocol requires function 'greet()'</span></div></pre></td></tr></table></figure><h2 id="横切关注点-Cross-Cutting-Concerns"><a href="#横切关注点-Cross-Cutting-Concerns" class="headerlink" title="横切关注点(Cross-Cutting Concerns)"></a>横切关注点(Cross-Cutting Concerns)</h2><p>由于大部分面向对象的编程语言都是单继承的，导致了某些功能是不同类之间都需要的，但是由于改类已经继承了其他类，或者无法将不同类之间抽取出更多共性(或者说对于某一个小功能点来这样做代价太大)，成为他们的父类，这样不得不在每个类里面重复一遍代码，使得代码很冗长。这样的小功能就可以称为横切关注点。</p><p>还是直接拿喵神的例子，假设我们有一个 ViewController，它继承自UIViewController，我们向其中添加一个 myMethod，如果这时候我们又有一个继承自 UITableViewController 的 AnotherViewController，我们也想向其中添加同样的 myMethod，这时，我们迎来了 OOP 的一大困境，那就是我们很难在不同继承关系的类里共用代码。这里的问题用“行话”来说叫做“横切关注点” (Cross-Cutting Concerns)。我们的关注点 myMethod 位于两条继承链 (UIViewController -&gt; ViewCotroller 和 UIViewController -&gt; UITableViewController -&gt; AnotherViewController) 的横切面上。面向对象是一种不错的抽象方式，但是肯定不是最好的方式。它无法描述两个不同事物具有某个相同特性这一点。在这里，特性的组合要比继承更贴切事物的本质。</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fri12dytq6j30c3079dfs.jpg" alt=""></p><p>在swift中很容易抽取出协议，并用<strong>extension</strong>关键字提供协议的默认实现，从而避免的代码的重复。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>1.<a href="https://blog.csdn.net/it_zhaoxiaowei/article/details/53436851" target="_blank" rel="external">《面向协议编程与 Cocoa 的邂逅》</a><br>2.<a href="https://zh.wikipedia.org/wiki/编程范型" target="_blank" rel="external">wiki:编程范式</a><br>3.<a href="https://io-meter.com/2017/05/29/A-Brief-Intro-to-Functional-Programming/" target="_blank" rel="external">A Brief Intro to Functional Programming</a><br>4.<a href="https://www.zhihu.com/question/39844612" target="_blank" rel="external">Objective-C 的消息机制如何理解</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;从编程范式讲起&quot;&gt;&lt;a href=&quot;#从编程范式讲起&quot; class=&quot;headerlink&quot; title=&quot;从编程范式讲起&quot;&gt;&lt;/a&gt;从编程范式讲起&lt;/h1&gt;&lt;p&gt;或许你经常听到诸如面向对象编程、面向过程编程、面向协议编程、函数式编程这些词，心中也不免疑惑，这些词
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="swift" scheme="http://zhihaozhang.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift5新特性</title>
    <link href="http://zhihaozhang.github.io/2018/05/09/swiftfive/"/>
    <id>http://zhihaozhang.github.io/2018/05/09/swiftfive/</id>
    <published>2018-05-09T05:29:58.331Z</published>
    <updated>2018-05-09T05:29:58.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>话说这两天好像是Google IO召开的日子，借机蹭一波热度，唱个反调，浅析一下Swift5可能会出现的新特性，也算是为下个月即将举办的<strong>WWDC</strong>预热预热吧。</p><h1 id="ABI稳定性"><a href="#ABI稳定性" class="headerlink" title="ABI稳定性"></a>ABI稳定性</h1><p>ABI稳定性这个话题是一个历史遗留任务，最初是Swift3的目标，苹果的拖延症一直拖到了Swift5，还不一定可以实现。这也是国内很多公司不敢全面拥抱Swift的<strong>重要原因之一</strong>。</p><h2 id="ABI是啥"><a href="#ABI是啥" class="headerlink" title="ABI是啥"></a>ABI是啥</h2><p>ABI是Application Binary Interfaces（应用二进制接口）的缩写，它描述了应用程序和操作系统或其他应用程序的低级接口。</p><p>在应用程序运行时，Swift二进制需要和其他库或组件通过ABI进行接触，因此ABI定义了非常底层的细节。比如：如何调用一个函数，数据在内存中是如何存储的、元数据在哪以及如何获取到。</p><p>由于现在ABI是不稳定的，因此每一个APP都不得不绑定特定版本的Swift动态库。这样从外面看起来，Swift与App的关联比ios系统要更紧密。</p><p>举个例子来说，app1使用的是Swift 4.0，因此它绑定的是包含4.0 ABI的Swift 4.0动态库，而app2使用的是Swift 4.1，它绑定的就是包含4.1 ABI的Swift 4.1动态库。如果ABI变得稳定了，那么ABI就可以抽出来，集成到ios系统中，因为它可以跟Swift的任一版本兼容。</p><h2 id="ABI的重要性"><a href="#ABI的重要性" class="headerlink" title="ABI的重要性"></a>ABI的重要性</h2><p>通过上面的描述，应该不难看出ABI的重要性了，总结一下ABI稳定性带来的好处吧：</p><ul><li>App所占的大小会减小</li><li>Swift变化也没现在这么频繁</li><li>版本变化时，更少的改动</li><li>因为不需要绑定特定版本的swift，开发者可以做出预编译的框架</li></ul><p>但凡事都有两面性，由于带上了ABI这个脚链，不可避免的也会引入一些缺点：</p><ul><li>限制了接口的变动</li><li>Swift的发展和演化需要考虑的东西也渐渐多了起来</li></ul><h1 id="Async-Await-模式"><a href="#Async-Await-模式" class="headerlink" title="Async/Await 模式"></a>Async/Await 模式</h1><p>熟悉javascript的朋友应该对这个模式不陌生，在ES7中，也加入了这个模式应对异步编程。这个好用的特性，即将引入Swift5！</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>之前，例如错误处理、回调之类的异步API用起来挺麻烦的，组合调用时很容易产生出复杂的控制流，用Swift的guard let语法糖在闭包调用中看起来重重嵌套，开发者很难知道当前所处的上下文。</p><p>举个例子：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadWebResource</span><span class="params">(<span class="number">_</span> path: String, completionBlock: <span class="params">(result: Resource)</span></span></span> -&gt; <span class="type">Void</span>) &#123; ... &#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">decodeImage</span><span class="params">(<span class="number">_</span> r1: Resource, <span class="number">_</span> r2: Resource, completionBlock: <span class="params">(result: Image)</span></span></span> -&gt; <span class="type">Void</span>)</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">dewarpAndCleanupImage</span><span class="params">(<span class="number">_</span> i : Image, completionBlock: <span class="params">(result: Image)</span></span></span> -&gt; <span class="type">Void</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">processImageData1</span><span class="params">(completionBlock: <span class="params">(result: Image)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</div><div class="line">   loadWebResource(<span class="string">"dataprofile.txt"</span>) &#123; dataResource <span class="keyword">in</span></div><div class="line">      loadWebResource(<span class="string">"imagedata.dat"</span>) &#123; imageResource <span class="keyword">in</span></div><div class="line">         decodeImage(dataResource, imageResource) &#123; imageTmp <span class="keyword">in</span></div><div class="line">            dewarpAndCleanupImage(imageTmp) &#123; imageResult <span class="keyword">in</span></div><div class="line">               completionBlock(imageResult)</div><div class="line">             &#125;</div><div class="line">          &#125;</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>引入Async/Await模式后，现在的代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadWebResource</span><span class="params">(<span class="number">_</span> path: String)</span></span> async -&gt; <span class="type">Resource</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">decodeImage</span><span class="params">(<span class="number">_</span> r1: Resource, <span class="number">_</span> r2: Resource)</span></span> async -&gt; <span class="type">Image</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">dewarpAndCleanupImage</span><span class="params">(<span class="number">_</span> i : Image)</span></span> async -&gt; <span class="type">Image</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">processImageData1</span><span class="params">()</span></span> async -&gt; <span class="type">Image</span> &#123;</div><div class="line">    <span class="keyword">let</span> dataResource = await loadWebResource(<span class="string">"dataprofile.txt"</span>)</div><div class="line">    <span class="keyword">let</span> imageResource = await loadWebResource(<span class="string">"imagedata.dat"</span>)</div><div class="line">    <span class="keyword">let</span> imageTmp = await decodeImage(dataResource, imageResource)</div><div class="line">    <span class="keyword">let</span> imageResult = await dewarpAndCleanupImage(imageTmp)</div><div class="line">    <span class="keyword">return</span> imageResult</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>此处应有掌声</p></blockquote><h1 id="Actors"><a href="#Actors" class="headerlink" title="Actors"></a>Actors</h1><ul><li>Actors是一个新概念，它表示现实世界中的一些概念，比如“一个文档”、“一台设备”、“一次网络请求”等。</li><li>它是调度队列、可运行在该队列上并受该队列保护的数据的组合</li><li>可以认为是类似于class和protocol的一种新类型</li><li>允许开发者在其中定义内部变量/函数从而管理数据、进行相关操作</li><li>不能返回值、抛出异常、没有inout参数</li><li>开发者可以与之异步通信，Actor可以保证它所保护的数据只被运行于其上的代码接触到</li><li>UIKit和AppKit可以将主线程建模成MainActor</li><li>和class、protocol一样，开发者可以用extension关键字扩展MainActor</li><li>当引用数变为0时，Actor生命周期完成</li></ul><p>举个例子，假设正在开发一个tableview的应用，内容是一个string数组(受保护数据)，代码看起来应该是这样:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">actor <span class="type">TableModel</span> &#123;</div><div class="line">    <span class="keyword">let</span> mainActor : <span class="type">TheMainActor</span></div><div class="line">    <span class="keyword">var</span> theList : [<span class="type">String</span>] = [] &#123;</div><div class="line">        <span class="keyword">didSet</span> &#123;</div><div class="line">            mainActor.updateTableView(theList)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">init</span>(mainActor: <span class="type">TheMainActor</span>) &#123; </div><div class="line">        <span class="keyword">self</span>.mainActor = mainActor </div><div class="line">    &#125;</div><div class="line">    actor <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(entry: String)</span></span> &#123;</div><div class="line">      theList.append(entry)</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><h1 id="其他提升"><a href="#其他提升" class="headerlink" title="其他提升"></a>其他提升</h1><ul><li>String:对正则表达式<strong>Language级别</strong>的支持、性能提升。</li><li>标准库的改进</li><li>改进Foundation</li><li>增加了新语法</li></ul><p>让我们一起静待WWDC2018的到来！</p><p>参考</p><ol><li><a href="https://www.developerinsider.in/what-will-be-new-in-swift-5/" target="_blank" rel="external">本文主要翻译自：DeveloperInsider</a>.</li><li><a href="https://www.jianshu.com/p/5860f5542f21" target="_blank" rel="external">Swift库二进制接口(ABI)兼容性研究</a></li><li><a href="https://imtx.me/archives/2370.html" target="_blank" rel="external">Swift 5 的蓝图：ABI 稳定</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;话说这两天好像是Google IO召开的日子，借机蹭一波热度，唱个反调，浅析一下Swift5可能会出现的新特性，也算是为下个月即将举办的&lt;s
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="swift" scheme="http://zhihaozhang.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>GoBACKSPACE————致敬Go2Shell的Finder插件</title>
    <link href="http://zhihaozhang.github.io/2018/04/17/GoBACKSPACE/"/>
    <id>http://zhihaozhang.github.io/2018/04/17/GoBACKSPACE/</id>
    <published>2018-04-17T12:52:36.290Z</published>
    <updated>2018-04-18T02:55:39.971Z</updated>
    
    <content type="html"><![CDATA[<p>仅以此项目<strong>向Go2Shell致敬</strong>、也庆祝Github10周年生日快乐，整个项目开源于<a href="https://github.com/zhihaozhang/GoBACKSPACE" target="_blank" rel="external">Github</a>，直接想用的朋友可以去<a href="https://pan.baidu.com/s/1EhGCUSVwVk1oXUCwbMfa5w" target="_blank" rel="external">百度网盘</a>下载。</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在macOS系统中，<strong>Finder</strong>(中文被官方译为访达)扮演着文件管理器的角色。在大多数场景下，Finder还是挺好用的，但是有一点让我很抓狂，那就是我在Finder视图中发现了一个文件或文件夹，想去它的父级目录时比较麻烦，因为Finder工具栏左边的&lt; &gt;按钮经常是灰色的，而且也只是能记录着你之前访问过的文件路径历史，有点类似于safari里访问过网页的历史。</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fqfyhfema8j3096050wei.jpg" alt=""></p><blockquote><p>Finder(访达)的工具栏截图 (&lt; &gt;为灰色)，蓝色指南针为GoBACKSPACE</p></blockquote><p>macOS的Finder只帮你记录了按时间先后访问过的文件地址，<strong>这意味着按&lt;键并不一定意味着去父级文件夹，它只表示是你之前访问过的文件夹。</strong> 更多情况下，&lt;和&gt;按键是灰色的，不让按的状态。</p><p>而GoBACKSPACE的出现将彻底改变这一现状，GoBACKSPACE可以做到的就是让你在文件的<strong>绝对</strong>路径关系之间浏览文件。主要需要解决的绝对路径去父文件夹的功能，因为去子文件夹只需要靠双击操作即可。我觉得<strong>绝对</strong>路径关系是更符合我思考的一种方式。去父文件夹这件事还是经常发生的，比如你在一个项目视图下，想去父目录将整个项目删除或AirDrop分享给其他人；搜索到了一张照片，想将该目录下所有照片打包等…</p><p>由于GoBACKSPACE和Finder之间的关系紧密，把它做成一个类似Go2Shell那样的插件是更好的选择；考虑到GoBACKSPACE的开发初衷是帮助用户更好的在不同文件夹间切换，因此这里选用了一个指南针作为logo，乍一看跟safari的图标好像，估计上架时会被苹果喷。看着旁边的Go2Shell，竟毫无违和感。</p><p>希望至此，读者已经明白了我<strong>为什么</strong>要开发GoBACKSPACE。</p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>首先要下载这个软件，我将安装文件打包上传到了<a href="https://pan.baidu.com/s/1EhGCUSVwVk1oXUCwbMfa5w" target="_blank" rel="external">百度网盘</a>，无需密码即可下载。</p><p>为了帮助读者将GoBACKSPACE添加到Finder工具栏，我做了一个Gif如下。</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fqfwji6347g30go0dekjm.gif" alt=""></p><blockquote><p>将GoBACKSPACE添加到Finder工具栏的方法</p></blockquote><p>一次添加即可，无需重复添加，使用它的时候，需要两个步骤：</p><ul><li>步骤1：点击icon</li><li>步骤2：<strong>没有步骤2!!</strong></li></ul><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fqfxcspvfig30go09lqv5.gif" alt="App icon"></p><blockquote><p>插件的最终效果demo</p></blockquote><h1 id="核心功能的实现"><a href="#核心功能的实现" class="headerlink" title="核心功能的实现"></a>核心功能的实现</h1><p>本项目的需求是我个人的真实需求，实现的时候参考了PathToGo这个项目，该项目返回上层使用了<strong>AppleScript</strong>，苹果自己的脚本语言，并使用Swift与之进行交互，返回脚本执行成功与否；并根据脚本的执行情况给用户弹toast，以免在最顶层目录时，不能继续往父级目录前进给用户带来困扰。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">tell</span> <span class="built_in">application</span> <span class="string">"Finder"</span></div><div class="line"><span class="keyword">set</span> currentPath <span class="keyword">to</span> <span class="keyword">POSIX path</span> <span class="keyword">of</span> (target <span class="keyword">of</span> window <span class="number">1</span> <span class="keyword">as</span> <span class="built_in">alias</span>)</div><div class="line"><span class="keyword">set</span> myArray <span class="keyword">to</span> <span class="keyword">my</span> theSplit(currentPath, <span class="string">"/"</span>)</div><div class="line"><span class="keyword">set</span> lengthOfArray <span class="keyword">to</span> <span class="keyword">the</span> <span class="built_in">length</span> <span class="keyword">of</span> myArray</div><div class="line"><span class="keyword">set</span> the_path <span class="keyword">to</span> <span class="string">""</span> <span class="keyword">as</span> <span class="built_in">string</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> lengthOfArray ≤ <span class="number">3</span> <span class="keyword">then</span></div><div class="line"><span class="built_in">return</span> <span class="string">"fail"</span></div><div class="line"><span class="keyword">else</span></div><div class="line"><span class="keyword">set</span> lengthOfNewArray <span class="keyword">to</span> (lengthOfArray - <span class="number">2</span>)</div><div class="line"><span class="keyword">set</span> parentPath <span class="keyword">to</span> items <span class="number">2</span> <span class="keyword">through</span> lengthOfNewArray <span class="keyword">of</span> myArray</div><div class="line"></div><div class="line"><span class="keyword">repeat</span> <span class="keyword">with</span> anItem <span class="keyword">in</span> parentPath</div><div class="line"><span class="keyword">set</span> the_path <span class="keyword">to</span> the_path &amp; <span class="string">"/"</span> &amp; anItem</div><div class="line"><span class="keyword">end</span> <span class="keyword">repeat</span></div><div class="line"><span class="keyword">set</span> the_path <span class="keyword">to</span> the_path &amp; <span class="string">"/"</span></div><div class="line"><span class="comment">-- go2Parent(the_path)</span></div><div class="line"><span class="keyword">set</span> the_folder <span class="keyword">to</span> (<span class="keyword">POSIX file</span> the_path) <span class="keyword">as</span> <span class="built_in">alias</span></div><div class="line"><span class="keyword">tell</span> <span class="built_in">application</span> <span class="string">"Finder"</span></div><div class="line"><span class="built_in">activate</span></div><div class="line"><span class="keyword">if</span> window <span class="number">1</span> exists <span class="keyword">then</span></div><div class="line"><span class="keyword">set</span> target <span class="keyword">of</span> window <span class="number">1</span> <span class="keyword">to</span> the_folder</div><div class="line"><span class="keyword">else</span></div><div class="line">reveal the_folder</div><div class="line"><span class="keyword">end</span> <span class="keyword">if</span></div><div class="line"><span class="keyword">end</span> <span class="keyword">tell</span></div><div class="line"></div><div class="line"><span class="built_in">return</span> <span class="string">"OK"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">end</span> <span class="keyword">if</span></div><div class="line"></div><div class="line"><span class="built_in">return</span> myArray</div><div class="line"><span class="keyword">end</span> <span class="keyword">tell</span></div><div class="line"></div><div class="line"><span class="keyword">on</span> theSplit(theString, theDelimiter)</div><div class="line"><span class="comment">-- save delimiters to restore old settings</span></div><div class="line"><span class="keyword">set</span> oldDelimiters <span class="keyword">to</span> <span class="literal">AppleScript</span>'s <span class="literal">text item delimiters</span></div><div class="line"><span class="comment">-- set delimiters to delimiter to be used</span></div><div class="line"><span class="keyword">set</span> <span class="literal">AppleScript</span>'s <span class="literal">text item delimiters</span> <span class="keyword">to</span> theDelimiter</div><div class="line"><span class="comment">-- create the array</span></div><div class="line"><span class="keyword">set</span> theArray <span class="keyword">to</span> <span class="keyword">every</span> <span class="built_in">text</span> <span class="built_in">item</span> <span class="keyword">of</span> theString</div><div class="line"><span class="comment">-- restore the old setting</span></div><div class="line"><span class="keyword">set</span> <span class="literal">AppleScript</span>'s <span class="literal">text item delimiters</span> <span class="keyword">to</span> oldDelimiters</div><div class="line"><span class="comment">-- return the result</span></div><div class="line"><span class="built_in">return</span> theArray</div><div class="line"><span class="keyword">end</span> theSplit</div></pre></td></tr></table></figure><p>AppleScript的逻辑是将当前Finder视图的路径返回，然后将这个路径以”/”进行分割，并根据返回数组的长度，去掉最后两个元素，形成新的路径，让AppleScript控制Finder将当前页面替换为新的文件夹路径，由于AppleScript的原生性，体验还是非常顺滑的。</p><p>Toast的出现和消除添加了动画，且动画的时间都是可以设置的，实现于ToastWindowController.swift文件中，感兴趣的读者可以去将项目clone下来看看，我觉得这个部分可以单独抽出去成为一个小轮子，也来源于PathToGO。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://github.com/HansonStudio/PathToGo" target="_blank" rel="external">PathToGO</a></li><li><a href="https://www.flaticon.com" target="_blank" rel="external">flaticon</a></li><li><a href="https://segmentfault.com/a/1190000011273388" target="_blank" rel="external">AppleScript教程1</a></li><li><a href="http://erikslab.com/2007/08/31/applescript-how-to-split-a-string/" target="_blank" rel="external">Erik’s Lab</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;仅以此项目&lt;strong&gt;向Go2Shell致敬&lt;/strong&gt;、也庆祝Github10周年生日快乐，整个项目开源于&lt;a href=&quot;https://github.com/zhihaozhang/GoBACKSPACE&quot; target=&quot;_blank&quot; rel=&quot;exte
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="macOS开发" scheme="http://zhihaozhang.github.io/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>极客编程日历桌面版开发笔记</title>
    <link href="http://zhihaozhang.github.io/2018/02/10/TuringCal/"/>
    <id>http://zhihaozhang.github.io/2018/02/10/TuringCal/</id>
    <published>2018-02-10T05:23:31.464Z</published>
    <updated>2018-07-18T05:48:10.817Z</updated>
    
    <content type="html"><![CDATA[<p>#背景介绍<br>图灵教育推出的<a href="http://www.ituring.com.cn/book/details/2625" target="_blank" rel="external"><strong>限量款编程日历2018</strong></a>，因为简约大气的设计和每周一个编程语言的介绍，在程序员中广受欢迎。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1foaaqel4dwj30u011i448.jpg" alt=""></p><blockquote><p>图灵教育推出的编程日历实体版</p></blockquote><p>不幸的是由于限量1000款，除去赠品的300多套，真正在售的只有600多套，很快就被抢购一空。值得欣慰的是，前天下午作者将pdf版本的日历公开<a href="http://www.ituring.com.cn/book/download/43507086-33c3-40e9-9115-d610e1333bca" target="_blank" rel="external">下载</a>。</p><p>在简书中也无意间看到有人用python片段将壁纸与当周的日历进行了融合，这个想法让我受到了启发，从该文章下面的评论看到很多用户(特别是mac用户)反映在 macOS 下，Wand 库有点小问题，GitHub 有人提到了这个 <a href="https://github.com/dahlia/wand/issues/324" target="_blank" rel="external">issue</a>。</p><p>我一直在使用的一款软件Blotter，吸附在桌面上的日历和待办事项，于是就萌生了一个将该pdf吸附在桌面上，并根据当前日期展示相应日期的应用，于是我花半天做了TuringCalendar这款应用,<a href="https://github.com/zhihaozhang/TuringCalendar" target="_blank" rel="external">开源地址</a>。欢迎有能力的开发者改进这款应用。</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1foabaeu23ij30m80dw77m.jpg" alt=""></p><blockquote><p>Blotter截图</p></blockquote><h1 id="TuringCalendar的现状"><a href="#TuringCalendar的现状" class="headerlink" title="TuringCalendar的现状"></a>TuringCalendar的现状</h1><p>由于时间仓促，这款软件有一些缺点需要后续解决。</p><ul><li>现在的默认将日历页放置在右上角，因为左上角被Blotter占了，后面需要做成可配置的。</li><li>现在是白底的，在浅色背景的桌面上会比较美观，在深色背景中就不那么美观了。关于这点我在简书上问过python代码的作者，他告诉我用<strong>通道混合</strong>来解决，目前尚在研究中。</li></ul><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fo9z6yw8fuj31dm1hkx6p.jpg" alt=""></p><blockquote><p>TuringCalendar截图</p></blockquote><h1 id="TuringCalendar开发过程"><a href="#TuringCalendar开发过程" class="headerlink" title="TuringCalendar开发过程"></a>TuringCalendar开发过程</h1><h2 id="将窗口固定在桌面上"><a href="#将窗口固定在桌面上" class="headerlink" title="将窗口固定在桌面上"></a>将窗口固定在桌面上</h2><p>macOS管理窗口的类是NSWindow，将窗口固定在桌面上是通过继承该类，并override 其中的某些方法做到的。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="keyword">init</span>(contentRect: <span class="type">NSRect</span>, styleMask style: <span class="type">NSWindow</span>.<span class="type">StyleMask</span>, backing backingStoreType: <span class="type">NSWindow</span>.<span class="type">BackingStoreType</span>, <span class="keyword">defer</span> flag: <span class="type">Bool</span>) &#123;</div><div class="line">      </div><div class="line">      <span class="keyword">super</span>.<span class="keyword">init</span>(contentRect: contentRect, styleMask: style, backing: backingStoreType, <span class="keyword">defer</span>: flag)</div><div class="line">      </div><div class="line">      <span class="keyword">self</span>.level = <span class="type">NSWindow</span>.<span class="type">Level</span>(rawValue: <span class="type">NSWindow</span>.<span class="type">Level</span>.<span class="type">RawValue</span>(<span class="type">CGWindowLevelForKey</span>(<span class="type">CGWindowLevelKey</span>.desktopWindow) - <span class="number">1</span>))</div><div class="line">      </div><div class="line">      <span class="keyword">self</span>.collectionBehavior = (<span class="type">NSWindow</span>.<span class="type">CollectionBehavior</span>(rawValue: <span class="type">NSWindow</span>.<span class="type">CollectionBehavior</span>.<span class="type">RawValue</span>(<span class="type">UInt8</span>(<span class="type">NSWindow</span>.<span class="type">CollectionBehavior</span>.canJoinAllSpaces.rawValue) |</div><div class="line">          <span class="type">UInt8</span>(<span class="type">NSWindow</span>.<span class="type">CollectionBehavior</span>.stationary.rawValue) |</div><div class="line">          <span class="type">UInt8</span>(<span class="type">NSWindow</span>.<span class="type">CollectionBehavior</span>.ignoresCycle.rawValue)))</div><div class="line">      )</div><div class="line">      </div><div class="line">      <span class="keyword">self</span>.backgroundColor = <span class="type">NSColor</span>.clear</div><div class="line">      <span class="keyword">self</span>.isOpaque = <span class="literal">false</span></div><div class="line">      </div><div class="line">      </div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="keyword">var</span> canBecomeMain: <span class="type">Bool</span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="keyword">var</span> canBecomeKey: <span class="type">Bool</span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>init方法中，指定了窗口的层级为desktopWindow-1，并且指定了窗口的背景色和一些操作的影响，主要是<strong>expose</strong>操作的时候，该窗口不应该和其他普通窗口一样，收缩起来。同时override相应方法，让该窗口不可以成为Main窗口和Key窗口。</p><h2 id="读取pdf"><a href="#读取pdf" class="headerlink" title="读取pdf"></a>读取pdf</h2><p>读取pdf是通过PDFView完成的，需要导入<strong>Quartz</strong>库。在StoryBoard中也有相关的组件，可以查到日历每页的宽高，在StoryBoard中指定为固定宽高即可。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@IBOutlet</span> <span class="keyword">var</span> calendarViewer: <span class="type">PDFView</span>!</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidLoad()</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> url = <span class="type">Bundle</span>.main.url(forResource: <span class="string">"calendar"</span>, withExtension: <span class="string">"pdf"</span>)</div><div class="line">    <span class="keyword">let</span> pdf = <span class="type">PDFDocument</span>(url: url!)</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> today = <span class="type">GetWeekByDate</span>(date: <span class="type">Date</span>())</div><div class="line">    </div><div class="line">    calendarViewer.document = pdf</div><div class="line">    calendarViewer.go(to: (pdf?.page(at: today-<span class="number">1</span>))!)</div><div class="line">    </div><div class="line">    <span class="comment">// Do any additional setup after loading the view.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里发现一个坑，PDFView是会响应鼠标事件的，上下滑会在页与页之间切换，由于PDFView是NSView的子类，因此可以override hitTest方法，让PDFView不响应相关事件，使用了extension关键字。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">PDFView</span></span>&#123;</div><div class="line">    <span class="keyword">open</span> <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">hitTest</span><span class="params">(<span class="number">_</span> point: NSPoint)</span></span> -&gt; <span class="type">NSView</span>? &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="得到今天是今年的第几周"><a href="#得到今天是今年的第几周" class="headerlink" title="得到今天是今年的第几周"></a>得到今天是今年的第几周</h2><p>我将原作者提供的pdf文件进行了截取，只保留了我们需要的53个周的数据。通过下面的方法获取到当天是2018年的第几周，然后让PDFView跳到相应的页面。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetWeekByDate</span><span class="params">(date:Date)</span></span> -&gt;<span class="type">Int</span>&#123;</div><div class="line">     <span class="keyword">guard</span> <span class="keyword">let</span> calendar = <span class="type">NSCalendar</span>(identifier: <span class="type">NSCalendar</span>.<span class="type">Identifier</span>.gregorian) <span class="keyword">else</span> &#123;</div><div class="line">         <span class="keyword">return</span> <span class="number">0</span></div><div class="line">     &#125;</div><div class="line">     <span class="keyword">let</span> components = calendar.components([.weekOfYear,.weekOfMonth,.weekday,.weekdayOrdinal], from: date)</div><div class="line">    </div><div class="line">     <span class="keyword">return</span> components.weekOfYear!;</div><div class="line"> &#125;</div></pre></td></tr></table></figure><h2 id="将窗口固定在右上角"><a href="#将窗口固定在右上角" class="headerlink" title="将窗口固定在右上角"></a>将窗口固定在右上角</h2><p>控制窗口这件事是由windowController完成的，获取到相应的window，并调用setFrameOrigin方法指定窗口的初始x,y坐标即可。需要注意的是屏幕的坐标左下角是（0，0）。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">windowDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.windowDidLoad()</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> window = window, <span class="keyword">let</span> screen = window.screen &#123;</div><div class="line">        <span class="keyword">let</span> screenRect = screen.visibleFrame</div><div class="line">        <span class="keyword">let</span> offsetFromLeft = <span class="type">CGFloat</span>(screenRect.maxX - window.frame.width)</div><div class="line">        <span class="keyword">let</span> offsetFromTop = <span class="type">CGFloat</span>(<span class="number">0</span>)</div><div class="line">        <span class="keyword">let</span> offsetFromBottom = screenRect.maxY - window.frame.height - offsetFromTop</div><div class="line">        window.setFrameOrigin(<span class="type">NSPoint</span>(x: offsetFromLeft, y: offsetFromBottom))</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="与Python版本相比的优点"><a href="#与Python版本相比的优点" class="headerlink" title="与Python版本相比的优点"></a>与Python版本相比的优点</h2><p>相比于python版，<strong>TuringCalendar</strong>也有自己的优势，那就是不需要手动的去生成壁纸，而且每周要定时更换；环境的配置可能有一些坑，很多人都在评论里说配置没有成功。</p><p>最后，欢迎有能力的开发者改进<a href="https://github.com/zhihaozhang/TuringCalendar" target="_blank" rel="external">这款应用</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#背景介绍&lt;br&gt;图灵教育推出的&lt;a href=&quot;http://www.ituring.com.cn/book/details/2625&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;限量款编程日历2018&lt;/strong&gt;&lt;/a&gt;，因为简
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="macOS开发" scheme="http://zhihaozhang.github.io/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>更优雅的文件添加方式Drag &amp; Drop</title>
    <link href="http://zhihaozhang.github.io/2018/01/24/DragAndDrop/"/>
    <id>http://zhihaozhang.github.io/2018/01/24/DragAndDrop/</id>
    <published>2018-01-24T07:50:29.000Z</published>
    <updated>2018-01-24T07:50:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面基本完成了<strong>FileHider</strong>主要功能的开发工作，<a href="https://github.com/zhihaozhang/FileHider-for-mac" target="_blank" rel="external">开源地址</a>，该软件在百度网盘下载次数近100次，获得了一些人的认可，但也有一些人提出了不同的意见。感谢认可这款软件价值的人，同时也需要虚心听取不同意见。</p><p>不同意见主要集中在三点:</p><ul><li>FileHider实现的功能完全可以由命令行代替。关于这点，我不想否认，但是话说回来，并不是每个人都是程序员，都会使用terminal，顶级的程序员甚至可以不用GUI界面在terminal里完成所有的工作，但是有GUI界面大部分情况下还是能够提升<strong>普通人</strong>的工作效率的。况且，假设你今天隐藏了一个文件，也许你明天还记得，后天还记得，但是一个星期后呢？一个月后呢？</li><li>FileHider没有加密功能。关于这点，我在软件设计的初衷里已经说了，FileHider的定位是将某些文件对从你身边走过，可以看到你屏幕的人进行的隐藏，而不是可以操作你电脑的人。</li><li>某个文件不想隐藏了，想将其删掉，可以将remove file换成简单的-，跟左边的+也对应。这确实是一个好的建议，在最新版本的FileHider中采纳了该建议，感谢。</li></ul><p>关于建议部分，有个网友跟我的想法不谋而合，那就是每次添加文件都需要从文件选择器里从根路径一层一层找到想要隐藏的文件，这很麻烦；更多时候，那些文件就在Finder中，如果可以直接从Finder窗口中拖拽到FileHider中，那就太<strong>Mac Native</strong>了。于是，我就将这一功能实现了。</p><p><img src="https://ws1.sinaimg.cn/large/aa2320a8ly1fnpohtbv10g21ls1ukb1l" alt=""></p><blockquote><p>Drag &amp; drop in FileHider</p></blockquote><h1 id="Drag-amp-drop"><a href="#Drag-amp-drop" class="headerlink" title="Drag &amp; drop"></a>Drag &amp; drop</h1><h2 id="Drag-amp-drop-in-D3JS"><a href="#Drag-amp-drop-in-D3JS" class="headerlink" title="Drag &amp; drop in D3JS"></a>Drag &amp; drop in D3JS</h2><p>其实我对Drag &amp; drop并不陌生，在之前开发网页可视化组件时，就多次使用这一特性。支持这一操作，确实会增加可视化组件的可交互性。在D3JS中，Drag被分为了三个阶段，即dragstart、drag、dragend,分别对应于drag时间的<strong>开始</strong>、<strong>进行中</strong>、<strong>结束</strong>，类似于NSView的一个<strong>生命周期</strong>，在不同的阶段，实现不同的回调函数即可对Drag事件的全过程进行完整的控制。</p><h2 id="Drag-amp-drop-在其他地方的应用"><a href="#Drag-amp-drop-在其他地方的应用" class="headerlink" title="Drag &amp; drop 在其他地方的应用"></a>Drag &amp; drop 在其他地方的应用</h2><p>在ios11中，得益于iPad Pro的大屏幕，也有了Drag &amp; drop功能，虽然没仔细研究过，但应该是和macOS里的非常类似。</p><p>另外，锤子科技引以为傲的一步(oneStep)也实现了数据在不同应用间使用手势传递的功能。由于没有使用过，就不妄加评论了，但不难看出Drag &amp; drop是现阶段人机交互的趋势，因为它真的很自然，借用王自如的一句话,虽然用在这里可能并不是很合适。</p><blockquote><p>真正的科技，就是让你感受不到科技的存在。</p></blockquote><h2 id="Drag-amp-drop-in-FileHider"><a href="#Drag-amp-drop-in-FileHider" class="headerlink" title="Drag &amp; drop in FileHider"></a>Drag &amp; drop in FileHider</h2><p>FileHider只需要实现Drag &amp; drop的一半，因为它只需要接收外部拖拽进来的文件，并获取文件路径，将文件添加到隐藏文件列表中即可。</p><p>通过研究Drag &amp; drop的API文档发现它的设计和D3JS的设计有类似之处，都提供了对动作完整生命周期进行控制的<strong>钩子</strong>。但是似乎macOS中提供了更多的钩子，比如监控拖拽东西进来没有释放便移出去的情况(draggingExited)。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">draggingExited</span><span class="params">(<span class="number">_</span> sender: NSDraggingInfo?)</span></span> &#123;</div><div class="line">  isReceivingDrag = <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>相对应的，有刚进来时的钩子(draggingEntered)。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">draggingEntered</span><span class="params">(<span class="number">_</span> sender: NSDraggingInfo)</span></span> -&gt; <span class="type">NSDragOperation</span> &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>对于FileHider来说，我们需要指定TableView为Drag &amp; drop事件的终点，并指定可接受的文件类型，并在drag结束后，获取文件的完整路径，添加到tableView的datasource对应的数组中。</p><p>具体实现如下：首先生成DragDestinationView类，继承自NSView子类。由于NSView天然地实现了<strong>NSDraggingDestination</strong>协议，因此直接override相应的方法即可。然后在stroyboard页面指定Drag &amp; drop事件的终点对应的NSView为DragDestinationView。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">FileDragDelegate</span> : <span class="title">class</span></span>&#123;</div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">didFinishDrag</span><span class="params">(<span class="number">_</span> filePath:String)</span></span></div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DragDestinationView</span>: <span class="title">NSView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> delegate: <span class="type">FileDragDelegate</span>?</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">awakeFromNib</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.awakeFromNib()</div><div class="line">        <span class="comment">//注册可接受文件类型</span></div><div class="line">        <span class="keyword">self</span>.register(forDraggedTypes: [<span class="type">NSFilenamesPboardType</span>])</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//文件进入NSView</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">draggingEntered</span><span class="params">(<span class="number">_</span> sender: NSDraggingInfo)</span></span> -&gt; <span class="type">NSDragOperation</span> &#123;</div><div class="line">        <span class="keyword">let</span> sourceDragMask = sender.draggingSourceOperationMask()</div><div class="line">        <span class="keyword">let</span> pboard = sender.draggingPasteboard()</div><div class="line">        <span class="keyword">let</span> dragTypes = pboard.types! <span class="keyword">as</span> <span class="type">NSArray</span></div><div class="line">        <span class="keyword">if</span> dragTypes.<span class="built_in">contains</span>(<span class="type">NSFilenamesPboardType</span>) &#123;</div><div class="line">            <span class="keyword">if</span> sourceDragMask.<span class="built_in">contains</span>([.link]) &#123;</div><div class="line">                <span class="keyword">return</span> .link</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> sourceDragMask.<span class="built_in">contains</span>([.copy]) &#123;</div><div class="line">                <span class="keyword">return</span> .copy</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> .generic</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="comment">//获取数据，触发代理事件的方法</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">performDragOperation</span><span class="params">(<span class="number">_</span> sender: NSDraggingInfo?)</span></span>-&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">let</span> pboard = sender?.draggingPasteboard()</div><div class="line">        <span class="keyword">let</span> dragTypes = pboard!.types! <span class="keyword">as</span> <span class="type">NSArray</span></div><div class="line">        <span class="keyword">if</span> dragTypes.<span class="built_in">contains</span>(<span class="type">NSFilenamesPboardType</span>) &#123;</div><div class="line">            <span class="keyword">let</span> files = (pboard?.propertyList(forType: <span class="type">NSFilenamesPboardType</span>))! <span class="keyword">as</span>!  <span class="type">Array</span>&lt;<span class="type">String</span>&gt;</div><div class="line">            <span class="keyword">let</span> numberOfFiles = files.<span class="built_in">count</span></div><div class="line">            <span class="keyword">if</span> numberOfFiles &gt; <span class="number">0</span> &#123;</div><div class="line">                <span class="keyword">let</span> filePath = files[<span class="number">0</span>] <span class="keyword">as</span> <span class="type">String</span></div><div class="line">                <span class="keyword">if</span> <span class="keyword">let</span> delegate = <span class="keyword">self</span>.delegate &#123;</div><div class="line">                    <span class="type">NSLog</span>(<span class="string">"filePath <span class="subst">\(filePath)</span>"</span>)</div><div class="line">                    delegate.didFinishDrag(filePath)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在主ViewController中生成该NSView对应的Outlet，并实现FileDragDelegate协议，实现协议中的方法，即Drag &amp; drop事件完成后需执行的逻辑即可。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">FileDragDelegate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">didFinishDrag</span><span class="params">(<span class="number">_</span> filePath:String)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> url = <span class="type">NSURL</span>(fileURLWithPath: filePath)</div><div class="line">        </div><div class="line">        filesList.append(url <span class="keyword">as</span> <span class="type">URL</span>)</div><div class="line">        <span class="built_in">print</span>(url)</div><div class="line">        tableview.reloadData()</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="其他Drag-amp-drop教程"><a href="#其他Drag-amp-drop教程" class="headerlink" title="其他Drag &amp; drop教程"></a>其他Drag &amp; drop教程</h1><p>Ray家出过Drag &amp; drop更系统、完整的介绍，这里贴出<a href="https://github.com/DeveloperLx/macOS_Development_Tutorials_translation/blob/master/Drag%20and%20Drop%20Tutorial%20for%20macOS.md" target="_blank" rel="external">链接</a>，供感兴趣，并想进一步学习的各位参考。</p><p><img src="https://ws1.sinaimg.cn/large/aa2320a8ly1fnrqw07njuj21bk0wygwc" alt=""></p><blockquote><p>完整的Drag &amp; drop session</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前面基本完成了&lt;strong&gt;FileHider&lt;/strong&gt;主要功能的开发工作，&lt;a href=&quot;https://github.com
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="macOS开发" scheme="http://zhihaozhang.github.io/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>AVHider for macOS开发笔记</title>
    <link href="http://zhihaozhang.github.io/2018/01/16/FileHider/"/>
    <id>http://zhihaozhang.github.io/2018/01/16/FileHider/</id>
    <published>2018-01-16T13:08:22.000Z</published>
    <updated>2018-01-16T13:25:33.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h1><p><del>AVHider （oh NO）</del> FileHider是一款将你的文件夹或文件隐藏起来的效率软件，适用于<strong>macOS X 10.10及以后的macOS版本</strong>。<a href="https://pan.baidu.com/s/1dGccUbB" target="_blank" rel="external">百度网盘下载地址</a>,欢迎大家试用，并提出改进建议！有开发能力的朋友也可以去<a href="https://github.com/zhihaozhang/FileHider-for-mac" target="_blank" rel="external">Github</a>将项目fork后contribute您的code。</p><p><img src="https://ws1.sinaimg.cn/large/aa2320a8ly1fnhgwuj4h0j208y08wgls" alt=""></p><blockquote><p>Specially thanks to <del>un</del>famous Designer <strong>Joseph</strong>, who designed the exquisite logo for this Application!</p></blockquote><p>软件的使用也非常简单，基本可以实现文件/文件夹的可见/不可见一键切换，录了一个gif动画。</p><p><img src="https://ws1.sinaimg.cn/large/aa2320a8ly1fnhbezm45wg20hs0dc7q5" alt=""></p><blockquote><p>软件使用demo</p></blockquote><h1 id="开发初衷"><a href="#开发初衷" class="headerlink" title="开发初衷"></a>开发初衷</h1><p>开发这款软件的<strong>初衷</strong>是<del>将xxx.mp4/xxx.avi/xxx.mkv在白天藏起来，免得被其他人发现。</del> 在Apple store上发现了一款类似的软件，售价163元，而且卖的不错。作为一个工程师，我是不愿意掏这份冤枉钱的，因为我觉得这东西一天内可以搞出来，于是就花了一晚上做出了功能类似的软件FileHider(认真脸)。</p><p><img src="https://ws1.sinaimg.cn/large/aa2320a8ly1fnhba8qhjfj20tz13pq71" alt=""></p><blockquote><p>在Mac App Store定价为163元的Secret Folder</p></blockquote><p>与Secret Folder不同的地方在于它的TableView中有两列，而我认为显示当前文件可见/不可见的列跟右边的NSSegmentedControl信息重复了，因此我就除去了该列。</p><p>还有一点不同是Secret Folder设置了Require Password这个选项，这个我觉得可以不加，因为如果一个人在用户不在的时候能够进入到系统中，那么user的密码也是多余的，FileHider的目的是对有机会看到你电脑屏幕却没有机会操作你电脑的人隐藏文件。</p><p>起初我还想在用户切换文件可见性的时候发送一个Notification，但是觉得过度设计了，因为这些通知如果不手动删除，将会在通知中心保留下来，这显然会增加别人知道有文件隐藏起来的可能性。</p><h1 id="开发过程"><a href="#开发过程" class="headerlink" title="开发过程"></a>开发过程</h1><h2 id="界面部分"><a href="#界面部分" class="headerlink" title="界面部分"></a>界面部分</h2><p>界面部分完全模仿了Secret Folder的布局，是一个single-Page的应用，依然采用了StoryBoard构造界面。</p><p><img src="https://ws1.sinaimg.cn/large/aa2320a8ly1fniorm8ub3j21gk1z0423" alt=""></p><blockquote><p>项目storyboard截图</p></blockquote><p>左右分为垂直的两栏，使用了<strong>NSSplitView</strong>，并调整左右两栏的大小比例，左边显示文件列表和对列表的增加/删除按钮；右边是文件的详细信息与文件隐藏/可见之间切换的<strong>NSSegmentedControl</strong>。对各个组件定好布局，确保在窗口resize后依然保持着相对较好的样式。</p><h2 id="TableView部分"><a href="#TableView部分" class="headerlink" title="TableView部分"></a>TableView部分</h2><p>文件列表是放到TableView中进行显示的，它也是本应用的核心部分。默认的TableView Cell高度只有17px，每个Cell要塞进去一个文件缩略图icon和文件名，显然过于小了，因此需要定制Cell。在本项目中，我将Cell设置为了30px，其中文件缩略图为24 X 24 px,我觉得大小是比较合适的。</p><p><img src="https://ws1.sinaimg.cn/large/aa2320a8ly1fnipejzy5xj20gy0880te" alt=""></p><p>一个TableView要想成功显示需要知道两件事：<strong>1.显示几行、2.每行显示什么。</strong>和其他应用一样，驱动这个TableView的是一个数组，filesList : [<strong>URL</strong>]。请注意这里是一个URL的数组，文件路径的URL都是定义为file://+文件路径这种格式的。URL在Swift中有相当多的方法，方便拿到文件名、路径名、根据完整路径拿到对应文件的缩略图、文件的detail信息等等。具体的使用可以参考<a href="https://developer.apple.com/documentation/foundation/url" target="_blank" rel="external">官方API文档</a>。</p><h2 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h2><p>对于本应用，用户对某个文件的操作并不是一次性隐藏就完事了的，它需要保留恢复为可见的权力，显然让用户记住哪些文件被隐藏、甚至隐藏在哪个路径下是很不现实的，因此需要数据持久化，保证用户下次打开应用的时候可以知道哪些文件是有过隐藏历史的。因为有过<strong>前科</strong>的文件很可能需要二次隐藏。</p><p>数据持久化的选择很多，最典型的有比较重的<strong>core data</strong>和比较轻量级的<strong>userDefaults</strong>。由于文件列表的路径通常不会很长，因此我选用了相对轻量级的userDefaults。</p><p>在使用userDefaults存储前面提到的URL类型的filesList数组的时候，我发现会报一个错误，<strong>Attempt to set a non-property-list object as an NSUserDefaults</strong>。 后面在网上发现了一些solution，主要的原因是NSUserDefaults只支持NSArray, NSDictionary, NSString, NSData, NSNumber, 和 NSDate的数据类型，对于URL这种类型，网上大多数的solution都是建议将数组编码为NSData，然后进行存储。我考虑到URL和String之间的互转比较方便，因此我将其转换为了string类型的数组进行存储。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// String -&gt; URL</span></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">let</span> defaults = <span class="type">UserDefaults</span>.standard</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> filesListFromUserDefaults = defaults.array(forKey: <span class="string">"filesPath"</span>)&#123;</div><div class="line">            <span class="keyword">var</span> tmpFilePath : [<span class="type">String</span>] = filesListFromUserDefaults <span class="keyword">as</span>! [<span class="type">String</span>]</div><div class="line">            <span class="keyword">for</span> str <span class="keyword">in</span> tmpFilePath&#123;</div><div class="line">                <span class="keyword">self</span>.filesList.append(<span class="type">URL</span>(string: str)!)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">        </div><div class="line"><span class="comment">// URL -&gt; String</span></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillDisappear</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> defaults = <span class="type">UserDefaults</span>.standard</div><div class="line">        <span class="keyword">var</span> array : [<span class="type">String</span>] = []</div><div class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> filesList&#123;</div><div class="line">            array.append(url.absoluteString)</div><div class="line">        &#125;</div><div class="line">        defaults.<span class="keyword">set</span>(array, forKey: <span class="string">"filesPath"</span>)</div><div class="line">    &#125;</div></pre></td></tr></table></figure><blockquote><p>URL与String数组之间的互转</p></blockquote><p>转换的时机很重要，这会提高应用的性能。String-&gt;URL这个方向仅在应用打开时，view加载完毕后进行；而URL-&gt;String这个方向是在应用关闭后，view消失的时候触发一次。</p><h2 id="文件列表的增加"><a href="#文件列表的增加" class="headerlink" title="文件列表的增加"></a>文件列表的增加</h2><p>文件的增加目前是靠比较简单的NSOpenPanel来实现的，显然这很不<strong>Mac</strong>，后面需要做的是<strong>drag-and-drop</strong>，一种更为<strong>优雅</strong>的solution。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">selectFile</span><span class="params">(<span class="number">_</span> sender: Any)</span></span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> openPanel = <span class="type">NSOpenPanel</span>()</div><div class="line">        </div><div class="line">        openPanel.message = <span class="string">"Please select file to Hide"</span></div><div class="line">        openPanel.canChooseDirectories = <span class="literal">true</span></div><div class="line">        <span class="comment">//    openPanel.allowsMultipleSelection = true</span></div><div class="line">        </div><div class="line">        openPanel.beginSheetModal(<span class="keyword">for</span>: view.window!, completionHandler: &#123;(result) <span class="keyword">in</span></div><div class="line">            <span class="keyword">if</span> result == <span class="type">NSModalResponseOK</span>&#123;</div><div class="line">                <span class="keyword">self</span>.selectedFolder = openPanel.url!</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h2 id="文件列表的删除"><a href="#文件列表的删除" class="headerlink" title="文件列表的删除"></a>文件列表的删除</h2><p>文件列表的删除依然是对上文提到的filesList进行操作，通过tableviewDelegate中的tableViewSelectionDidChange方法得到需要删除的元素index。<strong>需要注意的是，</strong>需要增加判断，确保当前有元素被选中。<strong>(如果没有元素被选中，index值会是-1，这很可能引起应用的崩溃)</strong></p><p>无论是文件列表的增加还是删除，都需要调用tableview.reloadData()方法对视图进行更新。</p><h2 id="隐藏和非隐藏的实现"><a href="#隐藏和非隐藏的实现" class="headerlink" title="隐藏和非隐藏的实现"></a>隐藏和非隐藏的实现</h2><p>Unix系统中实现一个文件隐藏的方法很多，甚至可以给该文件进行加密。我能想到的最简单的方法是在原文件前面加一个.，并用mv xxx.mp4 .xxx.mp4将该文件就地在原路径下进行隐藏。这也符合了本软件的设计初衷，将文件从有机会从你电脑边路过，但却没有机会真正操作你电脑的人隐藏。</p><p>模拟console执行命令，是通过Process()来完成的。这里有一些坑，不幸的被我全踩了。</p><p>第一个坑是普通文件和文件夹的URL是不同的，文件夹是以/结尾的，而普通文件则不是，为了得到path和文件名，我调用了String.components(separatedBy: “/“)方法，那么文件夹的文件名就存在了方法得到数组的倒数第二项中；而其他普通文件的文件名存在了数组的倒数第一项中。</p><p>第二个是当用户不是第一次打开应用时，执行mv的参数设置方式需要分四种情况讨论，这也是前面为了应用的效率，不及时update fileList挖下的坑。果然凡事都是有两面性的~</p><h2 id="致谢、结束语"><a href="#致谢、结束语" class="headerlink" title="致谢、结束语"></a>致谢、结束语</h2><p>首先感谢<del>非</del>著名设计师Joseph给我提供的精美logo，感谢Secret Folder，让我有了灵感和动力去做一个类似的软件。</p><p>周五有幸聆听了公司CTO的演讲，一个工程师的日常。我不禁联想到了我自己，我因为原软件定价过高，做过Syngery的替代品mouseSync、Manico的替代品Manico-substitution、Re Desktop的替代品HideDesktop，这也许就是我作为一个工程师的日常吧。</p><p>Drag-and-drop是更为优雅的文件与应用的交互方式，我将于近期抽空集成进应用中，届时再见！</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://github.com/zhihaozhang/FileHider-for-mac" target="_blank" rel="external">Github</a></li><li><a href="https://stackoverflow.com/questions/19720611/attempt-to-set-a-non-property-list-object-as-an-nsuserdefaults" target="_blank" rel="external">stackoverflow</a></li><li><a href="https://www.raywenderlich.com/157986/filemanager-class-tutorial-macos-getting-started-file-system" target="_blank" rel="external">FileManager Class Tutorial for macOS</a></li><li><a href="https://itunes.apple.com/cn/app/secret-folder/id507968596?mt=12" target="_blank" rel="external">APPLE STORE：Secret Folder</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;软件介绍&quot;&gt;&lt;a href=&quot;#软件介绍&quot; class=&quot;headerlink&quot; title=&quot;软件介绍&quot;&gt;&lt;/a&gt;软件介绍&lt;/h1&gt;&lt;p&gt;&lt;del&gt;AVHider （oh NO）&lt;/del&gt; FileHider是一款将你的文件夹或文件隐藏起来的效率软件，适用于&lt;
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="macOS开发" scheme="http://zhihaozhang.github.io/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>浅谈可视交互的方法在大数据平台数据产生、前期处理方面的应用</title>
    <link href="http://zhihaozhang.github.io/2017/12/31/HAN/"/>
    <id>http://zhihaozhang.github.io/2017/12/31/HAN/</id>
    <published>2017-12-31T08:00:53.579Z</published>
    <updated>2017-12-31T08:00:56.554Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>作为一个一本正经的大数据公司，Helium亟需一个平台HAN(Helium Analytical Network)，它涵盖数据完整的生命周期（产生 – 处理 – 使用 – 销毁）。用户通过低学习成本的方式（如SQL， JSON）来定义这个生命周期，即数据从哪来，怎么计算，怎么使用，何时销毁。在平台上，希望用户能用JSON的方式部分覆盖OLAP的功能，即用户从数据的建立到完成OLAP查询的完整过程。</p><p>本文的工作主要集中在第一二个阶段，即数据的产生和部分的处理上。相比于传统的前端配置方式，我们的创新点在于将数据集的流向与产生以图形化的方式进行展现，使得用户清晰地看到每一个数据集产生的过程和流向。带来的好处除了形象化、直观之外，还可降低用户在操作数据过程中产生错误的几率，并且及时发现并补救产生的错误。</p><h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><h2 id="界面总览"><a href="#界面总览" class="headerlink" title="界面总览"></a>界面总览</h2><p><img src="https://ws1.sinaimg.cn/large/aa2320a8ly1fmzx522ht7j21sm172n0r" alt=""></p><blockquote><p>总览</p></blockquote><p>整体界面由三部分组成，比较简洁清爽。最上面是选择Task的panel，因为数据集的操作是分数据集进行的；中间部分是一块画布，展现的是数据集的细节信息；最下方是operators panel，又可细分为左边的数据集与操作panel与右边的系统级操作panel。</p><h2 id="文件结构总览"><a href="#文件结构总览" class="headerlink" title="文件结构总览"></a>文件结构总览</h2><p>经过数次重构，整体文件的结构如下图：<br><img src="https://ws1.sinaimg.cn/large/aa2320a8ly1fmzx70q1gxj20d60pgwgq" alt=""></p><p>还是一个比较传统的前端工程，遵循着MVC模式。其中css文件夹控制着整体工程的样式；image文件主要是按钮和数据集相关的一些图片资源，js文件夹下面分为外部引入的资源(library文件夹)和我编写的js文件；jsonData是前后端未联通时，进行测试用的json文件样例，HAN.html是整个系统的入口。</p><p><img src="https://ws1.sinaimg.cn/large/aa2320a8ly1fmzxhl9jqyj20qo0k00sz" alt=""></p><blockquote><p>MVC架构图</p></blockquote><p>上面的架构图中，我故意将Controller这部分绘制成了红色，体积也明显大于其他部分，不难看出Controller在本项目中的重要性。跟ios类似，传统的Model仅仅是一些class或者struct(在js中为object)，由于本项目中Controller部分太过臃肿，负担过重，我将Model相关的操作也移到了Model模块中，以增加代码的可读性，因此在本项目中，Model理解为Model-related-Module更为合适。</p><h1 id="Model部分"><a href="#Model部分" class="headerlink" title="Model部分"></a>Model部分</h1><p>Model部分的数据结构本身比较简单，可分为两大类，<strong>Stream</strong>数据集与<strong>Batch</strong>数据集；其中数据集本身又可以根据数据来源分为<strong>From Souce</strong>和<strong>From operator</strong>两种类型。</p><p>Model.js中定义了这两种数据集，由数据集中的一个字段区分数据集本身的来源。对数据集的增删查改功能也放到了Model.js中，上文有所提及，这部分代码本应该放在Controller中的。</p><p>Operators在本项目中也是等同与Model的一等公民，因此我们也特意为其定制了相应的数据结构，同样可分为单目操作和双目操作，对每种数据集都设置了相应的字段存储相应的内容。同样放到Model中的，还有对数据集进行操作的逻辑，这样可以大大减轻Controller部分的代码，方便其他同事理解阅读这个项目的源码。下面的关系图很好的说明了数据集和操作符之间的关系，单目操作不改变数据集类型，双目操作只要涉及到Stream类型的数据集，生成的数据集就为Stream类型。</p><p><img src="https://ws1.sinaimg.cn/large/aa2320a8ly1fmzybodnwoj20qo0k0mxn" alt=""></p><p>为了方便Controller与服务器端的通信，在这里分别设立了batch数据集、stream数据集、operators数据集的数组，并提供了一套根据数据集/操作的id快速找到相应model的方法，以便于快速将view和model关联起来。</p><h1 id="View部分"><a href="#View部分" class="headerlink" title="View部分"></a>View部分</h1><p>View部分是这个系统的创新点所在，传统的前端项目使用的是DOM元素，DOM元素没有SVG元素自由，打个不恰当的比方，如果对DOM元素的操作是美图秀秀，那么对SVG元素的操作就是Photoshop。SVG元素的绘制、动画方面的可自定义化非常强。</p><p>经过公司领导和其他同事的反复重构之后，我将绘制通用流程图的通用部分抽取了出来，并提供给使用这个库的用户足够的自由，自定义所涉及到的大部分外观样式和监听事件的补充。</p><p><img src="https://ws1.sinaimg.cn/large/aa2320a8ly1fmzyq4r5xuj20qo0k0aa0" alt=""></p><blockquote><p>构成流程图的基本元素</p></blockquote><p>如上图所示，构成一个完成流程图/数据流图所需要的最基本的两个元素是Entity与Entity之间的关联关系。其中Entity是由两部分组成，即上方的图片(img)和下方的描述文字(text)，关于这个部分，我们提供的可视化库(Helium_vis.js)中都进行了<strong>深度</strong>的定制化，您可以<strong>自定义</strong>img和text的宽高、img左上角的位置、img的透明度、text的字体、大小、对其方式等一系列您想得到与想不到的属性。</p><p>Entity与Entity之间的关联关系目前是定好了从第一个出Entity的图片的右边中点与第二个入Entity左边中点，其他部分由三次贝塞尔曲线进行插值生成漂亮的曲线。关系的render部分目前只提供了粗细的可配项目，后期需要加上关系的描述文字，并提供居中或相对中点偏移量的可配项。</p><p>事件部分，我们希望Entity可以被选中，并且将选中的元素进行高亮区别显示，并且在本项目中，选中的Entity所代表的dataset应该在其他地方进行展示，并且在该处可由用户对dataset的model进行修改、删除等操作。而这部分业务逻辑相关的代码显然不应该放到库内，因为其他项目并不需要这个部分的逻辑，很可能需要改成其他项目的逻辑。同样的，作为一个一本正经的流程图库，我们希望用户有权力去修改每个Entity默认的位置，因此也对每个Entity配备了Drag事件，通用Drag事件，Helium_vis实现了Entity本身跟随鼠标的移动和该Entity相关操作(曲线)的实时移动，另外，针对特定的项目，还支持以传入回调函数的方式将项目特定的逻辑进行传入。比如，在HAN这个项目中，由于需要保存并恢复Entity的位置信息，因此在Drag事件中，添加了对Entity位置的计算相关的逻辑。</p><p>具体的做法比较tricky，是将每个Entity此次render的初始位置加上此次操作的偏移量保存下来，并以此作为下次打开时的初始render位置。</p><p>另外一个可重用并在本项目中反复利用的项目是圆角矩形，在此，我们同样对其进行了封装，提供了很多可配置的选项，并且支持以类似jQuery的链式操作。这样就可以通过配置的方式，用两行代码render出所需要的图形，大大缩减了代码的长度。<strong>代码少了，带来的最大好处是bug也少了。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//代码使用样例</div><div class="line">var canvasConfig = &#123;x:10 , y:20, width:1100, height:590, rx: 10, ry:10, fill:&quot;#e0e0e0&quot;, svg:d3.select(&quot;#canvas&quot;),id:&quot;mainCanvas&quot;&#125;;</div><div class="line">    var mainCanvas = new HeliumCanvas(canvasConfig);</div><div class="line">    </div><div class="line">    mainCanvas.drawSelf().calculatePosition();</div><div class="line"></div></pre></td></tr></table></figure><p>在底层的Operators panel部分，我们还加入了一个脑动大开的类似新版MacBook Pro上Touch Bar的图标收起、图标展开的动画以展示影藏的二级菜单，得益于SVG元素强大的动画能力，这些操作实现起来并不是很复杂。</p><p><img src="https://ws1.sinaimg.cn/large/aa2320a8ly1fmzzfuk2qbg23i00bsx6p" alt=""></p><blockquote><p>Touch-bar like animation</p></blockquote><h1 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h1><p>在本项目中，Controller捕获到view层面的按钮点击事件、drag事件，去调用Model里的增删改查方法；或者经过Model中的from Operator事件产生了新的Model，经过Controller去调用View部分，render出新的视觉元素与之对应。经过前面的功能疏散，这部分代码已经轻量级了很多。</p><p>剩下的一大块功能是与服务器的通信，有正向与逆向两个方向。正向的是去主动通知服务器，将某个任务启动起来、将某个任务删除、保存当前任务信息等等。逆向的部分是从服务器端将上次某个task的保存数据获取到，并由Controller调用相关方法进行重新render，并且render后的canvas依然允许用户像第一次进行操作那般顺滑。</p><p>点击数据集、Operators后的弹出框、配置框等还是沿用的传统前端技术，并不符合本文主题（用可视交互的方法），因此这里就不展开介绍了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>之前写代码比较混乱，可能是因为我做过太多外包中的毒，只求迅速将功能实现交付给甲方就完事了，很少有对项目整体重构的思考。经过两次公司领导的亲自指导重构，有所反思，重构确实让代码看起来清爽了很多、并且可维护性有所提升，以后写项目的时候，应该提前规划好，而不是立即就上手去做，毕竟磨刀不误砍柴工。</p><p>今天是2017年的最后一天了，就将本文作为今年的收官之作吧。最后，祝大家在新的一年里，开开心心、平平安安，每天都能有所进步！</p><p><img src="https://ws1.sinaimg.cn/large/aa2320a8ly1fmzzz1urulj20dc06odfz" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;作为一个一本正经的大数据公司，Helium亟需一个平台HAN(Helium Analytical Network)，它涵盖数据完整的生命周期
      
    
    </summary>
    
      <category term="d3" scheme="http://zhihaozhang.github.io/categories/d3/"/>
    
    
      <category term="随感" scheme="http://zhihaozhang.github.io/tags/%E9%9A%8F%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>谷歌开发者大会(GDD2017)见闻 Day2</title>
    <link href="http://zhihaozhang.github.io/2017/12/17/googleDevDay2/"/>
    <id>http://zhihaozhang.github.io/2017/12/17/googleDevDay2/</id>
    <published>2017-12-17T09:06:38.000Z</published>
    <updated>2017-12-25T07:30:55.308Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fmt1rm8dkpj30zk0nptb6.jpg" alt=""></p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>上一篇博客写了挺多开发者大会期间的花絮(虽然花絮本身就是开发者大会重要的组成部分)，而在这篇博客里将更专注于session本身，对场外的花絮和花边新闻尽量少的提及。<strong>话不多说，我们开始吧。</strong></p><h1 id="Android-things"><a href="#Android-things" class="headerlink" title="Android things"></a>Android things</h1><p>安卓things是一种支持世界各地计算需求的新平台，其出现的初衷是简化IoT设备的开发和生成。安卓things运行的仍然是安卓系统，因此对安卓开发比较熟悉的朋友可以很快的上手来完成一些应用。</p><p>在现场，演讲者详细演示了如何在大会赠送的Android things设备上进行程序开发。他利用温度传感器和气压传感器开发了一个<a href="bit.ly/codelab-weatherstation">温度计和气压计的应用</a>。开发共分为三个步骤：</p><ol><li>拼装器件Assemble，<a href="https://developer.android.com/things/index.html" target="_blank" rel="external">组装说明</a></li><li>烧构件版本 Flash Android things</li><li>开发应用 Develop Apps, 用Android studio 3.0+</li></ol><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fmt1rnlllcj31400u0443.jpg" alt=""></p><p>例子部分最重要的是学习如何对外围设备进行<strong>输入</strong>、<strong>输出</strong>，怎么让程序知道某个按钮被按下了，怎么样将传感器测得的值显示出来，以及如何整合应用外围设备输入输出库的驱动器。感兴趣的朋友，推荐去<a href="bit.ly/codelab-peripherals">codelab</a>学习一下。codelab也是谷歌极力推荐的一个学习网站，在展区有一个专门的展台，而且越来越多的教程被翻译为了中文，还是挺不错的。</p><h1 id="PWA的框架和工具"><a href="#PWA的框架和工具" class="headerlink" title="PWA的框架和工具"></a>PWA的框架和工具</h1><p>渐进式网页应用(PWA)上篇已经简单的介绍过了，第二天依然有两个session围绕着它展开。首先是PWA的工具，讲者首先介绍了为什么要工具。所谓工具，就是让用户更方便的完成某项工作的东西，节省用户的时间。</p><p>PWA一大特点是节省用户带宽，让浏览器和网页了解你的应用，在默认生成的基础上，如果能帮助用户指定决策就更好了。Chrome在开发者panel中可以看到安装时和安装后的网络请求情况，将运行时的网络请求可视化，从而对用户制定缓存策略产生一定建议。</p><p>在构建PWA时，他介绍的通用工具是Workbox这个JavaScript库作为<strong>创建、测试、体验</strong>Service Worker的工具集合。接下来他介绍了PWA和Vue、react、Angular等流行框架的CLI如何结合使用，主要是如何基于json进行配置。</p><h1 id="TensorFlow"><a href="#TensorFlow" class="headerlink" title="TensorFlow"></a>TensorFlow</h1><p>TensorFlow真是火，如果说去年的GDD主角是Angular，那么今年的主角无疑是TF。从分会场排的长龙以及增加的场次，不难反映谷歌的策略已经从<strong>Mobile First 转为了 AI First</strong>。这个session依然是金安娜全程用中文来介绍的，虽然有时候结结巴巴的，但还是坚持了下来。这个session主要是广告，说TF怎么受欢迎、TF在医学领域取得了成功(超过了很多年经验的医生)、AlphaGo战胜了世界顶级围棋选手。TF支持了更多的硬件平台，包括CPU、GPU、Cloud TPU甚至安卓、ios、Android things。最后简短的带过了TF的架构。</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fmt1roixr5j30x40n2gpq.jpg" alt=""></p><blockquote><pre><code>TensorFLow架构图 </code></pre></blockquote><h1 id="ARCore"><a href="#ARCore" class="headerlink" title="ARCore"></a>ARCore</h1><p>作为有望与人工智能抢风头的AR，自然也是本次大会的一个亮点，ARCore这个session由负责技术与用户体验的两个人来共同完成。</p><p>首先是技术人员上台演讲，他介绍了沉浸式计算的发展历史，随后介绍了ARCore的发布量:<strong>100,000,000</strong>. 介绍了ARCore的新特性,即<strong>环境识别</strong>和<strong>光线估测</strong>。</p><p>随后是负责用户体验的工程师上台演讲，她介绍了在展区看到用户还是很习惯性地去用两个手指Zoom in 和 Zoom out，而不是尝试去移动摄像头和模型进行交互，当用户葛优躺在沙发上的时候会比较懒惰，更不会去移动身体离开舒适区。<strong>她建议，在程序内给予用户明确的提示或合理的理由，让用户进行移动。</strong></p><p>随后舞台交还给技术工程师，他宣布了chrome将支持ARKit和ARCore的大新闻。我觉得这个才是对于AR的重大利好，因为很多年轻人都不会愿意购买头显，买了的也很可能不会随身携带，更别提父母辈的中老年人了。而如果Chrome支持了AR，那么无疑将大大降低AR的使用门槛。<a href="https://developers.google.cn/ar/" target="_blank" rel="external">教程链接</a></p><p>关于ARCore框架本身，分成了四个部分来介绍。</p><ol><li>跟踪状态</li><li>平面</li><li>特征点</li><li>光估测</li></ol><p>跟踪状态指的是无论你摄像头怎么动，模型也会跟着进行一定的角度和位置变换来欺骗人眼，以为模型真的就更场景融合到了一起，这一过程也叫偏移校正。这里需要提到的是<strong>锚点</strong>的概念，即AR的对象添加的实际的对象时指定的位置。</p><p>另一个概念是平面，这需要一定的时间来进行检测，跟ARKit一样，也是采取的用若干特征点确定一个平面的方式，我们都是知道三个点可以确定一个面，这里采用多个点可能是从计算的效率方面出发的，快速确定平面以及平面的边界。当然，平面的多个平面也是可以同时检测到的。<br><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fmt1rqsf9gj31fk0lmb29.jpg" alt=""></p><p>光线检测的例子让我印象比较深刻，它采用的是一头狮子，当灯关闭后，似乎被惊吓到了，然后跳了起来，对检测光线从亮到暗这一过程的诠释简直完美。<a href="https://developers.google.cn/ar/" target="_blank" rel="external">视频地址</a>。</p><h1 id="Android-Oreo"><a href="#Android-Oreo" class="headerlink" title="Android Oreo"></a>Android Oreo</h1><p>Android 8.0版本名是奥利奥(流口水),不可避免的也在本次大会上开了几个session，由于我不是安卓开发者，所以在选择分会场的时候，基本都避开了这个主题，但由于某些分会场人多到进不去了，又不想浪费时间，也零零散散的听了一些。</p><p>首先是Android Studio的更新，可以帮助用户分析并提升应用的性能，也是采用的可视化的方式，将<strong>网络请求</strong>、<strong>CPU使用率</strong>、<strong>内存管理</strong>等控制用户体验核心的一些指标按<strong>时间序列</strong>进行了可视化，从而用户可以方便的看到，在哪些时间点资源的消耗比较明显，从而进入到相关函数内部进行优化。现场举了一个内存管理失误并修正的例子。</p><p>后面听了半场用架构组件来写安卓应用的session，在Angular里，组件的好处就挺多的，例如：</p><ul><li>让应用更加健壮</li><li>易于测试团队进行测试</li><li>可维护性提升了不少</li><li>耦合程度低，适合团队开发等等</li></ul><p>这里她重点介绍了安卓组件里的两大特点：可被观察、可感知生命周期。可被观察类似观察者模式，可以带来的好处是关联了生命周期、避免内存泄漏。以持久化数据Room组件为例，它带来的好处包括：</p><ul><li>减少了样板代码</li><li>查询结果转化为JAVA对象</li><li>编译时验证SQL语句</li><li>查询结果可被观察</li></ul><p>由于没有听全，加上对安卓开发没有基础，这里只能丢出一些链接供感兴趣的读者参考：</p><p><a href="https://developer.android.com/topic/libraries/architecture/adding-components.html" target="_blank" rel="external">开发者频道</a><br><a href="https://github.com/googlesamples/android-architecture-components" target="_blank" rel="external">GitHub例子</a><br><a href="http://www.jianshu.com/p/29e5e8c75450" target="_blank" rel="external">简书</a></p><blockquote><p>一句话总结安卓这个我不了解的领域：谷歌在帮助程序员来优化他们的应用：自动检测将资源用量进行可视化，甚至是帮助用户分析即将离开应用的用户，增加用户粘性；组件化开发降低开发安卓应用的难度和速度。</p></blockquote><h1 id="未来网络的潮流"><a href="#未来网络的潮流" class="headerlink" title="未来网络的潮流"></a>未来网络的潮流</h1><p>这个session的标题很宽泛，是对未来趋势的一个预测，这个话题还蛮有意思的。</p><h2 id="新API"><a href="#新API" class="headerlink" title="新API"></a>新API</h2><p>演讲者是个德国人，他认为以后的web应用应该以全屏PWA为主，现在已经可以将display属性设为”fullscreen”从而将手机顶部的时间、蓝牙、wifi信息掩盖掉，配合现在的全面屏手机，营造出一种沉浸感。</p><p>第二点他谈到了网络推送通知已经可以和原生的应用一样，举了一个macOS里通知中心的例子。它遵循macOS系统勿扰模式的设置规则，更好地与平台集成。</p><p>接下来是PWA的一大优势：<strong>service worker导航预加载</strong>，利用这个功能，在用户发出GET导航请求的同时，系统在Service Worker启动的同时启动网络请求。虽然这无法避免启动延迟，但却可以消除网络请求受阻的限制，让用户能更快获取到想要的内容。</p><p>接下来是<strong>一键注册</strong>的API，使用Google电子邮件地址创建账号。支持使用之前选择的信息实现回访用户自动登录。<a href="https://developers.google.com/identity/one-tap/web/" target="_blank" rel="external">介绍链接</a></p><p><strong>存储空间估测</strong>方面，开发者经常遇到这个问题：存储空间是否还够支持下一个操作？选择这个问题得到了解决.<a href="https://developers.google.com/web/updates/2017/08/estimating-available-storage-space" target="_blank" rel="external">API链接</a></p><p><strong>Image Capture API</strong>，利用这个API，可以捕捉静止图像，以及配置相机的硬件设置。<a href="https://developers.google.com/web/updates/2016/12/imagecapture" target="_blank" rel="external">API链接</a></p><p><strong>Shape Detection API</strong>，用来检测面孔、读取条形码甚至进行光学字符识别(也就是常说的OCR)功能。<a href="https://wicg.github.io/shape-detection-api/" target="_blank" rel="external">API链接</a></p><p><strong>Media Capabilities API</strong>，这个API让媒体在流畅播放的同时实现高能效。通过获取与设备解码功能相关的更多信息，帮助开发者在为用户选择媒体流时候做出最佳决策。比如为好一些的手机设置1080p甚至4k的媒体流，为千元机设置480p的媒体流。<a href="https://wicg.github.io/media-capabilities/" target="_blank" rel="external">API链接</a></p><p><strong>NetInfo</strong>是为了完善上面的API设置的。主要是检查手机的网络，如果支持retina显示的屏幕，但是目前只有2G，也选择非高清的媒体流。<a href="https://wicg.github.io/netinfo/" target="_blank" rel="external">API链接</a></p><p><strong>WebVR</strong>，一种开放标准，将虚拟现实的体验带到浏览器中。<a href="https://immersive-web.github.io/webvr/" target="_blank" rel="external">参考链接</a></p><p><strong>Navigation Timing API</strong>,获取设备总体性能的API，比如网页的render耗时、网页加载耗时、网页连接耗时等。同样是为了针对不同用户给出不同媒体流的一个判断。<a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance" target="_blank" rel="external">API链接</a></p><h2 id="JavaScript新用法"><a href="#JavaScript新用法" class="headerlink" title="JavaScript新用法"></a>JavaScript新用法</h2><p><strong>动态模块导入</strong>，延迟加载JavaScript代码，在需要的时候动态加载代码，提升用户体验，提升应用性能，类似于Swift里的懒加载。</p><p><strong>异步生成器函数</strong>，简化流式传输数据的消耗。可用于for-of循环以及通过异步迭代器工厂创建自定义异步迭代器。</p><p><strong>Promise中的Finally方法</strong>，确保系统无论在啥情况下都执行需要的操作，无论Promise最终是被接受还是拒绝。</p><h2 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h2><p><strong>web蓝牙</strong> 与附近的蓝牙设备进行通信，目前只在chrome中得到了部分实现，后续还需等待。<a href="https://developers.google.com/web/updates/2015/07/interact-with-ble-devices-on-the-web" target="_blank" rel="external">API链接</a></p><p><strong>web USB</strong> 专为网络设备设计的访问控制，仅限于HTTPS，且必须由用户启动。同样，目前只在chrome中得到了部分实现，后续还需等待。<a href="https://developers.google.com/web/updates/2016/03/access-usb-devices-on-the-web" target="_blank" rel="external">API链接</a></p><h1 id="为十亿用户打造产品"><a href="#为十亿用户打造产品" class="headerlink" title="为十亿用户打造产品"></a>为十亿用户打造产品</h1><p>最后一个session，是讲用户体验的，题目也起的非常之大，为十亿用户打造产品。演讲者是一个印度工程师，体重跟十亿这个数字很配(逃~)。</p><p>当用户的量级达到1，000，000，000人时，通常意味着用户来自世界各地，有着完全迥异的背景和文化，甚至各个国家之间的基础建设差异也很大。在现场，印度小哥列举的例子是各个国家之间的网速差异，发达国家网速比发展中国家网速快了50倍，而网速达到4Mbps以上的用户所占比例差异也很大，在越南。委内瑞拉这些国家，占比可能不到1%;上网的费用方面，越南人收入的8%需要花在流量上。可能那些国家的大部分人还在我们十几年前1M流量10元的GPRS时代吧。在这种情况下，需要根据用户设备的移动网速和连接质量的差异量身定制App。</p><p>讲者从五个方面提供了优化应用产品的建议：</p><ol><li>连接</li><li>设备能力</li><li>流量费用</li><li>电池消耗</li><li>内容</li></ol><p>关于优化<strong>网络连接</strong>，他给出的建议是规定流量的有限顺序，即<strong>文本优先</strong>法则。图片还没加载完，有了文字，应用看起来至少是可用的。第二点是<strong>网络请求去重</strong>，网络请求不应该重复和频繁；第三点是根据网络连接性能调整行为，就是上文提到的2G网络环境下和wifi环境下所请求到的流媒体质量应该是不同的。</p><p>关于<strong>图像</strong>，他建议适宜时提供SVG，否则提供webP图像。SVG是矢量图，在任何分辨率小可以不失真，而且体量很小。动态图一般比较大，最好告知用户动态图大小。当然他也提到了PWA的离线缓存体验，不至于在网速慢或没网的时候，让用户感觉到应用不可用(虽然确实不可用)。</p><p>在构建应用的时候，也需要专门为<strong>中小屏幕</strong>构建，针对中低密度屏幕进行优化，并通过模拟器配置进行测试。</p><p><strong>内存</strong>作为一种重要的资源，他鼓励应用应该按可用的RAM调整占用的空间，避免长时间运行的进程。而上文提到的Android Studio内存监视器可以帮助开发者做到这一点。</p><p>APK安装包的大小跟流量很相关，而其中图像消耗的流量最多。压缩APK文件，他推荐使用<strong>ProGuard</strong>降低代码大小，并在build.gradle中将<strong>多APK</strong>作为一个选项。同时，数据流量的使用也是可以在Android Studio中看到的。而且应该赋予用户选择的权力，比如网易云音乐就允许用户选择仅在wifi可用时下载歌曲。</p><p><strong>电池消耗</strong>方面，应用避免不必要的唤醒，比如GPS定位，这个服务就挺耗电的，不要在后台一直使用。网络请求最好使用批处理的方式，有利于节能。当然也非常推荐使用他们家的<strong>Firebase JobDispatcher</strong>。</p><p><strong>快速自适应式界面</strong>方面，他鼓励处处提供触摸反馈，按了按钮之后，即使需要等一会儿，由于有反馈告诉用户确实按下去了，他们通常愿意等一会儿。第二点是界面需要始终处于可交互的状态，也就是安卓主线程中，不应该处理其他事务，因为有可能会造成UI的卡顿。UI刷新率，始终要达到60fps，才会给人流畅的感觉。关于<strong>界面</strong>的最佳做法，当然是符合谷歌的<strong>Material Design</strong>咯。</p><p><strong>本地化方面</strong>，他谈到大部分开发者考虑到了提供给用户多语言环境的支持，但是往往忽略的一点是<strong>字体</strong>的选择，某些字体在某些国家的文字下很不适合阅读。</p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>知乎曾经有个问题是百度曾经做过哪些恶，他有个镜像问题是：谷歌都做了哪些恶。一个高赞的回答是：退出中国大陆市场。转眼间，搜索服务离开大陆已经快8年了，希望谷歌搜索和其他一些Service能和AI一样早点回来吧。</p><p>今年的谷歌开发者大会算是结束了，每个session都只有30分钟，仅仅是一个开始，后面的研究和使用还得靠台下的开发者，希望本文中的参考链接对大家有所帮助！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tKfTcgy1fmt1rm8dkpj30zk0nptb6.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
      <category term="随感" scheme="http://zhihaozhang.github.io/categories/%E9%9A%8F%E6%84%9F/"/>
    
    
      <category term="随感" scheme="http://zhihaozhang.github.io/tags/%E9%9A%8F%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>谷歌开发者大会(GDD2017)见闻 Day1</title>
    <link href="http://zhihaozhang.github.io/2017/12/15/googleDevDay/"/>
    <id>http://zhihaozhang.github.io/2017/12/15/googleDevDay/</id>
    <published>2017-12-15T08:33:41.000Z</published>
    <updated>2017-12-25T07:30:55.310Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fmt1rru189j30zk0nptb6.jpg" alt=""></p><h1 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h1><p>双12晚上，我一改之前晚睡的习惯，罕见的在晚上12点之前入睡了。为了第二天早上8：30的谷歌开发者大会。</p><h1 id="出发到达会场、注册"><a href="#出发到达会场、注册" class="headerlink" title="出发到达会场、注册"></a>出发到达会场、注册</h1><p>第二天早上7点15就洗漱完毕出门了。7点多的地铁并没有想象中那么空荡，依然挤满了人，真庆幸自己住的离公司很近，不需要经历上班早高峰的洗礼。一出地铁站，就看到了举着牌子的GDD工作人员，要知道这里离会场还有1.5km左右的距离。解锁了一辆小黄车，几乎在每个路口都能看到指路的工作人员，真的很贴心。</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fmt1rsgspjj31400u0jxe.jpg" alt=""></p><p>来到会场的时候,注册的开发者已经排起了长队，时间为早上8：30。注册完领取了印有日程和场地介绍的胸牌、一个供开发者DIY的纸盒音箱和很多人喜欢的谷歌信仰贴纸。随后跟随大部队进入了主会场。</p><h1 id="主会场的开幕式和主题演讲"><a href="#主会场的开幕式和主题演讲" class="headerlink" title="主会场的开幕式和主题演讲"></a>主会场的开幕式和主题演讲</h1><p>在主会场幸运的坐到了第一排，视角挺不错的。由于开场之前还有挺长时间的，现场工作人员借机推广了一波GIORGIO CAM，一个识别照片中的物体，然后唱出一段rap的应用。由现场工作人员通过直播摄像头识别观众举起的物体，刚开始的时候，大部分还是手机、手表、纸币等物体，基本可以识别出来，后面慢慢的画风不对了，变成了香烟、化妆刷一类的东西，识别基本是不成功的。</p><p>时间终于来到了9：30，大会正式开幕的时间。首先是一段非常燃的开场舞，通过将文字投影到舞者手里的白板上和现场观众打招呼，一度将现场气氛带到高潮。</p><p>暖场舞过后是领导讲话，有谷歌的产品总监与谷歌大中华区的总裁石博盟，他们的中文都说的很6，似乎很愿意通过中文拉近与中国开发者的距离。他们介绍了本次开发者大会的举办初衷和谷歌对中国的重视等等，值得一提的是安卓年度最佳应用前100里有13个中国团队，可见中国市场的重要性。</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fmt1rtoh4aj31400u0dj7.jpg" alt=""></p><p>各个项目的经理/负责人也一一上台介绍了各自的项目，并邀请大家在接下来的分会场活动中去他们的场次中详细了解。给我留下印象比较深的是一个叫金安娜的女孩，她全程用中文演讲，而且据她自己说这是她第一次来到中国。</p><p>大约10点左右，AI专家李飞飞教授从场馆右侧进入了第一排，恰好从我面前经过，给我的感觉是连走路都是这么的雷厉风行。轮到她上台演讲的时候，台下的欢呼声很高，足见她的人气和AI的人气之高。在之后的演讲中，她果然宣布了大新闻————谷歌在北京成立了中国地区的AI研究中心。并由她亲自带领，这是继美国和欧洲之外，在全球成立的第三个AI研究中心。<strong>毫无疑问，中国有巨大的机遇和适合AI的丰富使用场景，只有这种使用场景极其丰富的地方，人工智能才能得到更好的发展。</strong> 同时，中国搞人工智能研究的科研人员也是非常多的，据李飞飞教授说，AAAI2015所收录的论文中，45%有华人的身影。</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fmt1rupiegj31400u0adg.jpg" alt=""></p><h1 id="场馆外的展区、礼物及其他"><a href="#场馆外的展区、礼物及其他" class="headerlink" title="场馆外的展区、礼物及其他"></a>场馆外的展区、礼物及其他</h1><p>茶歇时间，来到主会场外。有很多展区，每个展区都有一线谷歌工程师，据他们说是被拉壮丁到了现场介绍各个项目的。但可惜的是他们并不一定是做他们介绍的项目的，所以关于项目的很多情况他们也不是特别了解，不过能跟他们交流能了解到谷歌的工作方式和谷歌中国里一些不会公布的小道消息，也蛮不错的。在Iot展台，我领到了一张换取Android Things的物联网开发套件。</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fmt1rvitagj30u01400v5.jpg" alt=""></p><p>我看这东西有触摸屏，有很多传感器，觉得这东西怎么得值个80刀吧，结果网上一搜，售价$169，而且每个人都可以领一份。看来我真的是被贫穷限制了想象力。在现场，他们展示了两个利用这套开发套件的项目，一个是利用TensorFlow识别图片的应用，它不仅可以识别出照片是一只狗，还能识别出狗的品种；还有一个是拍一张人像后利用黑笔将人像的轮廓画到一张白纸上的应用，都挺有想法的。</p><p>TensorFlow那个项目是<a href="https://github.com/androidthings/sample-tensorflow-imageclassifier" target="_blank" rel="external">开源</a>的，同时该项目下还有很多其他有趣的开源项目。</p><p>VR和AR的展台排队非常长，由于我对这个领域相对熟悉，并没有体验，只是看了一下ARCore在安卓手机上的运行情况，给我的感觉是跟苹果的ARKit在流畅性上还是有一些差距的，不知道是不是硬件的原因。</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fmt1rxe8sdj31400u0acs.jpg" alt=""></p><p>展区外还有很多填写调查问卷换取各种贴纸、玩偶、布娃娃、T-shirt、钥匙扣等带有谷歌元素的礼物。不过我参加的并不是很多，因为排队的人实在是太多了。扫描胸牌背后的反馈表填写反馈，赠送一个电脑包，质量还不错。</p><p>茶歇提供了蛋糕和咖啡饮料，可以在天台和其他人自由搭讪。第一天的天气很不错，我和一个在金融公司做交易平台的开发者简单交流了十分钟，了解了她们使用的技术栈和金融公司开发软件的流程，总体还是很愉快的。</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fmt1rzt672j31400u0gqi.jpg" alt=""></p><h1 id="分会场活动"><a href="#分会场活动" class="headerlink" title="分会场活动"></a>分会场活动</h1><p>接下来的活动是几个会场同时进行的，意味着观众不得不进行取舍。我主要听了渐进式网页应用和Firbase相关的一些session，避开了相对更火热的android和TensorFlow。接下来简短地介绍一下我对各个分会场活动的见闻和感想，session的<a href="http://www.google.cn/intl/zh-CN/events/developerdays2017china/agenda/" target="_blank" rel="external">日程链接</a>。</p><h2 id="渐进式网页应用PWA"><a href="#渐进式网页应用PWA" class="headerlink" title="渐进式网页应用PWA"></a>渐进式网页应用PWA</h2><p>渐进式网页应用 (PWA) 集网络和应用之优势于一身，带来非凡的体验。PWA 网页的加载速度快，其通知功能有助于重新吸引用户，同时还具备通常只有本机应用才具备的其他特性。重点介绍了Service Worker的工作机制、生命周期，如何配置manifest文件使用PWA，渐进式网页应用的优势等等。渐进式网页的出现主要是为了改进用户体验，相比于传统网页，在离线状况下依然可用。</p><p>有用的一些URL：</p><ul><li><a href="https://goo.gl/9DJRJq" target="_blank" rel="external">您的第一个Progressive Web app</a></li><li><a href="https://goo.gl/suGNRb" target="_blank" rel="external">调试Service Worker</a></li><li><a href="https://goo.gl/QRLk5i" target="_blank" rel="external">网络推送通知</a></li><li><a href="https://goo.gl/dxWGdP" target="_blank" rel="external">利用PaymentRequest API实现无缝付款</a></li></ul><h2 id="Firebase"><a href="#Firebase" class="headerlink" title="Firebase"></a>Firebase</h2><p>Firebase也是为用户体验而生的，在现场演讲者结合Google Cloud Platform从头开始构建了一个翻译工具的应用，给我最深的印象是可以不需要建立服务器，同时使用 Firebase 构建应用很简单，使用 Google Cloud Platform 拓展体验很容易。</p><p>下午的讲座中，介绍了Firebase的新特性，印象比较深刻的有：</p><ul><li>A/B testing，将用户群体分类，然后分组进行测试。</li><li>Firebase预测，将即将要弃坑的用户找出来，然后针对他们采取一些行动，比如送装备等。演讲者说，这个功能帮助切西瓜应用留下了20%即将要叛逃的用户，记得很清楚，他用的是<strong>用户粘度</strong>这个词。</li><li>动态链接(Dynamic Links)，使用smart url让现有和潜在用户分享应用内容和链接内容。</li><li>自动崩溃报告方案分类，包含了一定的分析。</li><li>性能监控控制台，可视化的方式监控应用，对性能的提升有一定帮助。</li></ul><p>有用的一些URL：</p><ul><li><a href="https://firebase.google.cn" target="_blank" rel="external">Firebase 网站</a></li><li><a href="https://github.com/mimming/zero-to-app-universal-translator" target="_blank" rel="external">Github代码段</a></li></ul><h2 id="H5游戏市场的前景与变现"><a href="#H5游戏市场的前景与变现" class="headerlink" title="H5游戏市场的前景与变现"></a>H5游戏市场的前景与变现</h2><p>这个session是采用的采访的形式(感觉采访的问题都是提前准备好的)，被采访者是白鹭科技的CEO，他介绍了他之前比较成功的三个项目，以及与谷歌的合作。</p><p>关于游戏的现状，他谈到了两个方面：</p><ul><li>市场方面，2017年H5游戏用户数量超过了3.5亿，游戏市场容量约60亿，相比比喻2014年增长了120倍。</li><li>技术方面，白鹭有自己的游戏引擎，2D渲染能力、跨平台能力提升明显，4k 60fps无压力。</li></ul><p>后面还介绍了一些游戏案例，让我比较震惊的是h5页面居然可以做出童年非常痴迷的传奇那样的大型游戏了。介绍了如何在网页端“优雅的”嵌入广告的三种方式。他指出，游戏的变现方式已经不再是以前那样几乎全靠内购了，很大一部分靠广告，而广告用谁的服务呢？当然是谷歌了，哈哈哈…</p><h1 id="午餐晚宴结束语"><a href="#午餐晚宴结束语" class="headerlink" title="午餐晚宴结束语"></a>午餐晚宴结束语</h1><p>午餐和晚宴都是采用的自助式，吃的还不错，有水果、时蔬和肉、鱼供应，喝的提供的是可乐与橙汁。晚宴相比于中午，添加了乐队的表演，现场也有很多诸如桌上足球、拳皇游戏机、投篮机等丰富多彩的活动，气氛还是不错的。</p><p>第一天就这样结束了，应该说，由于分会场的session都只有30分钟（通常前几分钟是谷歌的广告），对某个技术只能起一个头，接下来的进一步学习需要放到线下，文中给出的链接供感兴趣的读者参考。</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fmt1s15m2sj31400u041a.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcgy1fmt1rru189j30zk0nptb6.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Day-0&quot;&gt;&lt;a href=&quot;#Day-0&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="随感" scheme="http://zhihaozhang.github.io/categories/%E9%9A%8F%E6%84%9F/"/>
    
    
      <category term="随感" scheme="http://zhihaozhang.github.io/tags/%E9%9A%8F%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>拓扑图的实现</title>
    <link href="http://zhihaozhang.github.io/2017/10/18/topology/"/>
    <id>http://zhihaozhang.github.io/2017/10/18/topology/</id>
    <published>2017-10-18T07:31:13.472Z</published>
    <updated>2017-12-25T07:30:55.299Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>拓扑图是Console界面中一个重要的组成部分，它的愿景是我公司Console平台相比于其他公司相同平台的创新之处。这个部分一直是由我来负责，从开始的高度抽象派图形化图，到后面创新性的引入Radial-layout，到这轮迭代返璞归真的<strong>Tree-layout</strong>信息展示，几经迭代，感慨良多。很多时候都要跟设计师死磕，在他的想法与技术之间找到一个权衡点。本文作为本轮迭代的一个小小总结，也作为API文档的供其他同事参考。也因为要作为API文档，因此本文会深入到代码级讲述每段代码甚至函数和关键变量的作用。</p><div align="center"><br><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fmt1r9awjvj315a0yo79x.jpg" alt=""><br>早期版本的拓扑图<br></div><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>拓扑图的目标是利用图形化的方式<strong>清晰地</strong>展示集群内<em>App、Service、Deployment、Pod、Storage</em>之间的关系，并提供交互手段给用户动态的增减Pod，查看某部分的Detail信息等。</p><h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p>最新版本的拓扑图效果如下图所示:</p><div align="center"><br><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fmt1rak9klj31kw16ctoy.jpg" alt=""><br>最新版本的拓扑图<br></div><p>请注意，图片中除了后期加上的说明文字和边框外，其他的一切元素都是使用<a href="https://d3js.org" target="_blank" rel="external">d3.js</a>这个库绘制上去的，包括其中的文字。</p><p>从总体上看，拓扑图由三个部分组成，分别是顶部的<strong>样例说明区</strong>、主体部分的<strong>信息展示区</strong>、右上角的<strong>细节信息展示区</strong>。画布名称是vis,这是一个很关键的全局变量。</p><h2 id="样例说明区"><a href="#样例说明区" class="headerlink" title="样例说明区"></a>样例说明区</h2><p>和另外两个部分不同，样例说明区是<strong>静态</strong>的，不会因为不同的App而变化。因此这个部分相对简单，涉及到的代码也不是很多。主要的实现方式是首先绘制一个无边框的圆角矩形放置在底部，然后用代码控制圆圈和相应文字的间隔和类型。类型是为了方便将css样式应用到图形上做的准备。核心代码如下：</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">     vis.append(<span class="string">'rect'</span>)</div><div class="line">      .attr(<span class="string">'x'</span>,<span class="number">-18</span>)</div><div class="line">      .attr(<span class="string">'y'</span>,<span class="number">-30</span>)</div><div class="line">      .attr(<span class="string">'rx'</span>,<span class="number">5</span>)</div><div class="line">      .attr(<span class="string">'ry'</span>,<span class="number">5</span>)</div><div class="line">      .attr(<span class="string">'width'</span>,<span class="number">4</span>*<span class="number">180</span>+<span class="number">120</span>)</div><div class="line">      .attr(<span class="string">'height'</span>,<span class="number">30</span>)</div><div class="line">      .attr(<span class="string">'stroke'</span>,<span class="string">'none'</span>)</div><div class="line">      .style(<span class="string">'fill'</span>,<span class="string">'#f0f0f0'</span>);</div><div class="line">      </div><div class="line"> <span class="keyword">var</span> exampleData = [<span class="string">'App'</span>,<span class="string">'Service'</span>,<span class="string">'Deployment'</span>,<span class="string">'Pod'</span>,<span class="string">'Storage'</span>];</div><div class="line">  <span class="keyword">var</span> example = vis.selectAll(<span class="string">'.example'</span>).data(exampleData).enter().append(<span class="string">'g'</span>);</div><div class="line">     </div><div class="line">      example.append(<span class="string">'circle'</span>)</div><div class="line">      .attr(<span class="string">'cy'</span>,<span class="number">-15</span>)</div><div class="line">      .attr(<span class="string">'cx'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="number">180</span>*(i);</div><div class="line">      &#125;)</div><div class="line">          .style(<span class="string">'fill'</span>,<span class="string">'#fff'</span>)</div><div class="line">      .attr(<span class="string">'r'</span>,<span class="number">7</span>)</div><div class="line">      .attr(<span class="string">'class'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;</div><div class="line">      <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</div><div class="line">          <span class="keyword">return</span> <span class="string">'app'</span></div><div class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i ==<span class="number">1</span>)&#123;</div><div class="line">          <span class="keyword">return</span> <span class="string">'service'</span></div><div class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i ==<span class="number">2</span>)&#123;</div><div class="line">          <span class="keyword">return</span> <span class="string">'deployment'</span></div><div class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i ==<span class="number">3</span>)&#123;</div><div class="line">          <span class="keyword">return</span> <span class="string">'pod'</span></div><div class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i ==<span class="number">4</span>)&#123;</div><div class="line">          <span class="keyword">return</span> <span class="string">'storage'</span></div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="string">'unclear'</span></div><div class="line">      &#125;</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">example.append(<span class="string">"text"</span>).attr(<span class="string">'class'</span>,<span class="string">'exampleTEXT'</span>).attr(<span class="string">"x"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>) </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="number">180</span>*i+<span class="number">10</span></div><div class="line">      &#125;).attr(<span class="string">"y"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="number">-15</span>;</div><div class="line">      &#125;).attr(<span class="string">"dy"</span>, <span class="string">".35em"</span>).attr(<span class="string">"text-anchor"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="string">"start"</span>;</div><div class="line">      &#125;).text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">          <span class="keyword">return</span> d;</div><div class="line">      &#125;).style(<span class="string">"fill-opacity"</span>, <span class="number">1</span>);</div></pre></td></tr></table></figure></code></pre><h2 id="主体信息展示区"><a href="#主体信息展示区" class="headerlink" title="主体信息展示区"></a>主体信息展示区</h2><p>主体信息的展示是拓扑图的核心部分。各个组件的数量会有很大的变化范围，这也是我们弃用老版本拓扑图的原因。坦率的讲，老版本的拓扑图是比较美观的、图形化的，但是遇到的核心问题是当某些组件数量过大时，容易引起大量的重叠问题，造成整个系统不work了。</p><p>而这个版本的拓扑图得益于d3提供的Tree布局方式，比较好的解决了这个问题。它会根据用户指定的画布宽高，算出最适合的布局方式，即每个点应该放置在哪里。</p><p>Tree-layout接受的数据形式如下图所示：</p><div align="center"><br><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fmt1rbeflhj31bg0cimza.jpg" alt=""><br>Tree-layout接受的数据格式<br></div><p>我们backend提供的json文件与要求的数据格式有较大的差别，下面比较恶心的代码的功能是利用循环将后端提供的json文件转化成Tree-layout需要的格式。在转换过程中，为了实现深拷贝功能，实现了<strong>deepClone</strong>函数，为方便起见，用了JSON的stringfy和parse方法编码解码。</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">d3.json(<span class="string">"topologyRaw.json"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error, data</span>) </span>&#123;</div><div class="line">     <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</div><div class="line"></div><div class="line">     <span class="keyword">var</span> jsonData = &#123;<span class="attr">name</span>:<span class="string">"nil"</span>,<span class="attr">children</span>:<span class="keyword">new</span> <span class="built_in">Array</span>()&#125;;</div><div class="line">     apps = data.app;</div><div class="line">     storages = data.storages;</div><div class="line">     services = data.services;</div><div class="line">     deployments = data.deployments;</div><div class="line"></div><div class="line">     <span class="keyword">var</span> tmpDeployment;</div><div class="line"></div><div class="line">     jsonData.name = data.app.name;</div><div class="line"></div><div class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span> ;i&lt;services.length;i++)&#123;</div><div class="line">         <span class="keyword">var</span> service = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">         <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;deployments.length;j++)&#123;</div><div class="line">             <span class="keyword">var</span> deployment = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">             <span class="keyword">if</span>(contains(deployments[j][<span class="string">"selector"</span>][<span class="string">"matchLabels"</span>],services[i][<span class="string">"selector"</span>]))&#123;</div><div class="line">                 <span class="keyword">var</span> pod = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">                 <span class="keyword">for</span>(<span class="keyword">var</span> k=<span class="number">0</span>;k&lt;deployments[j][<span class="string">"pods"</span>].length;k++)&#123;</div><div class="line">                     <span class="keyword">var</span> storage = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">                     <span class="keyword">for</span>(<span class="keyword">var</span> m=<span class="number">0</span>;m&lt;deployments[j][<span class="string">"pods"</span>][k][<span class="string">"storageNames"</span>].length;m++) &#123;</div><div class="line">                         <span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="number">0</span>; n &lt; storages.length; n++) &#123;</div><div class="line">                             <span class="keyword">if</span>(deployments[j][<span class="string">"pods"</span>][k][<span class="string">"storageNames"</span>][m]==storages[n][<span class="string">"storageName"</span>]) &#123;</div><div class="line">                                 <span class="keyword">if</span>(storages[n].unshared==<span class="literal">true</span> &amp;&amp; storages[n][<span class="string">"storageType"</span>]==<span class="string">"HostPath"</span>)</div><div class="line">                                 &#123;</div><div class="line">                                     <span class="keyword">for</span>(<span class="keyword">var</span> q=<span class="number">0</span>;q&lt;storages[n][<span class="string">"hostpathInfo"</span>].length;q++)</div><div class="line">                                     &#123;</div><div class="line">                                         storage.push(&#123;</div><div class="line">                                             name: storages[n][<span class="string">"storageName"</span>],</div><div class="line">                                             size: storages[n][<span class="string">"hostpathInfo"</span>][q][<span class="string">"amountBytes"</span>]</div><div class="line">                                         &#125;)</div><div class="line">                                     &#125;</div><div class="line">                                 &#125;</div><div class="line">                                 <span class="keyword">else</span>&#123;</div><div class="line">                                     storage.push(&#123;</div><div class="line">                                         name: deployments[j][<span class="string">"pods"</span>][k][<span class="string">"storageNames"</span>][m],</div><div class="line">                                         size: getAmountByStorageName(deployments[j][<span class="string">"pods"</span>][k][<span class="string">"storageNames"</span>][m])</div><div class="line">                                     &#125;)</div><div class="line">                                 &#125;</div><div class="line">                             &#125;</div><div class="line"></div><div class="line">                         &#125;</div><div class="line"></div><div class="line">                     &#125;</div><div class="line">                     pod.push(&#123;<span class="attr">name</span>:deployments[j][<span class="string">"pods"</span>][k].name,<span class="attr">children</span>:deepClone(storage)&#125;);</div><div class="line"></div><div class="line">                 &#125;</div><div class="line">                 tmpDeployment = deployments[j].name;</div><div class="line">             &#125;</div><div class="line">             deployment.push(&#123;<span class="attr">name</span>:(tmpDeployment),<span class="attr">children</span>:deepClone(pod)&#125;);</div><div class="line"></div><div class="line">         &#125;</div><div class="line"></div><div class="line">         jsonData.children.push(&#123;<span class="attr">name</span>:services[i].name,<span class="attr">children</span>:deepClone(deployment)&#125;);</div><div class="line">     &#125;</div><div class="line">     </div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">initalObj</span>) </span>&#123;</div><div class="line">     <span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">     obj = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(initalObj));</div><div class="line">     <span class="keyword">return</span> obj;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></code></pre><h3 id="节点的样式和展开功能"><a href="#节点的样式和展开功能" class="headerlink" title="节点的样式和展开功能"></a>节点的样式和展开功能</h3><p>为了让各个组件的样式满足设计师的严苛要求，需要根据Tree-Layout的depth(深度)进行判断，控制圆形的颜色、说明文字出现的位置<em>（放置位置和对齐方式）</em>。这部分逻辑是在nodeEnter、nodeUpdate和nodeExit相关变量后面指定的。也是凭借这三个变量之间的反差，每次页面刚打开并load的时候，会有一个舒展开的样式，非常美观。</p><div align="center"><br><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fmt1rdf06vg31hc1kwhdu.gif" alt=""><br>展开的过程<br></div><h3 id="节点的开关功能"><a href="#节点的开关功能" class="headerlink" title="节点的开关功能"></a>节点的开关功能</h3><p>同样，展开后，后期依然可以控制某个节点的子节点的开合状态，点击某个节点，它的子节点所包含的元素会以动画的形式收缩进它的位置，该节点的中心部分也会由白色变为浅灰色，并且整个布局会相应发生变化。再次点击，会执行相反的操作，收缩进去的部分会再次舒展开。这个逻辑是由toggle和update函数完成的。toggle函数的会将d.children保存到另一个变量_children中，然后将d.children置空(或执行相反操作)，然后调用update函数重新绘制Tree的分支。</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"> toggle = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(d) &#123;</div><div class="line">        <span class="keyword">if</span> (d.children) &#123;</div><div class="line">            d._children = d.children;</div><div class="line">            <span class="keyword">return</span> d.children = <span class="literal">null</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            d.children = d._children;</div><div class="line">            <span class="keyword">return</span> d._children = <span class="literal">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">update = <span class="function"><span class="keyword">function</span>(<span class="params">source</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> duration, link, node, nodeEnter, nodeExit, nodeUpdate, nodes;</div><div class="line">  duration = d3.event &amp;&amp; d3.event.altKey ? <span class="number">5000</span> : <span class="number">500</span>;</div><div class="line">  nodes = tree.nodes(root).reverse();</div><div class="line">  nodes.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> d.y = d.depth * <span class="number">180</span>;</div><div class="line">  &#125;);</div><div class="line">  node = vis.selectAll(<span class="string">"g.node"</span>).data(nodes, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> d.id || (d.id = ++i);</div><div class="line">  &#125;).attr(<span class="string">'id'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> d.name;</div><div class="line">  &#125;);</div></pre></td></tr></table></figure></code></pre><h3 id="增删pod的功能"><a href="#增删pod的功能" class="headerlink" title="增删pod的功能"></a>增删pod的功能</h3><p>增删pod的功能是在每条deployment与pod之间的加入两张预先做好的图片，监听click事件，调用相应的后端API，实现增删的功能。值得注意的是，<strong>圆环形、图片、文字说明</strong>是depolyment的一个g，点击图片默认情况下会造成deployment关闭状态。因此要在click事件中加入<strong>d3.event.stopPropagation();</strong>让点击事件不再向下传播。</p><h3 id="hover高亮效果"><a href="#hover高亮效果" class="headerlink" title="hover高亮效果"></a>hover高亮效果</h3><p>注意到，当鼠标hover到某个元素上时，元素代表的text会高亮，从APP开始经该元素到达storage的路径都将会被高亮。这个部分主要是由highlightOn和highlightOff这两个函数控制的。</p><p>在建立路径的时候，我们给每一段路径都加上一个一个id，由path的起始点到path的终点id+name组成，这样就可以唯一确定该path。</p><blockquote><p>id是： path.link.source-“ + d.parent.name+d.parent.id + “.target-“ + d.name+d.id</p></blockquote><p>hightlightOn函数中，有两个重要的子函数，<strong>parentLine()和childLine()</strong>，这两个函数使用了<strong>递归</strong>的方式寻找从App到该节点和从该节点到storage节点的路径，并给特定路径指定highlight class，或取消该class的影响。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">highlightOn = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> parentLine;</div><div class="line">  parentLine = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (d.parent) &#123;</div><div class="line">      parentLine(d.parent);</div><div class="line">      vis.selectAll(<span class="string">"path.link.source-"</span> + d.parent.name+d.parent.id + <span class="string">".target-"</span> + d.name+d.id).classed(<span class="string">'highlight'</span>, <span class="literal">true</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">  parentLine(d);</div><div class="line"></div><div class="line">  <span class="keyword">var</span> childLine = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">      <span class="keyword">if</span>(d.children &amp;&amp; d.children.length&gt;<span class="number">0</span>)&#123;</div><div class="line">          <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;d.children.length;i++)&#123;</div><div class="line">              childLine(d.children[i]);</div><div class="line">              vis.selectAll(<span class="string">"path.link.source-"</span>+d.name+d.id+<span class="string">".target-"</span>+d.children[i].name+d.children[i].id).classed(<span class="string">'highlight'</span>,<span class="literal">true</span>);</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;;</div><div class="line">  childLine(d);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> update(d);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">highlightOff = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">  vis.selectAll(<span class="string">"path.link"</span>).classed(<span class="string">'highlight'</span>, <span class="literal">false</span>);</div><div class="line">  <span class="keyword">return</span> update(d);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h2 id="detail信息"><a href="#detail信息" class="headerlink" title="detail信息"></a>detail信息</h2><p>Detail的信息，之前的博客中写过了，可以参考前面的<a href="http://zhihaozhang.github.io/2017/10/11/gInSVG/">博文</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;拓扑图是Console界面中一个重要的组成部分，它的愿景是我公司Console平台相比于其他公司相同平台的创新之处。这个部分一直是由我来负责
      
    
    </summary>
    
      <category term="visualization" scheme="http://zhihaozhang.github.io/categories/visualization/"/>
    
    
      <category term="d3" scheme="http://zhihaozhang.github.io/tags/d3/"/>
    
  </entry>
  
</feed>
