<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chih-Hao&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/ee6c42acd9e6fdf6da073aabf58a2ad9</icon>
  <subtitle>骨灰级果粉</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhihaozhang.github.io/"/>
  <updated>2019-03-03T14:09:07.859Z</updated>
  <id>http://zhihaozhang.github.io/</id>
  
  <author>
    <name>Chih-Hao</name>
    <email>zhihaozhang@me.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《Swift必备Tips》读书笔记</title>
    <link href="http://zhihaozhang.github.io/2019/02/20/swifterTips/"/>
    <id>http://zhihaozhang.github.io/2019/02/20/swifterTips/</id>
    <published>2019-02-20T10:51:15.478Z</published>
    <updated>2019-03-03T14:09:07.859Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>本文是对<a href="https://onevcat.com" target="_blank" rel="external">喵神</a>编写的<a href="https://onev.cat/publication/swifter/" target="_blank" rel="external">《Swift必备Tips(第四版)》</a>的读书笔记，内容是我不太熟悉或觉得有用的Swift使用技巧,需要注意的是tips按照我的理解进行了一些<strong>合并和拆分</strong>。</p><p>不断更新中~</p><h1 id="将protocol的方法声明为mutating"><a href="#将protocol的方法声明为mutating" class="headerlink" title="将protocol的方法声明为mutating"></a>将protocol的方法声明为mutating</h1><p><strong>mutating</strong>关键字是用来在方法中修改struct或enum变量的，若不声明会报错。</p><h1 id="多元组Tuple"><a href="#多元组Tuple" class="headerlink" title="多元组Tuple"></a>多元组Tuple</h1><p>一个js中也有类似功能的东西，不适用额外空间完成交换的方式也和js中类似。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">swapMe2</span>&lt;T&gt;<span class="params">( a: <span class="keyword">inout</span> T, b: <span class="keyword">inout</span> T)</span></span> &#123;</div><div class="line">    (a,b) = (b,a)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="autoclosure和？？、-escaping关键字"><a href="#autoclosure和？？、-escaping关键字" class="headerlink" title="@autoclosure和？？、@escaping关键字"></a>@autoclosure和？？、@escaping关键字</h1><h2 id="autoclosure"><a href="#autoclosure" class="headerlink" title="@autoclosure"></a>@autoclosure</h2><p>@autoclosure是把一句表达式自动封装成一个闭包，在语法上看起来会很漂亮。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">logIfTrue</span><span class="params">(<span class="number">_</span> predicate: @autoclosure <span class="params">()</span></span></span> -&gt; <span class="type">Bool</span>) &#123;</div><div class="line">    <span class="keyword">if</span> predicate() &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"True"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">logIfTrue(<span class="number">2</span> &gt; <span class="number">1</span>) <span class="comment">// 2 &gt; 1会被自动封装为一个闭包</span></div></pre></td></tr></table></figure></p><h2 id="？？"><a href="#？？" class="headerlink" title="？？"></a>？？</h2><p>??关键字可以快速地对nil进行条件判断，左侧值是不为nil的Optional值时返回其value，等于nil的时候返回右侧值。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> ??&lt;T&gt;<span class="params">(<span class="keyword">optional</span>: T?, defaultValue: @autoclosure <span class="params">()</span></span></span> -&gt; <span class="type">T</span>?) -&gt; <span class="type">T</span>?</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> ??&lt;T&gt;<span class="params">(<span class="keyword">optional</span>: T?, defaultValue: @autoclosure <span class="params">()</span></span></span> -&gt; <span class="type">T</span>) -&gt; <span class="type">T</span></div></pre></td></tr></table></figure><p>??的两种实现都用到了@autoclosure关键字，主要是类似于短路表达式，左边不为nil时右边才有计算的需要，否则会造成浪费。从这里衍生出一条面试题，让你设计 || 或 &amp;&amp; 的实现，也是右边设计成一个闭包，右侧有计算必要的时候再进行计算。</p><p>最后要注意，@autoclosure不支持带输入参数的写法，只有形如()-&gt;T的参数才能使用这个特性进行简化。</p><h2 id="escaping"><a href="#escaping" class="headerlink" title="@escaping"></a>@escaping</h2><p>@escaping是用来表明某个闭包是可以“<strong>逃逸</strong>”的。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">doWork</span><span class="params">(block: <span class="params">()</span></span></span>-&gt;()) &#123;</div><div class="line">        block()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">doWorkAsync</span><span class="params">(block: @escaping <span class="params">()</span></span></span>-&gt;()) &#123;</div><div class="line">    <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">        block()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> foo = <span class="string">"foo"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">method1</span><span class="params">()</span></span> &#123;</div><div class="line">        doWork &#123;</div><div class="line">            <span class="built_in">print</span>(foo)</div><div class="line">        &#125;</div><div class="line">        foo = <span class="string">"bar"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">method2</span><span class="params">()</span></span> &#123;</div><div class="line">        doWorkAsync &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="keyword">self</span>.foo)</div><div class="line">        &#125;</div><div class="line">        foo = <span class="string">"bar"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="type">S</span>().method1() <span class="comment">// foo</span></div><div class="line"><span class="type">S</span>().method2() <span class="comment">// bar</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">method3</span><span class="params">()</span></span> &#123;</div><div class="line">    doWorkAsync &#123;</div><div class="line">        [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(<span class="keyword">self</span>?.foo ?? <span class="string">"nil"</span>)</div><div class="line">    &#125;</div><div class="line">    foo = <span class="string">"bar"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="type">S</span>().method3() <span class="comment">// nil</span></div></pre></td></tr></table></figure><p>doWork不会”<strong>逃逸</strong>“，因此闭包的作用域不会超过函数本身，所以不需要担心闭包内持有self。而doWorkAsync则不同，由于需要确保闭包内成员有效性，如果在闭包内引用了self及其成员的话，需要强制明确的写出self。method3中，由于self已经被是否，因此输出nil。</p><h1 id="static和class-关键字"><a href="#static和class-关键字" class="headerlink" title="static和class 关键字"></a>static和class 关键字</h1><h2 id="异同点"><a href="#异同点" class="headerlink" title="异同点"></a>异同点</h2><p><strong>相同点</strong>：static和class都是表示“类型范围作用域”这一概念的。<br><strong>不同点</strong>：class是专门用在class类型的上下文中的，可以用来<em>修饰类方法和类属性。</em><br>class中现在是不能出现在class的存储属性的。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">bar</span>: <span class="title">Bar</span>?</span></div><div class="line"><span class="class">&#125;</span></div></pre></td></tr></table></figure></p><p>会得到一个编译错误，class variables not yet supported，改成static就可以通过编译了。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>任何时候使用static都是没问题的。</p><h1 id="多类型和容器使用Any-AnyObject的技巧"><a href="#多类型和容器使用Any-AnyObject的技巧" class="headerlink" title="多类型和容器使用Any/AnyObject的技巧"></a>多类型和容器使用Any/AnyObject的技巧</h1><p>Swift中常用的原生容器类型有<strong>Array/Dictionay/Set</strong>，他们都是范型的，也就是说放在一个集合中的类型要一致。</p><p>但是Any可以让我们在容器中放各种类型的元素，但也不可避免的带来了<strong>部分信息损失</strong>，从容器中取出后还需要进行一次类型转换。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Any 类型可以隐式转换</span></div><div class="line"><span class="keyword">let</span> mixed: [<span class="type">Any</span>] = [<span class="number">1</span>, <span class="string">"two"</span>, <span class="number">3</span>]</div><div class="line"></div><div class="line"><span class="comment">// 转换为 [NSObject]</span></div><div class="line"><span class="keyword">let</span> objectArray = [<span class="number">1</span> <span class="keyword">as</span> <span class="type">NSObject</span>, <span class="string">"two"</span> <span class="keyword">as</span> <span class="type">NSObject</span>, <span class="number">3</span> <span class="keyword">as</span> <span class="type">NSObject</span>]</div><div class="line"></div><div class="line"><span class="comment">//建议的使用方式</span></div><div class="line"><span class="keyword">let</span> mixed: [<span class="type">CustomStringConvertible</span>] = [<span class="number">1</span>, <span class="string">"two"</span>, <span class="number">3</span>]</div><div class="line"></div><div class="line"><span class="keyword">for</span> obj <span class="keyword">in</span> mixed &#123;</div><div class="line">    <span class="built_in">print</span>(obj.description)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="改善方法一"><a href="#改善方法一" class="headerlink" title="改善方法一"></a>改善方法一</h2><p>作者认为，把这些不同类型的元素放到一个容器中，肯定是由于他们有<strong>共性</strong>，也就是这些元素服从某个共同的协议，这样虽有一定损失，但相对于Any或AnyObject还是改善了不少。</p><h2 id="改善方法二"><a href="#改善方法二" class="headerlink" title="改善方法二"></a>改善方法二</h2><p>另一种做法是用enum可以带有值的特点，将类型信息<strong>封装到enum中</strong>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">IntOrString</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">IntValue</span>(<span class="type">Int</span>)</div><div class="line">    <span class="keyword">case</span> <span class="type">StringValue</span>(<span class="type">String</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> mixed = [<span class="type">IntOrString</span>.<span class="type">IntValue</span>(<span class="number">1</span>),</div><div class="line">             <span class="type">IntOrString</span>.<span class="type">StringValue</span>(<span class="string">"two"</span>),</div><div class="line">             <span class="type">IntOrString</span>.<span class="type">IntValue</span>(<span class="number">3</span>)]</div><div class="line"></div><div class="line"><span class="keyword">for</span> value <span class="keyword">in</span> mixed &#123;</div><div class="line">    <span class="keyword">switch</span> value &#123;</div><div class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">IntValue</span>(i):</div><div class="line">        <span class="built_in">print</span>(i * <span class="number">2</span>)</div><div class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">StringValue</span>(s):</div><div class="line">        <span class="built_in">print</span>(s.capitalized)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="AnyClass"><a href="#AnyClass" class="headerlink" title="AnyClass"></a>AnyClass</h1><p>除了上面提到的Any和AnyObject，还有一个表示<strong>任意</strong>这个概念的东西<strong>AnyClass</strong>。在Swift中的定义方式:</p><blockquote><p>typealias AnyClass = AnyObject.Type</p></blockquote><p>得到的是一个元类型(Meta),存储的是一个类的类型本身。除了可以用元类型来调用类方法或类变量，还可以用在<strong>传递类型的时候，不需要不断地改动代码了。</strong><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> usingVCTypes: [<span class="type">AnyClass</span>] = [<span class="type">MusicViewController</span>.<span class="keyword">self</span>,</div><div class="line">    <span class="type">AlbumViewController</span>.<span class="keyword">self</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">setupViewControllers</span><span class="params">(<span class="number">_</span> vcTypes: [AnyClass])</span></span> &#123;</div><div class="line">    <span class="keyword">for</span> vcType <span class="keyword">in</span> vcTypes &#123;</div><div class="line">        <span class="keyword">if</span> vcType <span class="keyword">is</span> <span class="type">UIViewController</span>.<span class="type">Type</span> &#123;</div><div class="line">            <span class="keyword">let</span> vc = (vcType <span class="keyword">as</span>! <span class="type">UIViewController</span>.<span class="type">Type</span>).<span class="keyword">init</span>()</div><div class="line">            <span class="built_in">print</span>(vc)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">setupViewControllers(usingVCTypes)</div></pre></td></tr></table></figure></p><p>在编框架时，搭好框架后，用DSL的方式进行配置，就可以在不触及Swift编码的情况下，完成一系列复杂操作了。另外，Cocoa API中，也经常需要一个AnyClass的输入，如:self.tableView.registerClass(<br>    UITableViewCell.self, forCellReuseIdentifier: “myCell”)</p><h1 id="Self"><a href="#Self" class="headerlink" title="Self"></a>Self</h1><p>首字母大写的Self，通常用在协议内，指代实现协议的类型<strong>和子类</strong>。实现代理方法有点技巧。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Copyable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">copy</span><span class="params">()</span></span> -&gt; <span class="type">Self</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>: <span class="title">Copyable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> num = <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">copy</span><span class="params">()</span></span> -&gt; <span class="type">Self</span> &#123;</div><div class="line">        <span class="keyword">let</span> result = type(of: <span class="keyword">self</span>).<span class="keyword">init</span>()</div><div class="line">        result.num = num</div><div class="line">        <span class="keyword">return</span> result</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>直接使用MyClass()进行初始化是错误的，无法编译，因为该方法要求返回的是一个<strong>抽象的</strong>、表示当前类型的Self，而不是真实类型MyClass。type(of:)在js中也有，保证了方法与当前类型上下文无关，无论是MyClass还是它的子类，都可以正确地返回合适的类型，满足Self的要求。</p><p>注意需要有required关键字修饰init方法，<strong>保证当前类和子类都能响应init方法</strong>，否则type(of: self).init()可能会出错。另一个解决方法是申明class为<strong>final</strong>，保证不会有其他子类来继承这个类型，本质上也是保证type(of: self).init()不会出错。</p><h1 id="动态类型和多方法-amp-protocol-extension"><a href="#动态类型和多方法-amp-protocol-extension" class="headerlink" title="动态类型和多方法 &amp; protocol extension"></a>动态类型和多方法 &amp; protocol extension</h1><p>Swift默认是不采用动态派发的，方法调用在编译时决定。如果想绕开这个限制，需要手动对输入类型做判断与转换。如果没有判断，即使printThem的函数第一个参数传入Dog()，也是派发的Pet的printPet()方法。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printThem</span><span class="params">(<span class="number">_</span> pet: Pet, <span class="number">_</span> cat: Cat)</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> aCat = pet <span class="keyword">as</span>? <span class="type">Cat</span> &#123;</div><div class="line">        printPet(aCat)</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> aDog = pet <span class="keyword">as</span>? <span class="type">Dog</span> &#123;</div><div class="line">        printPet(aDog)</div><div class="line">    &#125;</div><div class="line">    printPet(cat)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>关于调用什么方法，在protocol extension这个tips里也有这个问题。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">A2</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">method1</span><span class="params">()</span></span> -&gt; <span class="type">String</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">A2</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">method1</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"hi"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">method2</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"hi"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B2</span>: <span class="title">A2</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">method1</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"hello"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">method2</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"hello"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> a2 = b2 <span class="keyword">as</span> <span class="type">A2</span></div><div class="line"></div><div class="line">a2.method1() <span class="comment">// hello</span></div><div class="line">a2.method2() <span class="comment">// hi</span></div></pre></td></tr></table></figure></p><p>作者认为可以这样来理解：对于 method1，因为它在 protocol 中被定义了，因此对于一个被声明为遵守协议的类型的实例 (也就是对于 a2) 来说，可以确定实例必然实现了 method1，我们可以放心大胆地用<strong>动态派发</strong>的方式使用最终的实现 (不论它是在类型中的具体实现，还是在协议扩展中的默认实现)；但是对于 method2 来说，我们只是在协议扩展中进行了定义，没有任何规定说它必须在最终的类型中被实现。在使用时，因为 a2 只是一个符合 A2 协议的实例，编译器对 method2 唯一能确定的只是在协议扩展中有一个默认实现，<strong>因此在调用时，无法确定安全，也就不会去进行动态派发，而是转而编译期间就确定的默认实现。</strong></p><h1 id="final-关键字"><a href="#final-关键字" class="headerlink" title="final 关键字"></a>final 关键字</h1><p>上面提到了final，作者对final关键字的态度是:<strong>虽然final能告诉编译器这段代码不会被更改，但是提升的性能非常有限，建议先优化算法和图像相关的内容。</strong></p><p>final真正适用的几个场景:</p><ul><li>类方法或功能以及确实完备了，比如很难会重写计算字符串MD5或AES加密解密的工具类。</li><li>子类继承和修改是一件危险的事情，比如在某个公司管理的系统中我们对员工按照一定规则进行编号，这样通过编号我们能迅速找到任一员工。而假如我们在子类中重写了这个编号方法，很可能就导致基类中的依赖员工编号的方法失效。</li><li>为了父类中某些代码一定会被执行。比如有时候父类中有一些关键代码是在被继承重写后必须执行的 (比如状态配置，认证等等)，否则将导致运行时候的错误。</li></ul><h1 id="lazy-关键字"><a href="#lazy-关键字" class="headerlink" title="lazy 关键字"></a>lazy 关键字</h1><p>在构建和生成新的对象时，内存分配会在运行时耗费不少时间，如果有一些对象的属性和内容非常复杂，耗时不可忽略；另外，有些情况下，我们不会立即使用到一个对象的所有属性，默认初始化会将全部变量初始化，包括特定环境下的存储属性，这是一种浪费，懒加载就是为此而生。</p><p>lazy除了可以修饰属性，也有其他用法:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">lazy</span>&lt;S : SequenceType&gt;<span class="params">(s: S)</span></span> -&gt; <span class="type">LazySequence</span>&lt;<span class="type">S</span>&gt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">lazy</span>&lt;S : CollectionType where S.Index : RandomAccessIndexType&gt;<span class="params">(s: S)</span></span></div><div class="line">                -&gt; <span class="type">LazyRandomAccessCollection</span>&lt;<span class="type">S</span>&gt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">lazy</span>&lt;S : CollectionType where S.Index : BidirectionalIndexType&gt;<span class="params">(s: S)</span></span></div><div class="line">                -&gt; <span class="type">LazyBidirectionalCollection</span>&lt;<span class="type">S</span>&gt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">lazy</span>&lt;S : CollectionType where S.Index : ForwardIndexType&gt;<span class="params">(s: S)</span></span></div><div class="line">                -&gt; <span class="type">LazyForwardCollection</span>&lt;<span class="type">S</span>&gt;</div><div class="line">                </div><div class="line"><span class="keyword">let</span> data = <span class="number">1</span>...<span class="number">3</span></div><div class="line"><span class="keyword">let</span> result = data.<span class="built_in">lazy</span>.<span class="built_in">map</span> &#123;</div><div class="line">    (i: <span class="type">Int</span>) -&gt; <span class="type">Int</span> <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"正在处理 <span class="subst">\(i)</span>"</span>)</div><div class="line">    <span class="keyword">return</span> i * <span class="number">2</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">print</span>(<span class="string">"准备访问结果"</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"操作后结果为 <span class="subst">\(i)</span>"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">print</span>(<span class="string">"操作完毕"</span>)</div></pre></td></tr></table></figure><p>用来配合像map和filter这类接受闭包并进行运行的方法一起，让整个行为变成延时的。有lazy和无lazy的输出是完全不同的。<strong>对于那些不需要完全运行，可能提前退出的情况，使用lazy是进行性能优化的一种有效手段。</strong></p><h1 id="weak和unowned"><a href="#weak和unowned" class="headerlink" title="weak和unowned"></a>weak和unowned</h1><p>这两个关键字和<strong>内存管理</strong>关系紧密，主要是用来解决<em>计数机制</em>中的<em>循环引用</em>问题的。一般来说，我们希望“被动”的乙方不要去持有“主动”的一方。举一个例子：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> b: <span class="type">B</span></div><div class="line">    <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</div><div class="line">        b = <span class="type">B</span>()</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</div><div class="line">        b.a = <span class="keyword">self</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">deinit</span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"A deinit"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line">    (<span class="keyword">weak</span>/<span class="keyword">unowned</span>) <span class="keyword">var</span> a: <span class="type">A</span>? = <span class="literal">nil</span></div><div class="line">    <span class="keyword">deinit</span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"B deinit"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在class B对A的声明前加上weak/unowned关键字，就可以保证内存正确的释放。weak和unowned的区别是:unowned设置以后，即使它原来引用的内容以及被释放了，它仍然会保持对已经释放对象的一个<strong>“无效的”</strong>引用，它不能Optional值，也不会指向nil。但此时如果继续调用，程序就会崩溃。相比之下，weak就友好不少，在应用的内容释放后，标记为weak的成员会自动地变为nil。Apple的建议是如果能够确定在访问时不会已经被释放的话，尽量使用unowned，试过存在被释放的可能性，那就用weak。</p><p>两个实际经常使用的场景:</p><ol><li>设置delegate。作者举了一个异步网络请求的例子，这种情况下无法保证在拿到返回时作为delegate的对象一定还存活，所以需要用<strong>weak</strong>关键字。</li><li>在self属性存储为闭包时，其中拥有对self的引用。闭包的例子非常经典，因为闭包中对任何其他元素的引用都是会被闭包自动持有的。如果我们在闭包中写了self，其实闭包内也持有了当前对象，如果当前实例直接或间接的有引用，就形成了self-&gt;闭包-&gt;self的循环引用。这种情况下使用哪个关键字的策略同上。</li></ol><h1 id="delegate"><a href="#delegate" class="headerlink" title="delegate"></a>delegate</h1><p>协议-委托(protocol-delegate)模式贯穿于整个Cocoa框架中，为代码之间的关系清理和解耦合做出了贡献。</p><p>上面已经提到了，在ARC中，对于一般的delegate，我们会在声明中将其指定为weak，这样实际对象被释放时，会被重置为nil。一种常见的错误是:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">MyClassDelegate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">method</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> delegate: <span class="type">MyClassDelegate</span>?</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">MyClassDelegate</span> </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="keyword">var</span> someInstance: <span class="type">MyClass</span>!</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">        someInstance = <span class="type">MyClass</span>()</div><div class="line">        someInstance.delegate = <span class="keyword">self</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">method</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Do something"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>原因是Swift的Protocol不仅可以被class所遵守，也可以被struct和enum遵守，本身就不通过<strong>引用计数(ARC)</strong>来管理内存，所以也不可能用weak这样的ARC概念进行修饰。</p></blockquote><p>在Swift中使用weak delegate，有两种解决方式，主要思路都是将protocol限制在class内。</p><ol><li>在MyClassDelegate后面增加:class，使得只允许class遵守它；</li><li>在protocol前加上@objc,OC中只有类能实现protocol。</li></ol><h1 id="String和NSString"><a href="#String和NSString" class="headerlink" title="String和NSString"></a>String和NSString</h1><p>首先他们是可以无缝转换的，作者推荐尽可能使用String，原因有三：</p><ol><li>现在Cocoa所有的API都接受和返回String类型</li><li>String是struct，NSString是Object，String更符合字符串<strong>“不变”</strong>这一特性，在多线程编程时非常重要。另外，在不触及NSString特有操作和动态特性时，使用String的性能也更好。</li><li>String实现了Collection协议，而NSString没有，所以有些Swift语法特性只有String可以用。比如for…in枚举。String和Range配合没有NSString和NSRange配合方便。</li></ol><h1 id="GCD和延时调用、取消的封装"><a href="#GCD和延时调用、取消的封装" class="headerlink" title="GCD和延时调用、取消的封装"></a>GCD和延时调用、取消的封装</h1><p>GCD是一种非常方便的使用多线程的方式，在<em>“复杂必死”</em>的多线程编程中，保持简单就是避免错误的金科玉律。</p><p>作者给出的延时调用策略有两种，第一种不太推荐，是创建一个<strong>selector</strong>，因为它并不安全(需要通过字符串创建，改动代码比较危险)。第二种是使用<strong>asyncAfter</strong>。</p><p>另外作者将其进行了<strong>封装</strong>，并提供了取消的功能，调用起来非常方便。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typealias</span> <span class="type">Task</span> = (<span class="number">_</span> cancel : <span class="type">Bool</span>) -&gt; <span class="type">Void</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">delay</span><span class="params">(<span class="number">_</span> time: TimeInterval, task: @escaping <span class="params">()</span></span></span>-&gt;()) -&gt;  <span class="type">Task</span>? &#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">dispatch_later</span><span class="params">(block: @escaping <span class="params">()</span></span></span>-&gt;()) &#123;</div><div class="line">        <span class="keyword">let</span> t = <span class="type">DispatchTime</span>.now() + time</div><div class="line">        <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: t, execute: block)</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">var</span> closure: (()-&gt;<span class="type">Void</span>)? = task</div><div class="line">    <span class="keyword">var</span> result: <span class="type">Task</span>?</div><div class="line"></div><div class="line">    <span class="keyword">let</span> delayedClosure: <span class="type">Task</span> = &#123;</div><div class="line">        cancel <span class="keyword">in</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> internalClosure = closure &#123;</div><div class="line">            <span class="keyword">if</span> (cancel == <span class="literal">false</span>) &#123;</div><div class="line">                <span class="type">DispatchQueue</span>.main.async(execute: internalClosure)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        closure = <span class="literal">nil</span></div><div class="line">        result = <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    result = delayedClosure</div><div class="line"></div><div class="line">    dispatch_later &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> delayedClosure = result &#123;</div><div class="line">            delayedClosure(<span class="literal">false</span>)</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> result;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">cancel</span><span class="params">(<span class="number">_</span> task: Task?)</span></span> &#123;</div><div class="line">    task?(<span class="literal">true</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 使用方法</span></div><div class="line"><span class="keyword">let</span> task = delay(<span class="number">2</span>) &#123;<span class="built_in">print</span>(<span class="string">"2秒后输出"</span>)&#125;</div><div class="line"></div><div class="line">cancel(task)</div></pre></td></tr></table></figure></p><h1 id="Lock的封装"><a href="#Lock的封装" class="headerlink" title="Lock的封装"></a>Lock的封装</h1><p>OC中的@synchronized关键字在Swift中已经不存在了，因此不得不帮助编译器实现这个关键字。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">synchronized</span><span class="params">(<span class="number">_</span> lock: AnyObject, closure: <span class="params">()</span></span></span> -&gt; ()) &#123;</div><div class="line">    objc_sync_enter(lock)</div><div class="line">    closure()</div><div class="line">    objc_sync_exit(lock)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">myMethodLocked</span><span class="params">(anObj: AnyObject!)</span></span> &#123;</div><div class="line">    synchronized(anObj) &#123;</div><div class="line">        <span class="comment">// 在括号内持有 anObj 锁</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 一个实际的线程安全的 setter 例子</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Obj</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> _str = <span class="string">"123"</span></div><div class="line">    <span class="keyword">var</span> str: <span class="type">String</span> &#123;</div><div class="line">        <span class="keyword">get</span> &#123;</div><div class="line">            <span class="keyword">return</span> _str</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">set</span> &#123;</div><div class="line">            synchronized(<span class="keyword">self</span>) &#123;</div><div class="line">                _str = newValue</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="comment">// 下略</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>结合swift尾随闭包的语言特性，使用起来就跟OC很像了。</p><h1 id="属性访问控制"><a href="#属性访问控制" class="headerlink" title="属性访问控制"></a>属性访问控制</h1><p>Swift中由低至高提供了<strong>private/fileprivate/internal/public/open</strong>五种访问控制权限。默认值是internal。<br>private让代码只能在当前作用域或者同一文件中<em>同一类型</em>的作用域中被使用，fileprivate表示代码可以在当前文件中被访问，而<em>不做类型限定</em>。</p><p>作者认为:如果想让同意module或者target中的其他代码访问的话，保持默认的internal。如果在为其他开发者开发库的话，可能会希望用public甚至open，方便在target外调用。public和open的区别是，只有open的内容才能在别的框架中被继承或重写。因此，如果你只希望别人使用而不希望他们修改，就设为public，否则open。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;本文是对&lt;a href=&quot;https://onevcat.com&quot; target=&quot;_blank&quot; rel=&quot;externa
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="SwiftTips" scheme="http://zhihaozhang.github.io/tags/SwiftTips/"/>
    
  </entry>
  
  <entry>
    <title>仿微信朋友圈/抖音个人主页的设计与实现</title>
    <link href="http://zhihaozhang.github.io/2019/02/19/wechatMoment/"/>
    <id>http://zhihaozhang.github.io/2019/02/19/wechatMoment/</id>
    <published>2019-02-19T02:37:12.387Z</published>
    <updated>2019-02-19T07:44:14.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>因业务发展需要，在新版本的<a href="https://itunes.apple.com/cn/app/match问答/id1414728016?mt=8" target="_blank" rel="external">Match问答</a>中，我们决定加入更多的社交元素，方便大家互相勾搭和交流，更多地展现自己的学习日常和个性，在原有版本的基础上计入了<em>动态</em>和<em>个人主页</em>两个模块，其中个人主页又分为<em>第一人称视图</em>和<em>第三人称视图</em>。本文是我在<em>春节假期期间</em>实现这两个模块的<strong>一点小心得</strong>。</p><p>期间参考了大量开源项目的已有代码，进行了借鉴和向Swift 4.2的改写，在此表示感谢，开源项目<em>不完整列表</em>见文末附录。</p><h1 id="用户自己的个人主页视图"><a href="#用户自己的个人主页视图" class="headerlink" title="用户自己的个人主页视图"></a>用户自己的个人主页视图</h1><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>个人主页视图借鉴了最右这款非常受欢迎的应用，只不过上方的布局稍有不同。其实不止是最右，抖音、微博、知乎等App都有着非常类似的个人主页。</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g0bjpqiltvj30ye0u0acz.jpg" alt=""></p><blockquote><p>Match与最右的个人主页对比</p></blockquote><p>整个个人主页可分为两部分，第一部分是上方的头像、昵称、性别、个性签名、背景图片的区域；第二部分是下方的配置项，定制化的TableView。</p><p>头像外面加了一圈白色的圆，可以更突出头像部分，实现也比较简单，<strong>显式指定</strong>头像所属imageView的layer的borderWidth和borderColor即可，<strong>当然前提是已经将头像裁剪为圆形</strong>。</p><p>Tableview的分割线起始位置的定制:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath)</span></span> &#123;</div><div class="line">        tableView.tableFooterView = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">0</span>, height: <span class="number">0</span>))</div><div class="line">        tableView.separatorInset = <span class="type">UIEdgeInsets</span>(top: <span class="number">0</span>, <span class="keyword">left</span>: <span class="number">50</span>, bottom: <span class="number">0</span>, <span class="keyword">right</span>: <span class="number">0</span>)</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>比起其他应用，我还有一个功能没实现，那就是下拉的时候背景图片的放大。研究过OC代码后，发现这个功能也不难，主要实现方式是didscroll代理方法中监听滑动的偏移量，作为控制image的zoom倍率依据。</p><p><img src="https://raw.githubusercontent.com/QuintGao/GKPageScrollView/master/GKPageScrollViewDemo/gif/wy.gif" alt=""></p><blockquote><p>头图下拉放大效果</p></blockquote><h2 id="更换背景和头像事件"><a href="#更换背景和头像事件" class="headerlink" title="更换背景和头像事件"></a>更换背景和头像事件</h2><p>更换头像和背景思路是类似的，都是给一个图片增加手势事件的识别，通常有两种实现方式。第一种是比较土味的方法，给图片覆盖上一层透明的button，将button设为与图片形状一样；第二种方式是给imageView加上UITapGestureRecognizer，比较简单就不再赘述。</p><p>添加或更改图片涉及到图片拉伸的问题，因此需要进行裁剪，头像的比例是1：1，而背景图片比较复杂，为了适应各种手机型号的屏幕，宽度拉到与屏幕等宽，高度和宽度维持一个固定的宽高比，当然这对用户应该是透明的，将裁剪方式的选择权还给用户。</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g0bkwkb6rcj30u01szq45.jpg" alt=""></p><blockquote><p>图片裁剪页</p></blockquote><h1 id="他人个人主页的实现"><a href="#他人个人主页的实现" class="headerlink" title="他人个人主页的实现"></a>他人个人主页的实现</h1><h2 id="布局-1"><a href="#布局-1" class="headerlink" title="布局"></a>布局</h2><p>社交的重要一部分是去其他人的个人主页看看，其他人的个人主页和用户自己看自己的个人主页肯定是有区别的。用户自己的主页主要是一个去各种设置的中转站，用户看别人的主页主要是看他人的<em>头像、签名、背景、收入、问答、动态等内容</em>。</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g0bprodsijg30om1hcb2h.gif" alt=""></p><blockquote><p>他人个人主页视图</p></blockquote><p>上半部分和个人主页是一样的设计，下半部分有不同，是一个在其他应用中很受欢迎的左右滑动的Tab，暂且将其命名为swipe view。</p><h2 id="实现的关键点与细节"><a href="#实现的关键点与细节" class="headerlink" title="实现的关键点与细节"></a>实现的关键点与细节</h2><p>为了让用户可以右滑退出这个页面，我将下方的swipe view的左边距设为了10px，这样方便用户用手势进行退出，保留着navigation ViewController的退出方式。</p><p>这个页面的难点是<strong>嵌套scrollview的冲突处理</strong>，整个页面是被一个scrollview包裹起来的，而swipe view中也是scrollview，这里设定了上方有view的时候，使得滑动相应外层滑动事件，而当swipe view滑动至顶部的时候，将swipe view头固定于信号栏下方，此时的滑动事件相应者为swipe view中的scrollview。</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g0bqfoepukj31kw0qe3zs.jpg" alt=""></p><blockquote><p>去除了业务逻辑的关键代码片段 (made with Carbonize)</p></blockquote><p>固定住外层scrollview的主要实现方式是设置<strong>scrollview.contentOffset.y</strong>变量，当swipe view在scrollview中的坐标位置小于某个值的时候，设定scrollview.contentOffset.y为一个定值，这样就固定住了swipe view的表头部分。注意，开始的时候我设定的是isUserInteractionEnabled属性，这样swipe内的所有内容都不能交互了，比如正常的图片也不能点开看大图了。后面改成了isScrollEnabled，这样就不影响除了滑动外的其他操作了。</p><h2 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h2><p>其实现在实现这个功能还有点美中不足，那就是固定住scrollview是一个滑动操作，而要想接着对swipe view中的scrollview进行滑动，必须再滑动一次，也就是中间必须中断一次。目前还不知道如何将一次滑动操作发给两个响应者进行处理。</p><h1 id="朋友圈的设计与实现"><a href="#朋友圈的设计与实现" class="headerlink" title="朋友圈的设计与实现"></a>朋友圈的设计与实现</h1><p>微信朋友圈的<strong>点赞、留言、回复功能</strong>是很多应用都需要的功能，在实现这个功能的时候，我参考了不少优秀的blog和开源代码，并最终选中了【附录4】的OC实现进行了向Swift 4.2的改写，后面根据自己的需求进行了一些定制，主要是点击点赞和评论用户名跳转到他的个人主页。</p><h2 id="朋友圈的两种实现方式"><a href="#朋友圈的两种实现方式" class="headerlink" title="朋友圈的两种实现方式"></a>朋友圈的两种实现方式</h2><p>【附录6】里介绍了朋友圈有两种主要实现方式，第一种是将每条动态作为TableView的一个cell，然后cell内部的点赞、评论又作为一个TableView，其中点赞作为Header view，每条评论作为二级cell。布局依赖Masonry，是自动布局autolayout技术，并且依赖第三方缓存cell高度进行优化，这种实现方式作者认为代价比较高。<strong>主要是页面结构复杂，依赖第三方库Masonry，集成难度较大。</strong></p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g0bqzhdnqaj30xh0u07c9.jpg" alt=""></p><blockquote><p>微信朋友圈的两种实现思路</p></blockquote><p>方式二是一个tableView，cell用来展示评论数据，headerView用来展示头像、发布文字和时间等等，主要优化策略也是缓存cell高度，保证后续滑动tableview不会重复计算，提升流畅度，我改写的库也答题是这种思路。</p><h2 id="点赞超链接的实现"><a href="#点赞超链接的实现" class="headerlink" title="点赞超链接的实现"></a>点赞超链接的实现</h2><p>点赞超链接主要是借助<strong>NSAttributedString/NSMutableAttributedString</strong>，让用户名高亮为蓝色，并附带上User_id的信息，统一跳转到上文实现的第三人称视图中。</p><h2 id="一个优化过的点"><a href="#一个优化过的点" class="headerlink" title="一个优化过的点"></a>一个优化过的点</h2><p>朋友圈里有个点我觉得对于用户体验的提升还蛮有优化意义的，那就是防止弹出的键盘遮挡住原动态和评论，下面给出参考的实现方式，主要思路是得到当前的cell，使其滑动。</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g0brs0e0gbj31bw0tedh3.jpg" alt=""></p><blockquote><p>使得tableview上滑的代码(made with Carbonize)</p></blockquote><h2 id="可优化的点"><a href="#可优化的点" class="headerlink" title="可优化的点"></a>可优化的点</h2><p>可优化的点还有很多，作者也列出了一些供大家参考。</p><ol><li>cell复用机制+sectionView复用机制 </li><li>将cell的高度和cell里控件的frame存在model里</li><li>减少cell内部控件的层级，层级不易太深</li><li>缩略图和大图URL（拿起大刀让后台兄弟去完成，因为后台不提供缩略图功能，朋友圈很容易内存警告） </li><li>图片圆角cornerRadius,缓存圆角等等</li><li>高度缓存（cell评论区高度+section区头高度）</li><li>异步加载渲染(图片+文本+view)（利用SDWebImage异步下载图片，文本和view没完成异步处理）</li></ol><h1 id="参考-amp-致谢"><a href="#参考-amp-致谢" class="headerlink" title="参考&amp;致谢"></a>参考&amp;致谢</h1><ol><li><a href="https://github.com/sprint84/PhotoCropEditor" target="_blank" rel="external">PhotoCropEditor</a></li><li><a href="https://github.com/QuintGao/GKPageScrollView" target="_blank" rel="external">GKPageScrollView</a></li><li><a href="https://github.com/yysskk/SwipeMenuViewController" target="_blank" rel="external">SwipeMenuViewController</a></li><li><a href="https://github.com/ChellyLau/MomentKit" target="_blank" rel="external">MomentKit</a></li><li><a href="https://www.jianshu.com/p/395bac3648a7" target="_blank" rel="external">iOS 实现微信朋友圈评论回复功能</a></li><li><a href="https://blog.csdn.net/wenmingzheng/article/details/78081127" target="_blank" rel="external">朋友圈评论回复的两种实现方式</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;因业务发展需要，在新版本的&lt;a href=&quot;https://itunes.apple.com/cn/app/match问答/id141472
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="http://zhihaozhang.github.io/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Google Flutter Live 18笔记与观后感</title>
    <link href="http://zhihaozhang.github.io/2018/12/23/ABitOfFlutter/"/>
    <id>http://zhihaozhang.github.io/2018/12/23/ABitOfFlutter/</id>
    <published>2018-12-23T03:07:21.122Z</published>
    <updated>2018-12-23T09:25:45.348Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在上一篇博客<a href="http://zhihaozhang.github.io/2018/12/22/FlutterLive/">Flutter live 18之后的移动开发技术综述</a>中，我基于自己比较肤浅的认知，对比了原生开发和跨平台开发，以及各大主流跨平台开发的优缺点，并引出了本文的主角Flutter。恰逢Flutter Live 18刚结束不久，Google中国在B站上也给出了<a href="https://www.bilibili.com/video/av38438700/?redirectFrom=h5" target="_blank" rel="external">Flutter Live ‘18 视频合集</a>，而且是中英文双字幕的良心资源。</p><p>本文可以理解为我看该视频合集过程中的一些笔记和一些观(流)后(水)感(账)。</p><h1 id="Flutter-live-18发布会"><a href="#Flutter-live-18发布会" class="headerlink" title="Flutter live 18发布会"></a>Flutter live 18发布会</h1><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fygoy5kriqj30zl0u0wfj.jpg" alt=""></p><blockquote><p>主持人Tim Sneath</p></blockquote><p>刚登台，主持人就激动了，难掩满面的笑意，足以见得他是对今天的发布会多么的有<strong>信心</strong>。</p><p>这次发布会被分割为了5个视频，分别是:</p><ol><li>官宣Flutter 1.0发布</li><li>Flutter设计主题</li><li>Flutter开发主题</li><li>FLutter live 五大两点</li><li>One More Thing<br>这篇博客也将分成这几个Section进行。</li></ol><h2 id="官宣Flutter-1-0发布"><a href="#官宣Flutter-1-0发布" class="headerlink" title="官宣Flutter 1.0发布"></a>官宣Flutter 1.0发布</h2><p>首先是主持人对所有开发Flutter的工程师表示感谢，他们中有web和移动平台的佼佼者，甚至有<em>HTML标准的前编辑</em>、<em>WebKit和Blink的主要开发者</em>和<em>Javascript V8引擎的开发者</em>这种级别的<strong>大咖</strong>，以及<em>上千社区人员</em>帮助提issue、提供补丁、引入新特性，在大家的集体努力下，造就了今天的<strong>Flutter</strong>。</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fygpb01tndj318q0n6jru.jpg" alt=""></p><blockquote><p>Flutter四大特性</p></blockquote><p>在主持人看来，Flutter的出现，让用户在性能和开发速度方面二选一的窘境不复存在了。从商业上讲，公司<strong>再也不需要组建iOS组和Android组两支团队了</strong>。</p><p>为了佐证Flutter的四大特性，他们特意开发了一个叫<strong><a href="https://itunes.apple.com/cn/app/the-history-of-everything/id1441257460?mt=8" target="_blank" rel="external">History</a></strong>的app，在苹果商店/安卓商店都是可以下载到的。请了另一个工程师上来演示了该应用，交互、动画无论在今年的旗舰机亦或是五年前的iPhone 5s上，都能达到60fps，非常流畅。这主要得益于<em>Skia 2D</em>引擎，直接向显卡绘制图像，所有的像素都归开发者管理，因此无论设计师给出什么原画稿，都是可以实现的，而且是以<strong>60fps</strong>的速度渲染出来。</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fygprc5iuyj311m0p8abu.jpg" alt=""></p><blockquote><p>运行在Flutter应用中的Google地图</p></blockquote><p>Demo过程中，果然有彩蛋，那就是运行在Flutter应用中的支持交互的Google地图。有种苹果画中画的感觉，不过在Flutter中，也就是个普通的<strong>Widget</strong>而已啦。常规操作、常规操作，虽然台下已经尖叫声一片了。我在iPhone 6和X上都下载了该应用，都非常流畅，大家如果有兴趣的也可以下载下来试试。</p><p>话筒交还给主持人，主持人上台以极富激情，甚至有点破音的语气宣布了<em>Flutter 1.0的发布</em>，正式摘掉了Flutter <strong>Beta</strong>的帽子，虽然已经有相当多的(大约3000+ APPs)成功案例了。</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fygpx9uowrj31880mu3zd.jpg" alt=""></p><blockquote><p>Flutter 1.0之前取得的一些成绩</p></blockquote><p>个人认为，Flutter 1.0的发布也是在提醒所有开发者可以来学习了，<strong>不管你学不学的动，反正劳资就要更新。</strong></p><h2 id="Flutter-设计主题"><a href="#Flutter-设计主题" class="headerlink" title="Flutter 设计主题"></a>Flutter 设计主题</h2><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fygq20v2v8j318m0geq36.jpg" alt=""></p><blockquote><p>一个APP的从0到1</p></blockquote><p>接下来，主持人将应用从0到1切分为了4个部分，分别是<strong>设计、开发、与在线服务连接以及发布。</strong></p><p>首先介绍的是设计部分，由Material Design Team的will介绍。他一上台就说到了好的设计是非常昂贵的，而且设计师给出的设计闪光的地方很难实现，最后只能在让体验更为出色的细节上选择了妥协。最终交付出一个可用但不够好的应用出来，并美名曰后面改善，但<strong>Later Never Comes</strong>，对于代码的重构，道理也是一样。</p><p>这个部分我深有感触，为了赶工期，妥协设计师设计稿里真正精华的部分。但有了Flutter，就可以打破这一循环，因为Flutter就是<strong>Designed for Good Design</strong>。Material Design team实现了一套非常精美的Widgets，使得应用更灵活、富有表现力。不仅开箱即用，而且很容易扩展。除了Material，还有苹果的设计语言iOS风格的cupertino，就像从UIkit里拿出来的那样。不同的是，由于开源，开发者可以进去看源码，但对iOS private API却无法做到。</p><p>后面请上了获奖应用Reflectly的联合创始人上台一起进行分享。他负责UX/UI和前端的开发，首先是打了一波他们产品的广告，好像是一个日记类应用。后面以主持人采访他的形式展开，这是他第一个应用，前端就他一个人，仅使用<strong>2个半月</strong>就完成了学习和开发的全过程。</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fygqkmb2ehj30vc0m6q3j.jpg" alt=""></p><p>后面请上了和谷歌合作的2Dimensions公司负责人，他们带来了一款可以将矢量动画作为一个Widget直接嵌入到Flutter应用中的工具<a href="https://medium.com/2dimensions/flare-launch-d524067d34d8" target="_blank" rel="external">Flare</a>。Flare打破了传统的模式，无需再单独开发应用和动画，然后再转换成设备资源和代码，这部分的工作由设计师完成即可，减轻了程序员的负担，也促进了程序员和设计师的合作，设计师也更深入地参与到了应用的全过程。</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fygqt4rx5rg30hs0a2qaq.gif" alt=""></p><blockquote><p>Flare Demo</p></blockquote><h2 id="Flutter-开发主题"><a href="#Flutter-开发主题" class="headerlink" title="Flutter 开发主题"></a>Flutter 开发主题</h2><h3 id="Live-Coding"><a href="#Live-Coding" class="headerlink" title="Live Coding"></a>Live Coding</h3><p>回归到开发的主题，请出了Emily和Matt两个人上台进行现场开发，以体现开发过程是多么的<strong>愉快</strong>。两个人给我的感觉像是被代码耽误了的相声演员，演讲非常棒。他们也确实在12分钟内展示了如何开发出一个精美的应用，并与现场观众进行交互。</p><p>除了展示了开发的高效，还重点展示了热重载对于调试方面效率的重大提升。这个部分上篇博客有所提及，在这就不重复提了，重点看一下Flutter 1.0的新特性：<br><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fygr07kagdj315e0l23yz.jpg" alt=""></p><p>首先是更好的遵守了iOS设计规范，加入了很多针对iOS的widgets。另外接入了近 20 种 Firebase 服务、上文提到的Google Maps，以及不断优化性能、压缩由Flutter打包的应用大小。此外，也悉心听取了来自Flutter社区的反馈，解决了大量的问题。</p><p>另外，Flutter正式使用Dart 2.1作为编程语言，它增强了性能，减少了code体积，可以提供更快的类型检查以及更有用的类型错误提示信息。语言新特性也使得开发构建过程变得更快。实际上，在刷twitter的过程中，我也确实看到了很多人对Dart 2.1性能的提升表示了赞赏。</p><h3 id="connet"><a href="#connet" class="headerlink" title="connet"></a>connet</h3><p>接下来是开发的另一个板块，链接外部服务。这个部分的完善主要是靠生态系统，Flutter核心部分被尽可能的压缩了，开发者可以根据自己的需要引入外部<a href="https://pub.dartlang.org/flutter" target="_blank" rel="external">Packages</a>，当然这些库也是全部开源的。</p><p>为了展示使用外部Packages，邀请了另一位工程师上台展示了machine learning库<em>ML Kit</em>和摄镜头库的使用，开发了一个根据人面部表情显示动画人物表情的应用。</p><p>移动支付作为常见的应用常见，在Flutter里也获得了很好的支持。这个部分是由知名支付服务商Square公司负责人上台介绍的，他们带来了两个全新的<a href="https://squareup.com/flutter" target="_blank" rel="external">支付SDK</a>，在使用Square支付识读器直接支付还是使用手机应用进行支付两方面都简化了支付操作和服务，估计国内的支付宝和微信团队很快会跟进吧。</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fygrgi493gj30u00mh0v3.jpg" alt=""></p><blockquote><p>Square支付在销售水果的家族农场中的应用</p></blockquote><h3 id="Release"><a href="#Release" class="headerlink" title="Release"></a>Release</h3><p>持续集成环节请出的是Flutter的合作伙伴Nevercode，他们发布了<a href="https://codemagic.io/" target="_blank" rel="external">Codemagic</a>,一款针对Flutter设计的，简化了iOS和Android应用编译和打包处理的过程的工具。看她在现场通过在Github上选了一些项目，然后点了几下就可以生成包括测试在内的一整套的处理流程，通知会发送到Slcak channel内，感觉非常方便。</p><p>其实在发布iOS应用过程中，用Xcode的发布工具也不难，只是前段时间苹果服务器好像抽风过，引来网上大片吐槽。</p><h2 id="One-More-Thing"><a href="#One-More-Thing" class="headerlink" title="One More Thing"></a>One More Thing</h2><p>One More Thing其实是乔布斯非常喜欢用的手段，在发布会最后发布一些改变世界的东西。这次的Flutter live也增加了这一环节，足见这一环节宣的重要性。这个环节的大新闻就是:</p><blockquote><p>Flutter不仅局限于移动端，也可以跑在<em>macOS/windows/Linux</em>，甚至<strong>网页</strong>上！</p></blockquote><p>实际上，Flutter live 18的演讲幻灯片正是跑在macOS上的程序，现场掌声雷动，关于macOS上写Flutter程序，可以参考<a href="https://juejin.im/post/5c1873f66fb9a04a0d56c72b?utm_source=gold_browser_extension" target="_blank" rel="external">使用 Flutter 开发 macOS App</a>。</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fygs18tlrrj30u007xq2z.jpg" alt=""></p><p>Dart不仅可以被编译为本机ARM代码，还可以被编译为用于生产环境的Javascript代码。现场demo了一个还处于实验室开发阶段实验性项目，<strong><a href="https://mp.weixin.qq.com/s/UwnUBj3cJ5WJeeluZ71i8w" target="_blank" rel="external">Hummingbird</a></strong>，一个基于Web实现的<em>Flutter Runtime</em>，这个项目可以让Flutter能够无需改动地运行在Web平台。现场展示了一个类似华容道的网页应用。现场还给出了一篇文章，介绍了Hummingbird背后的更多技术细节， <a href="https://medium.com/flutter-io/hummingbird-building-flutter-for-the-web-e687c2a023a8" target="_blank" rel="external">Hummingbird: Building Flutter for the Web</a>，预计在明年的Google IO上发布。</p><p>最后是Flutter的Engineering Manager Eric上台发表温情演讲，回顾了做Flutter的初衷，并表达了对社区的感谢。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我在原生iOS开发方面有着比较深厚的技术积累，最近也在读React Virtual DOM部分的源码，因此Flutter对我来说非常亲切，很容易就上手了。关于Flutter，我觉得很不舒服的一点是一切皆Widget，连Center这种样式都被设计成了Widget，因此很容易写出类似回调地狱的<strong>Widget地狱</strong>，或许后面会有第三方的DSL library出现吧，这点确实想念JSX的语法。</p><p>我觉得Flutter对于前端开发者来说，是一个不能绕过的主题，这也是我决定写这篇笔记的原因，希望更多的人能在更短的时间内看完Flutter Live 18并知晓Flutter的存在，因为它必将改变大前端开发的方式。</p><p>谢谢您抽出宝贵的时间阅读，欢迎留言与我讨论。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://www.bilibili.com/video/av38438700/?redirectFrom=h5" target="_blank" rel="external">Flutter Live ‘18 视频合集</a></li><li><a href="https://itunes.apple.com/cn/app/the-history-of-everything/id1441257460?mt=8" target="_blank" rel="external">History on App Store</a></li><li><a href="https://medium.com/2dimensions/flare-launch-d524067d34d8" target="_blank" rel="external">Flare</a></li><li><a href="https://pub.dartlang.org/flutter" target="_blank" rel="external">Flutter Packages</a></li><li><a href="https://squareup.com/flutter" target="_blank" rel="external">Square支付SDK</a></li><li><a href="https://codemagic.io/" target="_blank" rel="external">Codemagic</a></li><li><a href="https://juejin.im/post/5c1873f66fb9a04a0d56c72b?utm_source=gold_browser_extension" target="_blank" rel="external">使用 Flutter 开发 macOS App</a></li><li><a href="https://medium.com/flutter-io/hummingbird-building-flutter-for-the-web-e687c2a023a8" target="_blank" rel="external">Hummingbird: Building Flutter for the Web</a></li><li><a href="https://mp.weixin.qq.com/s/UwnUBj3cJ5WJeeluZ71i8w" target="_blank" rel="external">Hummingbird: Web 里的 Flutter</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在上一篇博客&lt;a href=&quot;http://zhihaozhang.github.io/2018/12/22/FlutterLive/&quot;&gt;F
      
    
    </summary>
    
      <category term="Flutter" scheme="http://zhihaozhang.github.io/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://zhihaozhang.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter live 18之后的移动开发技术综述</title>
    <link href="http://zhihaozhang.github.io/2018/12/22/FlutterLive/"/>
    <id>http://zhihaozhang.github.io/2018/12/22/FlutterLive/</id>
    <published>2018-12-22T02:55:04.074Z</published>
    <updated>2018-12-23T01:37:56.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移动开发技术"><a href="#移动开发技术" class="headerlink" title="移动开发技术"></a>移动开发技术</h1><p>移动开发技术泛指手机端的应用开发，平台主要有iOS和Android。移动开发技术大体目前可分为两类，一类是<strong>原生开发</strong>，一类是<strong>跨平台开发</strong>。</p><p>两者各有优缺点，先给出大佬的观点:</p><blockquote><p>移动端Web开发就像用店里买的锅炒菜，稳定快捷，做家常菜足够了。而native开发就好像不但要做菜，还要亲自打一口最合适自己的锅。虽然速度不快，虽然成本很高，但是想要做出最好吃的拿手菜，用店里的锅就是做不出那个味道。 ​​​​    ———即刻iOS leader JasonYuh</p></blockquote><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1545461964211&amp;di=1038f58e9d429567c6485c62a6226e38&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.swootech.com%2FUploadFiles%2F2018%2F2%2F2018061110010414053.jpg" alt=""></p><h2 id="原生开发"><a href="#原生开发" class="headerlink" title="原生开发"></a>原生开发</h2><p>原生开发是指使用特定语言(如<strong>Kotlin</strong>与<strong>Swift</strong>)调用系统SDK开发的应用。在接触Flutter之前，我属于这类开发人员。对于原生开发，我总结出如下的优缺点:</p><h3 id="原生开发的优点"><a href="#原生开发的优点" class="headerlink" title="原生开发的优点"></a>原生开发的优点</h3><ul><li>速度快，性能好，用户体验佳，原汁原味</li><li>开发人员多，社区比较完善，可用的第三方库健全</li><li>可访问平台的所有功能，如iPhone X的前置深度相机进行面部识别、蓝牙、GPS等</li><li>有谷歌和苹果的工程师每年召开开发者大会WWDC/Google IO，更新SDK，演讲介绍best practice</li></ul><h3 id="原生开发的缺点"><a href="#原生开发的缺点" class="headerlink" title="原生开发的缺点"></a>原生开发的缺点</h3><ul><li>开发成本高，人力成本大，需要两班人马</li><li>功能更新或内容更新需要发布新版本，有审核周期</li><li>Swift ABI不稳定，Swift版本升级维护工作量大，因此保守的国内公司大部分代码还是用OC</li></ul><p>上面两点是我在开发<a href="https://itunes.apple.com/cn/app/match问答/id1414728016?mt=8" target="_blank" rel="external">Match问答</a>的过程中深有体会的两点。我与朋友分别开发和维护iOS和Android客户端，版本迭代的人力成本是翻倍的。任何的修改都要提交审核，通常第一次审核遇到的麻烦比较多，后面审核相对比较顺利，但也要平均两天的时间，这对于高速变化的互联网时代一定是不可接受的。</p><h1 id="跨平台技术"><a href="#跨平台技术" class="headerlink" title="跨平台技术"></a>跨平台技术</h1><p>针对原生开发人力成本和动态化不足的缺点，诞生了一些跨平台的动态化框架。根据原理可大体分为三类:</p><ul><li>Html5+Webview渲染的Hybrid APP</li><li>以ReactNative为代表的JS开发+原生渲染</li><li>以Flutter为代表的自绘UI+Native</li></ul><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fyffdnnxq3j30dy07dglk.jpg" alt=""></p><blockquote><p>跨平台技术与原生技术示意图 (图片来源:知乎用户 @易旭昕)</p></blockquote><h2 id="Flutter之外的跨平台技术"><a href="#Flutter之外的跨平台技术" class="headerlink" title="Flutter之外的跨平台技术"></a>Flutter之外的跨平台技术</h2><h3 id="Html5-Webview渲染的Hybrid-APP"><a href="#Html5-Webview渲染的Hybrid-APP" class="headerlink" title="Html5+Webview渲染的Hybrid APP"></a>Html5+Webview渲染的Hybrid APP</h3><p>第一类技术主要是利用原生控件<strong>Webview</strong>渲染网页，加载前端工程师开发好的已适配手机端的网页，这类应用也被称为<strong>Hybrid APP</strong>。它确实解决了原生开发带来的人力成本与动态性不够的问题。</p><p>它最大的缺点是性能问题，Webview可以理解为一个浏览器内核，上文提到的蓝牙、前置摄像头这些资源是无权访问到的。若使用到这些功能，需要用JS与原生API通信，这个部分是由<strong>JSBridge</strong>完成的。涉及到<strong>通信</strong>事情就复杂起来了，需要指定协议(规定消息的格式含义等)，性能也随之降低。</p><h3 id="以ReactNative为代表的JS开发-原生渲染"><a href="#以ReactNative为代表的JS开发-原生渲染" class="headerlink" title="以ReactNative为代表的JS开发+原生渲染"></a>以ReactNative为代表的JS开发+原生渲染</h3><p>第二类技术在第一类技术的基础上进行了改进，将不堪重负的Webview替换为了原生渲染。以React Native为例，它借助React的<strong>Virtual DOM</strong>技术，在RN中将其渲染为原生控件树，从而大幅提升了渲染效率。</p><p>响应式编程也是React提出的一个重要思想，状态(State)改变，则UI随之改变。这样开发者只需要处理和关注状态的变化，剩下的交给框架完成，得益于Diff算法，框架可以高效的完成DOM更新操作。</p><p>如此看来，React真是非常<strong>伟大</strong>。Vue的作者也在一个讨论React与Vue的帖子下大方承认，再过若干年，React的历史功绩肯定在Vue之上。Flutter中也从中大量借鉴了宝贵经验。关于两者的<em>布局、构建、渲染、更新机制</em>，后面可以展开单写一篇博客。</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fyfgjgs816j30w808mgm3.jpg" alt=""></p><blockquote><p>Flutter的渲染、绘制机制示意图(图片来源:知乎用户 @JoeyChi)</p></blockquote><p>国内厂商也进行了尝试，比如阿里的<strong><a href="http://weex.apache.org/cn/guide/" target="_blank" rel="external">Weex</a></strong>和华为小米等国内厂商制定的<strong><a href="https://www.quickapp.cn" target="_blank" rel="external">快应用</a></strong>。</p><p>相比于第一类解决方案，第二类解决方案性能已经提升蛮多的了，但还是无法避开Javascript与原生的通信。而且作为<strong>解释性</strong>的语言，Javascript的性能好不到哪里去。</p><p>另外，当iOS/Android系统更新后，控件可能会更新，也就是虚拟DOM渲染的目标就更新了，因此不可避免的会有一段时间的空档期，等待社区控件的更新。</p><h2 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h2><h3 id="Flutter的改进与性能"><a href="#Flutter的改进与性能" class="headerlink" title="Flutter的改进与性能"></a>Flutter的改进与性能</h3><p>Flutter抛弃了JS，使用了可编译为机器码的Dart作为编程语言，底层Engine层包含了 Skia渲染引擎以及文字处理引擎，自绘了UI，同时支持iOS的<strong>Cupertino</strong>风格与Android的<strong>Material</strong>风格。</p><p>正是因为较好的解决了上面的问题，<em>Flutter</em>声称可以达到<strong>媲美原生</strong>的效果。关于原生与Flutter的性能对比，可以参考<a href="https://juejin.im/post/5b85e9f86fb9a01a175dc986" target="_blank" rel="external">Flutter和原生应用性能对比</a>。</p><blockquote><p>在假设他能够做到独立、第三方的前提下，结论是:android 原生在内存、CPU 资源占用方面要低于 flutter，并且安装包的体积也要小于 flutter，所以，不考虑其他因素，单纯从性能角度来说，android 原生肯定是要优于 flutter 的。但 flutter 也有它的优点，比如跨平台的开发、毫秒级的热重载等等，另外跨端开发也逐渐的流行起来，所以，我们在学好android原生的基础上，对跨端开发也要抱有积极的心态。</p></blockquote><h3 id="Flutter的历史"><a href="#Flutter的历史" class="headerlink" title="Flutter的历史"></a>Flutter的历史</h3><p><strong>Flutter</strong>是谷歌最早于2017年5月推出的一套<em>跨平台、开源UI框架</em>，初衷是同时支持<strong>iOS、Android</strong>开发，并且是传说中的操作系统<strong>Fuchsia</strong>的默认开发套件，使用<strong>Dart</strong>语言编写。</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fyffezmcv5j30u007taad.jpg" alt=""></p><h3 id="Flutter的特点"><a href="#Flutter的特点" class="headerlink" title="Flutter的特点"></a>Flutter的特点</h3><p>其实学习Flutter有一段时间了，他的优点挺多，官方总结如下：</p><ul><li>界面精美</li><li>速度快</li><li>支持热重载</li><li>开放</li></ul><p>就我自己使用Flutter一段时间以来的实际体验，展开介绍一下。Flutter一直强调对屏幕的像素级掌控，让开发者不受限的堆叠任何图形、视频、文本和控件。Flutter内置的<strong>Widgets</strong>非常精美，最大程度的实现了Material Desig，因此应用的外观<strong>下限</strong>是有保证的(^_^)。</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fyffmoe4hoj31bc0r6wgu.jpg" alt=""></p><blockquote><p>Flutter官方给出界面样例</p></blockquote><p><em>速度快是Flutter的初心，媲美原生应用的速度是他的口号。</em> 性能方面无需多言，相比于其他跨平台方案是有优势的，但比原生还是有一些差距。特别是iOS平台，由于没有内置Skia 2D加速图形引擎，会使IPA包的大小多出一截。</p><p>支持热重载这点对于开发者来说是非常爽的，开发者做出一点点修改，不用重启整个应用，经历漫长的等待了，在亚秒级别的等待后就能看到更新，非常方便。另外，即使出错了，也可以记住Context，在开发者修复代码后，恢复之前的Context，不用担心typo或者测试过程中，错误很难复现的问题。综合以上两点，Flutter称之为<strong>Stateful Hot Reload</strong>。</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fyfgpqmct1j31gm0t8djh.jpg" alt=""></p><blockquote><p>Flutter开发界面，支持热重载</p></blockquote><p>Flutter是开源的，插件也丰富，有类似于cocoa pod和npm的<a href="https://pub.flutter-io.cn" target="_blank" rel="external">社区</a>，不需要重复造轮子了，开发者也可以发布自己的轮子给别人使用。同时，也可以像使用React一样，仅仅将Flutter作为view层的解决方案，逻辑使用Kotlin或Swift进行开发。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文介绍了目前市面上针对移动开发的主流技术，并比较了他们的优缺点，并引出了Flutter。在下一篇文章中，我们详细介绍Flutter live 18这次大会发布了什么，以及引入的新特性。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://juejin.im/post/5b85e9f86fb9a01a175dc986" target="_blank" rel="external">Flutter和原生应用性能对比</a></li><li><a href="https://www.weibo.com/jasonyuh?is_all=1#_rnd1545449174555" target="_blank" rel="external">JasonYuh的微博</a></li><li><a href="https://zhuanlan.zhihu.com/p/52723705" target="_blank" rel="external">Joey的Flutter之旅</a></li><li><a href="https://zhuanlan.zhihu.com/p/37894353" target="_blank" rel="external">关于 Flutter 的一些想法</a></li><li><a href="https://flutterchina.club" target="_blank" rel="external">Flutter中文网</a></li><li><a href="https://pub.flutter-io.cn" target="_blank" rel="external">Dart Packages</a></li><li><a href="https://flutterchina.club/flutter-for-ios/" target="_blank" rel="external">Flutter for iOS 开发者</a></li><li><a href="https://flutterchina.club/web-analogs/" target="_blank" rel="external">Flutter for Web开发者</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;移动开发技术&quot;&gt;&lt;a href=&quot;#移动开发技术&quot; class=&quot;headerlink&quot; title=&quot;移动开发技术&quot;&gt;&lt;/a&gt;移动开发技术&lt;/h1&gt;&lt;p&gt;移动开发技术泛指手机端的应用开发，平台主要有iOS和Android。移动开发技术大体目前可分为两类，一类是&lt;
      
    
    </summary>
    
      <category term="Flutter" scheme="http://zhihaozhang.github.io/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://zhihaozhang.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>两个大屏可视化案例的实现</title>
    <link href="http://zhihaozhang.github.io/2018/11/25/BigScreen/"/>
    <id>http://zhihaozhang.github.io/2018/11/25/BigScreen/</id>
    <published>2018-11-25T06:42:28.720Z</published>
    <updated>2018-12-04T12:04:34.953Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近期分别使用了<strong>React</strong>和<strong>Vue</strong>完成了两个大屏可视化案例，经历了设计师和产品经理的各种<strong>“指指点点”</strong>，也算是对可视化大屏项目有了一点点小的经验，对于两个技术栈写组件也有一点小心得，趁着周末总结一下。</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fxkbayd3qjj317x0u0h6r.jpg" alt=""></p><blockquote><p>大屏效果图1</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fxkbblzzmzj317w0u0gyo.jpg" alt=""></p><blockquote><p>大屏效果图2</p></blockquote><h1 id="可视化大屏"><a href="#可视化大屏" class="headerlink" title="可视化大屏"></a>可视化大屏</h1><p>无论是在科幻电影还是在真实世界里，可视化大屏都是非常常见的一种表现手法。之前在昆明公安局出差，也亲眼看到了<em>湄公河惨案</em>的真实指挥中心和他的大屏，屏幕的宽度大约有两层楼高。</p><h2 id="可视化大屏的特性"><a href="#可视化大屏的特性" class="headerlink" title="可视化大屏的特性"></a>可视化大屏的特性</h2><p>可视化大屏，<em>归根到底还是运用的可视化技术</em>，只不过展现的屏幕比起笔记本和显示器大了很多。相比于传统的桌面级可视化运用，大屏可视化的特性有:</p><ol><li>屏幕巨大，用户通常离屏幕比较远，文字表达出来的信息需要足够清楚，通常要在字体和颜色上做文章。</li><li>弱化交互，基于键盘和鼠标的交互方式很少，更多时候系统自己做出响应，而不是让人工介入。</li><li>视觉冲击力强，设计一般都是以深色为底色，一来科技感十足，二来可以配合突出的主体动画和强设计感的元素。</li><li>场景化，一块大屏通常用来展示一类场景，场景主要由图表构成，后台管理系统那套表单通常不会出现在大屏。</li><li>动画更重要了，用动画表现出来的数据，通常是大屏项目中<strong>最迷人</strong>的地方。说动画是大屏项目的<strong>灵魂</strong>也不为过。案例一的那条红线被设计师称为<strong>“画龙点睛”之笔</strong>。</li></ol><h2 id="Vue和React可视化组件的实现"><a href="#Vue和React可视化组件的实现" class="headerlink" title="Vue和React可视化组件的实现"></a>Vue和React可视化组件的实现</h2><p>不作为一个整体看大屏项目，其实还是一个个小的组件。在实现两个项目的过程中，由于上海和南京两地团队的<strong>技术栈差异</strong>，使用了Vue和React两种框架。于是我只能看了一晚上Vue之后就上手去写Vue的组件。两个大屏案例之间有共同的组件，不需要整个重写，只需要改写即可；改写的过程中，我也比较深刻体会到了两者的不同。</p><p>由于宽高的不确定性，做组件的第一步是<em>获取组件在大屏上的宽高</em>。</p><ul><li>React获取宽高的方式<br>React获取宽高的方式比较标准，分为三步:在render的时候ref，在did的时候取值，在构造方法create。在生命周期函数的钩子里实现相应方法即可。</li><li>Vue获取宽高的方式<br>Vue似乎<strong>更自由</strong>一些，直接在mouted钩子里就可以拿到相应组件的clientWidth。</li></ul><p>宽高确定了，组件内部的元素和字体大小要进行相应比例的放缩，达到自适应的效果。在我的案例里使用的是d3和bizchart来完成图的绘制，d3中我大量使用了linearScale进行插值计算，而bizChart就更为简单，框架帮你完成了自适应。</p><p>动画部分通常会涉及一些元素的增加，有增加就不能缺少释放，这是内存管理的一个铁律。在完成第一个大屏的过程中，为了完成粒子放射的效果，我增加了很多粒子，起先没有将他们释放掉，只是从视觉上藏了起来，这造成了系统一段时间后会很卡。</p><p>在做组件的过程中，还需注意组件内部的样式<em>不能影响外部</em>。由于粗心，我就出现了这样的一个小错误，楠哥说如果在其他公司是要扣KPI的。</p><h2 id="大屏的自动布局和宽高自适应"><a href="#大屏的自动布局和宽高自适应" class="headerlink" title="大屏的自动布局和宽高自适应"></a>大屏的自动布局和宽高自适应</h2><p>可视化大屏的布局部分也是一个重要的部分。在我们的案例中，使用了纯css3的<strong>vw、vh</strong>实现自适应。</p><h3 id="视口单位"><a href="#视口单位" class="headerlink" title="视口单位"></a>视口单位</h3><h4 id="视口"><a href="#视口" class="headerlink" title="视口"></a>视口</h4><p>在业界，极为推崇的一种理论是 Peter-Paul Koch (江湖人称“PPK大神”)提出的关于视口的解释——在桌面端，视口指的是在桌面端，指的是浏览器的可视区域；而在移动端较为复杂，它涉及到三个视口：分别是 Layout Viewport（布局视口）、 Visual Viewport（视觉视口）、Ideal Viewport。(<strong>大屏一般是桌面端</strong>)</p><h4 id="视口单位-1"><a href="#视口单位-1" class="headerlink" title="视口单位"></a>视口单位</h4><p>根据CSS3规范，视口单位主要包括4个：</p><ol><li>vw : 1vw 等于视口宽度的1%</li><li>vh : 1vh 等于视口高度的1%</li><li>vmin : 选取 vw 和 vh 中最小的那个</li><li>vmax : 选取 vw 和 vh 中最大的那个</li></ol><p>视口单位区别于%单位，视口单位是依赖于视口的尺寸，根据视口尺寸的百分比来定义的；而%单位则是依赖于元素的祖先元素。</p><p>用视口单位度量，视口宽度为100vw，高度为100vh，相当于将宽高分别分成了100份。</p><h3 id="利用视口单位适配页面"><a href="#利用视口单位适配页面" class="headerlink" title="利用视口单位适配页面"></a>利用视口单位适配页面</h3><p>利用视口单位适配页面通常有两种方法，做法一仅使用vw作为CSS单位，使用Sass函数编译。做法二搭配vw和rem，布局更优化。做法二是更为优秀的做法，我们也采用了这种方法，两点原因：</p><ol><li>用户视觉体验更好，增加了最大最小宽度的限制；</li><li>如果选择主流的rem弹性布局方式作为项目开发的适配页面方法，那么做法二更适合于后期项目从 rem 单位过渡到 vw 单位。</li></ol><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>由于是公司的项目，不同于我个人的项目可以开源，本文更多的讲的是<em>道</em>上的东西，术上的东西并没有过多涉及，甚至没有一行样例代码。<br><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fxkd6bwxirj31n50u0gyp.jpg" alt=""></p><blockquote><p>真实的效果图</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fxntmgsn9vj31400u041o.jpg" alt=""></p><blockquote><p>真实的演示现场</p></blockquote><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fxuyudi023j31hc0u079f.jpg" alt=""></p><blockquote><p>另一个演示现场</p></blockquote><p>最后还是希望本文能给大家带来一些启发和收获。</p><p>感谢设计师Joseph的设计和督促，让我还原度较高的完成了这次大屏任务。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;近期分别使用了&lt;strong&gt;React&lt;/strong&gt;和&lt;strong&gt;Vue&lt;/strong&gt;完成了两个大屏可视化案例，经历了设计师和
      
    
    </summary>
    
      <category term="visualization" scheme="http://zhihaozhang.github.io/categories/visualization/"/>
    
    
      <category term="大屏可视化" scheme="http://zhihaozhang.github.io/tags/%E5%A4%A7%E5%B1%8F%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Match开发笔记 伍 3.0版的新功能与上架</title>
    <link href="http://zhihaozhang.github.io/2018/10/31/match5/"/>
    <id>http://zhihaozhang.github.io/2018/10/31/match5/</id>
    <published>2018-10-31T12:14:56.953Z</published>
    <updated>2018-11-19T04:45:11.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Match问答3.0版本近期在<a href="https://itunes.apple.com/cn/app/match问答/id1414728016?mt=8" target="_blank" rel="external">App Store</a>和各大安卓市场上架了，此次更新，我们让应用进一步完善。主要新功能有：</p><ol><li>增加图片放缩、移动和本地保存的功能；</li><li>增加对<strong>图文混排</strong>的支持;</li><li>增加对问题关键词和问题难度的系统评判，并基于问题难度提升问题的奖励；</li><li>增加对问题的重新编辑功能；</li><li>修改赞/踩按钮点击延迟的bug；</li><li>优化部分界面UI</li></ol><p>先放张主页预览图。<br><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fx7nk0w9orj30u01sz42r.jpg" alt=""></p><h1 id="图文混排富文本"><a href="#图文混排富文本" class="headerlink" title="图文混排富文本"></a>图文混排富文本</h1><p>图文混排是本次升级的<strong>主要工作</strong>，也让我比较深入了学习了<strong>TextKit</strong>相关的知识。富文本在Github上可用的轮子不多，我试用了接近10个自带富文本的应用，发现基本都不可用，大部分是基于<em>Webview</em>的包装。</p><p>其实富文本是<em>历史遗留问题</em>，从Match1.0版本的时候就很想要这个功能，但苦于一直没有找到合适的轮子，一直在回避，用文字超链接的方式跳转到详情页，一直安慰自己小图反正也看不清。但看到知乎将图片拉到与手机屏幕等宽，效果还蛮好的，而且阿里云OSS也比较强大，可以支持很多参数,于是开始着手做富文本这块。基于我们系统前后台的json标准，我采取了一种<strong>递归</strong>的方式来解析文本，将图片的特殊标志替换成需要的图片，并提取出key，从阿里云获取相应的图片，插入到textview的合适位置上，参考实现如下:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertImage</span><span class="params">(image: UIImage, imageName:String)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> attString = createAttStringWithImage(image: image, height: imageheight, imageName: imageName)</div><div class="line">        </div><div class="line">        <span class="comment">//add this attributed string to the current position.</span></div><div class="line">        <span class="keyword">self</span>.textStorage.insert(attString, at: <span class="keyword">self</span>.selectedRange.location)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">insertImage</span><span class="params">(image : UIImage , index : Int, imageName:String)</span></span>&#123;</div><div class="line">        <span class="keyword">let</span> attrString = createAttStringWithImage(image: image, height: imageheight/<span class="number">2</span>,imageName: imageName)</div><div class="line">        <span class="keyword">self</span>.textStorage.insert(attrString, at: index)</div><div class="line">        <span class="keyword">self</span>.adjustUITextViewHeight()</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">createTextStorageByText</span><span class="params">(text : String , num : Int)</span></span> -&gt; [<span class="type">String</span>]&#123;</div><div class="line">        <span class="keyword">if</span>(text.<span class="built_in">count</span> == num &amp;&amp; <span class="keyword">self</span>.flag == <span class="literal">false</span>)&#123;</div><div class="line">            <span class="keyword">self</span>.flag = <span class="literal">true</span></div><div class="line">            <span class="keyword">return</span> []</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">var</span> pic_names : [<span class="type">String</span>] = []</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(text.<span class="built_in">count</span> &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">self</span>.flag) &#123;</div><div class="line">            <span class="keyword">if</span>(text.hasPrefix(<span class="string">"&lt;--image_link--&gt;"</span>))&#123;</div><div class="line">                <span class="keyword">var</span> tmpOffset = <span class="number">0</span></div><div class="line">                <span class="keyword">while</span>((text.substring(from: tmpOffset, to: text.<span class="built_in">count</span>).hasPrefix(<span class="string">"&lt;/--image_link--&gt;"</span>))==<span class="literal">false</span>)&#123;</div><div class="line">                    tmpOffset = tmpOffset + <span class="number">1</span></div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                pic_names.append(text.substring(from: <span class="string">"&lt;--image_link--&gt;"</span>.<span class="built_in">count</span> , to : tmpOffset))</div><div class="line">                </div><div class="line">                <span class="keyword">if</span>(<span class="keyword">self</span>.image_names.<span class="built_in">contains</span>(text.substring(from: <span class="string">"&lt;--image_link--&gt;"</span>.<span class="built_in">count</span> , to : tmpOffset))==<span class="literal">false</span>)&#123;</div><div class="line">                    <span class="keyword">self</span>.image_names.append(text.substring(from: <span class="string">"&lt;--image_link--&gt;"</span>.<span class="built_in">count</span> , to : tmpOffset))</div><div class="line">                    </div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                <span class="keyword">self</span>.readProvider = (<span class="type">UIApplication</span>.shared.delegate <span class="keyword">as</span>! <span class="type">AppDelegate</span>).readProvider</div><div class="line">                <span class="keyword">self</span>.readClient   = (<span class="type">UIApplication</span>.shared.delegate <span class="keyword">as</span>! <span class="type">AppDelegate</span>).readClient</div><div class="line">                <span class="keyword">self</span>.bucketName   = (<span class="type">UIApplication</span>.shared.delegate <span class="keyword">as</span>! <span class="type">AppDelegate</span>).bucketName</div><div class="line">                </div><div class="line">                    <span class="keyword">let</span> getObjectReq: <span class="type">OSSGetObjectRequest</span> = <span class="type">OSSGetObjectRequest</span>()</div><div class="line">                    getObjectReq.bucketName = <span class="keyword">self</span>.bucketName</div><div class="line">                    getObjectReq.objectKey =  text.substring(from: <span class="string">"&lt;--image_link--&gt;"</span>.<span class="built_in">count</span> , to : tmpOffset)</div><div class="line">                    getObjectReq.xOssProcess = <span class="string">"image/resize,m_fill,h_100,w_<span class="subst">\(screenw)</span>,Q_60"</span></div><div class="line">                    getObjectReq.downloadProgress = &#123; (bytesWritten: <span class="type">Int64</span>,totalBytesWritten : <span class="type">Int64</span>, totalBytesExpectedToWrite: <span class="type">Int64</span>) -&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line">                    &#125;;</div><div class="line">                    <span class="keyword">let</span> task: <span class="type">OSSTask</span> = <span class="keyword">self</span>.readClient.getObject(getObjectReq);</div><div class="line">                    task.<span class="keyword">continue</span>(&#123;(t) -&gt; <span class="type">OSSTask</span>&lt;<span class="type">AnyObject</span>&gt;? <span class="keyword">in</span></div><div class="line">                        <span class="keyword">if</span>(task.error == <span class="literal">nil</span>)&#123;</div><div class="line">                            <span class="keyword">let</span> avatar = task.result</div><div class="line">                            <span class="type">DispatchQueue</span>.main.async &#123;</div><div class="line">                                <span class="keyword">if</span>(<span class="type">UIImage</span>(data: (avatar?.downloadedData)!) != <span class="literal">nil</span>)&#123;</div><div class="line">                                    <span class="keyword">let</span> image = <span class="type">UIImage</span>(data: (avatar?.downloadedData)!)!</div><div class="line">                                    </div><div class="line">                                    </div><div class="line">                                    <span class="keyword">self</span>.insertImage(image: image, imageName: text.substring(from: <span class="string">"&lt;--image_link--&gt;"</span>.<span class="built_in">count</span> , to : tmpOffset))</div><div class="line">                                    </div><div class="line">                                    </div><div class="line">                                    <span class="keyword">self</span>.offset = <span class="keyword">self</span>.offset + tmpOffset + <span class="string">"&lt;/--image_link--&gt;"</span>.<span class="built_in">count</span></div><div class="line">                                    </div><div class="line"><span class="comment">//                                    self.adjustUITextViewHeight()</span></div><div class="line">                                    </div><div class="line">                                    <span class="keyword">var</span> tmp_pic_names = <span class="keyword">self</span>.createTextStorageByText(text: text.substring(from: tmpOffset + <span class="string">"&lt;/--image_link--&gt;"</span>.<span class="built_in">count</span> , to: text.<span class="built_in">count</span>), num: <span class="number">1000086</span>)</div><div class="line">                                    </div><div class="line">                                    </div><div class="line">                                    tmp_pic_names.<span class="built_in">map</span>&#123; pic <span class="keyword">in</span></div><div class="line">                                        pic_names.append(pic)</div><div class="line">                                    &#125;</div><div class="line">                                &#125;</div><div class="line">                                </div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">                    &#125;)</div><div class="line">                    task.waitUntilFinished()</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">self</span>.appendLinkString(string: text.substring(from: <span class="number">0</span>, to: <span class="number">1</span>))</div><div class="line">                <span class="keyword">if</span>(text.<span class="built_in">count</span> &gt; <span class="number">1</span>)&#123;</div><div class="line">                    <span class="keyword">var</span> tmp_pic_names = <span class="keyword">self</span>.createTextStorageByText(text: text.substring(from: <span class="number">1</span>), num: <span class="number">1000086</span>)</div><div class="line">                    <span class="keyword">self</span>.offset = <span class="keyword">self</span>.offset + <span class="number">1</span></div><div class="line">                    </div><div class="line">                    tmp_pic_names.<span class="built_in">map</span>&#123; pic <span class="keyword">in</span></div><div class="line">                        pic_names.append(pic)</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">         <span class="keyword">return</span> pic_names</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>需要注意的是插入图片的操作要放到<strong>主线程</strong>。当然，实际过程中也遇到了一些问题，比如为了让两张连续图片中间有一定距离，引入了<strong>行距</strong>。但是如果这个<em>问题/回答</em>本身并没有文字，只有图片，行距是不生效的，这种情况就需要在前面加入\t制表符。</p><p>这次允许编辑用户自己之前发表过的问题或回复，当然也是涉及富文本的，图片提交之前判断了以前是不是保存过了，还是新添加的。</p><p>插入图片后，Tableview中富文本Cell的高度自动计算就不正确了，需要自己给出高度的计算方法。这里，我设置了图片的高度为100，宽度为屏幕等宽，因此需要统计图片的数量。还需要统计的是\n的数量、文字的数量，这部分是乘以行距和行高也是Cell高度的有效组成部分。</p><p>这个部分内容较多，在这先不展开了，后面有机会仔细写一下，顺便把这个<strong>richtext</strong>轮子<em>开源</em>。目前还不能称作轮子，是辆整车，需要将业务从现有代码中抽离，尽量做的通用一些。</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fx7t3dnaxgj30uc0ns1au.jpg" alt=""></p><blockquote><p>富文本改造前后对比</p></blockquote><h1 id="上架过程"><a href="#上架过程" class="headerlink" title="上架过程"></a>上架过程</h1><p>和以往不同，这次的上架过程显得异常艰难，遇到了很多困难。首先是打包的时候报错。</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fx7t76tk3mj315e0p0dy9.jpg" alt=""></p><p>因为之前真机测试和模拟器测试都是没有报错的，在周日晚上发现了这个问题，必然会影响睡眠质量了。经查，有个库<a href="https://github.com/JiongXing/PhotoBrowser" target="_blank" rel="external">PhotoBrowser</a>必须要求使用Swift 4.2，而我现有的库是基于Swift 4.1的。在工程下看到了有别人提了<a href="https://github.com/JiongXing/PhotoBrowser/issues/91" target="_blank" rel="external">类似的issue</a>，于是，我将工程升到了4.2，修改了大概<em>100个地方</em>，时间也来到了近2点。。。结果蛋疼的地方又出现了，有些库只支持到Swift 4.1！！！</p><p>因为现在Xcode正式版还没放出来，第三方库也都没有支持 Swift 4.2 ，通过修改podfile让不支持 Swift 4.2 的第三方库在4.1下编译，等到所有依赖的第三方库都支持 Swift 4.2 之后，再把 podfile 改回去</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">swift_41_pod_targets = ['<span class="type">SnapKit'</span>,'<span class="type">MonkeyKing'</span>,'<span class="type">RxCocoa'</span>, ...]</div><div class="line"></div><div class="line">post_install <span class="keyword">do</span> | installer |</div><div class="line"></div><div class="line">    installer.pods_project.targets.each <span class="keyword">do</span> |target|</div><div class="line"></div><div class="line">        <span class="keyword">if</span> swift_41_pod_targets.include?(target.name)</div><div class="line"></div><div class="line">            target.build_configurations.each <span class="keyword">do</span> |config|</div><div class="line"></div><div class="line">                config.build_settings['<span class="type">SWIFT_VERSION'</span>] = '<span class="number">4.1</span>'</div><div class="line"></div><div class="line">            end</div><div class="line"></div><div class="line">        end</div><div class="line"></div><div class="line">    end</div><div class="line"></div><div class="line">end</div></pre></td></tr></table></figure><p>在 Build Setting 中搜索 <code>Swift Language Version</code> 将 Swift 版本号改为 Swift 4.2，完成了整个工程的语言版本升级。</p><h1 id="logo更新"><a href="#logo更新" class="headerlink" title="logo更新"></a>logo更新</h1><p>在某宝上买了一个Logo设计的服务，400大洋，说是总监级别的设计师，结果前三次完全是搞笑，最后搞出来一个差强人意的logo。<br><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fxd9sg0ecmj303c03ca9w.jpg" alt=""></p><p>没想到在上架过程中也遇到了问题<strong>ERROR ITMS-90717</strong>:</p><blockquote><p>Invalid App Store Icon. The App Store Icon in the asset catalog in ‘Some.app’ can’t be transparent nor contain an alpha channel.</p></blockquote><p>在简书搜到了<a href="https://www.jianshu.com/p/e8f3791ec556" target="_blank" rel="external">解决方法</a>，原来苹果<em>需要调整Alpha通道为否</em>。</p><p>这次总算上传成功了。后面的审核也是异常顺利，不到10小时就完成了审核，非常迅速，给苹果的审核团队点赞。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这小半年时间，不知不觉已经为Match写下了<em>2,5000+</em>多行代码，现在回头看看，挺感谢Match的，他让我专注思考和动手，激发了我精益求精的态度，也成了我独有的一份精神寄托。他就像我的孩子一样，看着他从无到有，越来越好，心里挺满足的。<br><a href="https://ws3.sinaimg.cn/large/006tNbRwgy1fx7uaovyblj30p00nmjrv.jpg" target="_blank" rel="external"></a></p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ol><li><a href="https://www.jianshu.com/p/bab8efb2f2d2" target="_blank" rel="external">升级 Swift 4.2 教程</a></li><li><a href="https://www.raywenderlich.com/5960-text-kit-tutorial-getting-started?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more" target="_blank" rel="external">Text Kit Tutorial</a></li><li><a href="https://github.com/JiongXing/PhotoBrowser" target="_blank" rel="external">PhotoBrowser</a></li><li><a href="https://github.com/JiongXing/PhotoBrowser/issues/91" target="_blank" rel="external">关于Swift 4.2的issue</a></li><li><a href="https://www.jianshu.com/p/e8f3791ec556" target="_blank" rel="external">ERROR ITMS-90717</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Match问答3.0版本近期在&lt;a href=&quot;https://itunes.apple.com/cn/app/match问答/id1414
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="http://zhihaozhang.github.io/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Match开发笔记 肆 极光推送接入指南(Swift版)</title>
    <link href="http://zhihaozhang.github.io/2018/09/20/match4/"/>
    <id>http://zhihaozhang.github.io/2018/09/20/match4/</id>
    <published>2018-09-20T10:01:51.958Z</published>
    <updated>2018-09-25T06:56:49.245Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在接入极光推送过程中，发现<a href="https://docs.jiguang.cn/jpush/client/iOS/ios_guide_new/" target="_blank" rel="external">官网文档</a>比较老旧了，而且使用的是OC版本，在上架<a href="https://itunes.apple.com/cn/app/match问答/id1414728016?mt=8" target="_blank" rel="external">Match 2.0</a>的过程中，需要增加推送功能。于是就花了一些精力去研究，并最终改写得到了Swift版本的代码，这里写一个总结，希望能对想使用Swift接入极光推送的朋友们提供一些启发。</p><h1 id="iOS推送机制和JPush的意义"><a href="#iOS推送机制和JPush的意义" class="headerlink" title="iOS推送机制和JPush的意义"></a>iOS推送机制和JPush的意义</h1><h2 id="APNs"><a href="#APNs" class="headerlink" title="APNs"></a>APNs</h2><p>iOS推送，最终只有一条官方渠道，那就是<strong>APNs</strong>。APNs通知是指通过向Apple APNs服务器发送通知，到达iOS设备，由iOS系统提供展现的推送。</p><h2 id="极光推送的意义"><a href="#极光推送的意义" class="headerlink" title="极光推送的意义"></a>极光推送的意义</h2><p>一般开发者都是自己部署服务器，向APNs Server推送。极光推送，是在这中间增加了一步，即开发者自己部署的服务器向极光服务器推送，然后由极光服务器向APNs推送。</p><p><img src="https://docs.jiguang.cn/jpush/client/image/jpush_ios.png" alt=""></p><blockquote><p>iOS和JPush的关系图(来源极光推送官网)</p></blockquote><p>这样做有什么意义呢？极光认为带来了下列好处:</p><ol><li>减少开发及维护成本：应用开发者不需要去开发维护自己的推送服务器与 APNs 对接。集成了 JPush iOS SDK 后不必自己维护更新 device token。通过 JPush 的 Web Portal 直接推送，也可以调用 JPush 的 HTTP 协议 API 来完成，开发工作量大大减少。</li><li>减少运营成本：极光推送支持一次推送，同时向 Android, iOS, WinPhone 三个平台。支持统一的 API 与推送界面。极光推送提供标签、别名绑定机制，以及提供了非常细分的用户分群方式，运营起来非常简单、直观。</li><li>提供应用内推送：除了使得 APNs 推送更简单，也另外提供应用内消息推送。这在类似于聊天的场景里很有必要。</li></ol><h1 id="接入前期准备"><a href="#接入前期准备" class="headerlink" title="接入前期准备"></a>接入前期准备</h1><h2 id="设置iOS消息推送证书"><a href="#设置iOS消息推送证书" class="headerlink" title="设置iOS消息推送证书"></a>设置iOS消息推送证书</h2><p>接入通知前，需要严格按照此文档配置相关证书。否则将会影响消息推送组件的正常使用。苹果开发最烦人的部分恐怕证书绝对算的上是一个了，关于推送证书的生成，这里推荐<a href="https://www.jianshu.com/p/fc962db539e6" target="_blank" rel="external">一个博客</a>，可以参考。</p><p>iOS相比于安卓比较特殊，分为生产环境(上架版)和测试环境(开发版)，最后导出极光所需要的.p12文件。导出.p12文件的坑也不少，推荐<a href="https://www.jianshu.com/p/7d4bba2f1dcb" target="_blank" rel="external">这篇博文</a>，供参考。</p><p>最终在极光控制台上，分别将生产环境和开发环境的两个.p12文件上传，通过验证后，会出现下面截图的样子。</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fvg33e6zfyj30yg0i2weu.jpg" alt=""></p><h2 id="极光平台注册"><a href="#极光平台注册" class="headerlink" title="极光平台注册"></a>极光平台注册</h2><p>在极光平台注册你的app,主要需要Bundle ID和开发者认证(企业营业执照)。注册完成后，获得重要信息:<strong>AppKey</strong>，这个码是后面一直需要使用的。</p><h2 id="极光SDK的导入"><a href="#极光SDK的导入" class="headerlink" title="极光SDK的导入"></a>极光SDK的导入</h2><p>导入极光SDK，既可以选择手动，也可以选择使用cocoapods。我使用的是cocoapods，原因很简单，因为如果不想要推送功能了，只需要在podfile里删掉pod ‘JPush’那行就行了。</p><p>导入后，一定记得要在XCode里勾上Application Target 的 Capabilities-&gt;Push Notifications 选项，否则将无法接受推送。</p><p><img src="https://docs.jiguang.cn/jpush/client/image/capabilities_intro.jpg" alt=""></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="添加bridge文件"><a href="#添加bridge文件" class="headerlink" title="添加bridge文件"></a>添加bridge文件</h2><p>因为极光推送是由OC写成，因此swift的项目里不能直接使用，需要借助桥接文件。只要在项目里新建一个OC文件，XCode就会创建一个xxx-Bridging-Header.h文件，在该文件中加入代码，就可以使用极光推送SDK了，啊真香！</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> #<span class="keyword">import</span> "JPUSHService.h"</div><div class="line">#ifdef <span class="type">NSFoundationVersionNumber_iOS_9_x_Max</span></div><div class="line">#<span class="keyword">import</span> &lt;UserNotifications/UserNotifications.h&gt;</div><div class="line">#endif</div><div class="line">#<span class="keyword">import</span> &lt;AdSupport/AdSupport.h&gt;</div></pre></td></tr></table></figure><h2 id="添加Delegate"><a href="#添加Delegate" class="headerlink" title="添加Delegate"></a>添加Delegate</h2><p>在AppDelegate.swift文件中，让AppDelegate遵从JPUSHRegisterDelegate，后面就可以使用相关代理方法了。</p><h2 id="初始化相关代码"><a href="#初始化相关代码" class="headerlink" title="初始化相关代码"></a>初始化相关代码</h2><h3 id="初始化APNs和JPush"><a href="#初始化APNs和JPush" class="headerlink" title="初始化APNs和JPush"></a>初始化APNs和JPush</h3><p>初始化代码如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line"><span class="keyword">let</span> entity = <span class="type">JPUSHRegisterEntity</span>()</div><div class="line">entity.types = <span class="number">1</span> &lt;&lt; <span class="number">0</span> | <span class="number">1</span> &lt;&lt; <span class="number">1</span> | <span class="number">1</span> &lt;&lt; <span class="number">2</span></div><div class="line"><span class="type">JPUSHService</span>.register(forRemoteNotificationConfig: entity, delegate: <span class="keyword">self</span>)</div><div class="line"></div><div class="line"><span class="keyword">let</span> advertisingId = <span class="type">ASIdentifierManager</span>.shared().advertisingIdentifier.uuidString</div><div class="line">        <span class="type">JPUSHService</span>.setup(withOption: launchOptions, appKey: <span class="string">"极光平台给分配的"</span>, channel: <span class="string">"App Store"</span>, apsForProduction: <span class="literal">true</span>, advertisingIdentifier: advertisingId)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="上报device-token"><a href="#上报device-token" class="headerlink" title="上报device_token"></a>上报device_token</h3><p>实现JPUSHRegisterDelegate的代理方法，上报device_token。device_token主要是用来帮助推送定位到特定的设备使用的。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data)</span></span> &#123;</div><div class="line">    <span class="comment">//注册 DeviceToken</span></div><div class="line">    <span class="type">JPUSHService</span>.registerDeviceToken(deviceToken)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="接收到消息的处理"><a href="#接收到消息的处理" class="headerlink" title="接收到消息的处理"></a>接收到消息的处理</h3><p>这个部分为可选，主要是用来实现用户点开通知后的特定动作，比如跳转到特定页面。这就要跟后端开发人员商量好，将特定的消息通过通知的extra选项传递过来，然后手机端在做相应的跳转。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">jpushNotificationCenter</span><span class="params">(<span class="number">_</span> center: UNUserNotificationCenter!, didReceive response: UNNotificationResponse!, withCompletionHandler completionHandler: <span class="params">(<span class="params">()</span></span></span></span> -&gt; <span class="type">Void</span>)!) &#123;</div><div class="line">      </div><div class="line">       <span class="keyword">let</span> userInfo = response.notification.request.content.userInfo</div><div class="line">       </div><div class="line">       <span class="keyword">let</span> page : <span class="type">String</span> = userInfo[<span class="type">AnyHashable</span>(<span class="string">"page"</span>)] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">       <span class="keyword">if</span>(page == <span class="string">"home"</span>) &#123;</div><div class="line">          <span class="comment">//跳转到home页面</span></div><div class="line">           </div><div class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(page == <span class="string">"display"</span>)&#123;</div><div class="line">           <span class="comment">//跳转到特定页面</span></div><div class="line">           &#125;</div><div class="line">           </div><div class="line">       &#125;</div></pre></td></tr></table></figure><p>根据通知类型跳转到不同页面的效果:<br><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fvg4hlrn7pg30om1hckjn.gif" alt=""></p><h3 id="清楚应用ICON角标"><a href="#清楚应用ICON角标" class="headerlink" title="清楚应用ICON角标"></a>清楚应用ICON角标</h3><p>当用户点进应用之后，应用角标的通知数目应该清0，否则强迫症患者会被逼疯。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">applicationWillEnterForeground</span><span class="params">(<span class="number">_</span> application: UIApplication)</span></span> &#123;</div><div class="line">        application.applicationIconBadgeNumber = <span class="number">0</span></div><div class="line">        application.cancelAllLocalNotifications()</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h3 id="设置Tags和alias"><a href="#设置Tags和alias" class="headerlink" title="设置Tags和alias"></a>设置Tags和alias</h3><p>Tags是区分通知类型的，可以给不同的推送类型打Tag，比如我想接受新题目通知，不想接收点赞通知。而alias一般是有唯一性的，需要根据用户名或手机号这种好区分的东西来分辨。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> outAlias:<span class="type">NSString</span>?</div><div class="line">            <span class="keyword">var</span> outTags:<span class="type">NSSet</span>?</div><div class="line">            (outAlias, outTags) = <span class="keyword">self</span>.analyseInput(alias <span class="keyword">as</span> <span class="type">NSString</span>!, tags: tags)</div><div class="line"></div><div class="line"><span class="type">JPUSHService</span>.setTags(outTags <span class="keyword">as</span>! <span class="type">Set</span>&lt;<span class="type">String</span>&gt;, completion: &#123; (a, b, <span class="built_in">c</span>) <span class="keyword">in</span></div><div class="line"></div><div class="line">            &#125;, seq: <span class="number">1</span>)</div><div class="line">            </div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">analyseInput</span><span class="params">(<span class="number">_</span> alias:NSString!, tags:NSSet!)</span></span>-&gt;(<span class="type">NSString</span>?,<span class="type">NSSet</span>?) &#123;</div><div class="line">        <span class="keyword">var</span> outAlias:<span class="type">NSString</span>?</div><div class="line">        <span class="keyword">var</span> outTags:<span class="type">NSSet</span>?</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> alias.length == <span class="number">0</span> &#123;</div><div class="line">            outAlias = <span class="literal">nil</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            outAlias = alias</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> tags.<span class="built_in">count</span> == <span class="number">0</span> &#123;</div><div class="line">            outTags = <span class="literal">nil</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            outTags = tags</div><div class="line">            <span class="keyword">var</span> emptyStringCount = <span class="number">0</span></div><div class="line">            tags.enumerateObjects(&#123; (tag:<span class="type">Any</span>, stop:<span class="type">UnsafeMutablePointer</span>&lt;<span class="type">ObjCBool</span>&gt;) -&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line">                <span class="keyword">if</span> (tag <span class="keyword">as</span> <span class="type">AnyObject</span>).isEqual(to: <span class="string">""</span>) &#123;</div><div class="line">                    emptyStringCount += <span class="number">1</span></div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    emptyStringCount = <span class="number">0</span></div><div class="line">                    stop.pointee = <span class="literal">true</span></div><div class="line">                &#125;</div><div class="line">                &#125; <span class="keyword">as</span>! (<span class="type">Any</span>, <span class="type">UnsafeMutablePointer</span>&lt;<span class="type">ObjCBool</span>&gt;) -&gt; <span class="type">Void</span>)</div><div class="line">            <span class="keyword">if</span> emptyStringCount == tags.<span class="built_in">count</span> &#123;</div><div class="line">                outAlias = <span class="literal">nil</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (outAlias,outTags)</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h1 id="上架前的提醒"><a href="#上架前的提醒" class="headerlink" title="上架前的提醒"></a>上架前的提醒</h1><p>提交新版本或者初次上架之前，最后会遇到一个关于IDFA的选项。</p><blockquote><p>您的 App 正在使用广告标识符 (IDFA)。您必须先提供关于 IDFA 的使用信息或将其从 App 中移除，然后再上传您的二进制文件。</p></blockquote><p><strong>记得要勾上是</strong>。否则会遇到麻烦。</p><p><img src="http://upload-images.jianshu.io/upload_images/1088461-31b95b90500c3cb2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt=""></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="http://blog.jiguang.cn/apns/" target="_blank" rel="external">APNs 推送原理及问题</a></li><li><a href="https://docs.jiguang.cn/jpush/client/iOS/ios_guide_new/" target="_blank" rel="external">iOS SDK 集成指南</a></li><li><a href="https://www.jianshu.com/p/fc962db539e6" target="_blank" rel="external">ios 消息推送证书设置和整理(备忘)</a></li><li><a href="https://www.jianshu.com/p/7d4bba2f1dcb" target="_blank" rel="external">p12证书导出按钮为灰色的处理办法</a></li><li><a href="https://blog.csdn.net/WiKi_Su/article/details/78647307" target="_blank" rel="external">iOS提交审核：您的 App 正在使用广告标识符 (IDFA)</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在接入极光推送过程中，发现&lt;a href=&quot;https://docs.jiguang.cn/jpush/client/iOS/ios_gui
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="http://zhihaozhang.github.io/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus+微信实时报警模块的实现与Docker部署</title>
    <link href="http://zhihaozhang.github.io/2018/09/09/prometheusPlusWechat/"/>
    <id>http://zhihaozhang.github.io/2018/09/09/prometheusPlusWechat/</id>
    <published>2018-09-09T14:13:06.130Z</published>
    <updated>2018-09-09T14:13:22.313Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>对很多公司而言，保证服务可用，在服务不可用时报警到相关服务负责人提醒其及时修复，是非常重要的一件事。在我司，看服务可不可用，是分配给员工们还停留在人眼观察阶段。由行政人员安排轮流值班，每个人负责两周。</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fv3bsl5dfvj30u00m6jvk.jpg" alt=""></p><blockquote><p>每人两周的值班表</p></blockquote><p>我觉得这个事情由人来看有三个缺点：</p><ol><li>浪费了人力，值班的人不能全心全意把心思放到工作上。</li><li>报警不够及时，值班人员不可能时刻将注意力放在这上面。</li><li>值班人员只是将异常的服务截图发到群里，有可能不知道通知谁来处理，且真实的责任人看到这个截图又需要一定时间。</li></ol><p>这眼看着很快就要轮到我了，我比较<strong>懒</strong>，于是就找<strong>旁门左道</strong>来替我处理这件事了。</p><h1 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h1><h2 id="普罗米修斯介绍"><a href="#普罗米修斯介绍" class="headerlink" title="普罗米修斯介绍"></a>普罗米修斯介绍</h2><p><a href="https://github.com/prometheus" target="_blank" rel="external">Prometheus（普罗米修斯）</a>是一套开源的<strong>监控/报警/时间序列</strong>数据库的组合,由<strong>SoundCloud</strong>公司开发。</p><p>Prometheus基本原理是通过HTTP协议周期性抓取被监控组件的状态，这样做的好处是任意组件只要提供HTTP接口就可以接入监控系统，不需要任何SDK或者其他的集成过程。这样做非常适合虚拟化环境比如VM或者Docker。</p><p>Prometheus应该是为数不多的适合Docker、Mesos、Kubernetes环境的监控系统之一。</p><p><img src="https://upload-images.jianshu.io/upload_images/1814710-bb27d75d61b730a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/796" alt=""></p><blockquote><p>普罗米修斯架构图</p></blockquote><h2 id="Alertmanager模块的扩展-Email-VS-Wechat"><a href="#Alertmanager模块的扩展-Email-VS-Wechat" class="headerlink" title="Alertmanager模块的扩展 Email VS Wechat"></a>Alertmanager模块的扩展 Email VS Wechat</h2><p>普罗米修斯<em>Alertmanager模块</em>提供了<strong>Email</strong>通知，但是用户查Email不频繁，而且很容易将用户邮箱塞满，以至于后面被邮箱系统判为垃圾邮件，失去了通知的意义。</p><p>和<strong>邮件</strong>形成对比的是<strong>微信</strong>，微信似乎已经成了大部分人手机里使用最频繁的软件了，而且有桌面客户端，即使不看手机，在电脑上工作也能收到消息。一收到消息，特别是@到自己的消息，好奇心会趋势用户打开，看到了自己的服务出现了错误，在群聊里丢了脸，会尽力尽快修复，这也达到了及时通知的目的。</p><h2 id="wechaty"><a href="#wechaty" class="headerlink" title="wechaty"></a>wechaty</h2><p>之前美团和饿了么红包在微信里抢大红包，我那时候第一次知道微信有自动分组、回复和对消息的监听的框架。我在GitHub里搜到了一个叫<a href="https://github.com/wechaty/wechaty" target="_blank" rel="external">wechaty</a>的开源微信SDK，它基于微信公开的API，对接口进行了一系列的封装，提供一系列简单的接口，然后开发者可以在其之上进行微信机器人的开发。</p><blockquote><p>最终促使我使用这个库的原因很简单，是一个墙外用户的评价:**”太好用，好用的想哭”。没想到我后面在墙内部署的时候，真的哭了。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Wechaty.instance()</div><div class="line">.on(<span class="string">'scan'</span>, (url, code) =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(url)</div><div class="line">    <span class="keyword">let</span> loginUrl = url.replace(<span class="string">'qrcode'</span>, <span class="string">'l'</span>)</div><div class="line">    QrcodeTerminal.generate(loginUrl)</div><div class="line">  &#125;)</div><div class="line">.on(<span class="string">'login'</span>,user =&gt; &#123;<span class="built_in">console</span>.log(<span class="string">`User <span class="subst">$&#123;user&#125;</span> logined`</span>)&#125;)</div><div class="line">.on(<span class="string">'message'</span>, <span class="keyword">async</span> (message) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> contact = message.from()</div><div class="line">    <span class="keyword">const</span> content = message.text()</div><div class="line">    <span class="keyword">const</span> room = message.room()</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(room.toString() == <span class="string">"Room&lt;群聊名&gt;"</span>)&#123;</div><div class="line">        heliumMessage = message</div><div class="line">        heliumRoom = room</div><div class="line">    &#125;</div><div class="line">&#125;).start()</div><div class="line"></div><div class="line">server.post(<span class="string">'/sendMsg'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">if</span>(heliumMessage)&#123;</div><div class="line">    heliumMessage.say(req.body.msg)</div><div class="line">  &#125;</div><div class="line">    </div><div class="line">&#125;).listen(<span class="number">3000</span>)</div></pre></td></tr></table></figure><p>配合node.js用起来真挺方便的，如果起在本地，已经可以正常的工作了。虽然有个小瑕疵，就是需要在群聊里先说一句话，才能找到这个群聊，因为群聊跟联系人还不同。</p><h2 id="部署在docker端"><a href="#部署在docker端" class="headerlink" title="部署在docker端"></a>部署在docker端</h2><p>因为本地机器的IP地址是会发生变化的，因此需要将这个服务部署到docker端，且wechaty宣称支持docker端部署，于是就进行了一番尝试。</p><p>部署到docker，首先遇到的问题的是无法将二维码或url实时传出来，除非通过查询log文件。于是就在代码里集成了邮件模块，将二维码的url以邮件的形式发出来。url里有个坑，刚开始发出来的url是经过替换的，需要将/r/换成/qrcode/。</p><p>wechaty是需要<em>红芯浏览器(chromium)内核</em>的，需要科学的上网方式，整个Image build完之后居然有2G。node的版本也需要v8，v10检查会严格一些，跑不通。</p><p><em>(dockerfile附录于文末)</em></p><h1 id="反响和未来工作"><a href="#反响和未来工作" class="headerlink" title="反响和未来工作"></a>反响和未来工作</h1><p>服务投入使用第一天，值班人员觉得没他什么事了，我就觉得我做这项工作是值得的，减轻了所有人值班的压力。</p><p><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1fv3f4r80h3j30le0dg74t.jpg" alt=""></p><blockquote><p>报警样例与值班人员的反响</p></blockquote><p>现在遇到的问题是报警给很多人，后面想实现一个基于订阅的点对点推送应用。</p><p>#附录 Dockerfile</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">FROM ubuntu:18.04</div><div class="line"></div><div class="line">ENV DEBIAN_FRONTEND     noninteractive</div><div class="line">ENV WECHATY_DOCKER      1</div><div class="line">ENV LC_ALL              C.UTF-8</div><div class="line">ENV NODE_ENV            $NODE_ENV</div><div class="line">ENV NPM_CONFIG_LOGLEVEL warn</div><div class="line"></div><div class="line"># Installing the &apos;apt-utils&apos; package gets rid of the &apos;debconf: delaying package configuration, since apt-utils is not installed&apos;</div><div class="line"># error message when installing any other package with the apt-get package manager.</div><div class="line"># https://peteris.rocks/blog/quiet-and-unattended-installation-with-apt-get/</div><div class="line">RUN apt-get update &amp;&amp; apt-get install -y --no-install-recommends \</div><div class="line">    apt-utils \</div><div class="line">    bash \</div><div class="line">    build-essential \</div><div class="line">    ca-certificates \</div><div class="line">    curl \</div><div class="line">    coreutils \</div><div class="line">    ffmpeg \</div><div class="line">    figlet \</div><div class="line">    git \</div><div class="line">    gnupg2 \</div><div class="line">    jq \</div><div class="line">    libgconf-2-4 \</div><div class="line">    moreutils \</div><div class="line">    python-dev \</div><div class="line">    shellcheck \</div><div class="line">    sudo \</div><div class="line">    tzdata \</div><div class="line">    vim \</div><div class="line">    wget \</div><div class="line">  &amp;&amp; apt-get purge --auto-remove \</div><div class="line">  &amp;&amp; rm -rf /tmp/* /var/lib/apt/lists/*</div><div class="line"></div><div class="line">RUN curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash - \</div><div class="line">    &amp;&amp; apt-get update &amp;&amp; apt-get install -y --no-install-recommends nodejs \</div><div class="line">    &amp;&amp; apt-get purge --auto-remove \</div><div class="line">    &amp;&amp; rm -rf /tmp/* /var/lib/apt/lists/*</div><div class="line"></div><div class="line"># https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md</div><div class="line"># https://github.com/ebidel/try-puppeteer/blob/master/backend/Dockerfile</div><div class="line"># Install latest chrome dev package.</div><div class="line"># Note: this also installs the necessary libs so we don&apos;t need the previous RUN command.</div><div class="line"></div><div class="line">RUN apt-get update -q </div><div class="line">RUN sudo apt-get install -y chromium-browser  xvfb libpango1.0-0 fonts-liberation libappindicator1 libdbusmenu-glib4 libdbusmenu-gtk4   libindicator7 indicator-application</div><div class="line">RUN apt-get install -f -y gconf-service gconf2-common  libgconf-2-4 gconf-service-backend</div><div class="line"></div><div class="line">RUN wget -c https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</div><div class="line">RUN sudo dpkg -i google-chrome-stable_current_amd64.deb</div><div class="line">RUN nohup Xvfb :0 -ac -screen 0 1024x768x24 &amp;</div><div class="line">RUN export DISPLAY=0:0</div><div class="line"></div><div class="line">RUNecho Asia/Shanghai &gt; /etc/timezone&amp;&amp;\</div><div class="line">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</div><div class="line"></div><div class="line">RUN apt-get update &amp;&amp; apt-get install -y tar</div><div class="line"></div><div class="line">WORKDIR /opt</div><div class="line"></div><div class="line">RUN mkdir -p /opt/wechat_robot</div><div class="line">COPY package.json /opt/wechat_robot/</div><div class="line">COPY wechat.js /opt/wechat_robot</div><div class="line">COPY start.sh /opt/wechat_robot</div><div class="line">RUN mkdir -p /opt/wechat_robot/node_modules</div><div class="line">COPY node_modules/ /opt/wechat_robot/node_modules/</div><div class="line"></div><div class="line">RUN chmod +x /opt/wechat_robot/start.sh</div><div class="line"></div><div class="line">ENTRYPOINT  [ &quot;/bin/bash&quot;, &quot;/opt/wechat_robot/start.sh&quot; ]</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;对很多公司而言，保证服务可用，在服务不可用时报警到相关服务负责人提醒其及时修复，是非常重要的一件事。在我司，看服务可不可用，是分配给员工们还
      
    
    </summary>
    
      <category term="监控" scheme="http://zhihaozhang.github.io/categories/%E7%9B%91%E6%8E%A7/"/>
    
    
      <category term="效率" scheme="http://zhihaozhang.github.io/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>上架沙盒化应用,重启应用后保持文件持久访问性指南</title>
    <link href="http://zhihaozhang.github.io/2018/08/24/invisibilitycloak/"/>
    <id>http://zhihaozhang.github.io/2018/08/24/invisibilitycloak/</id>
    <published>2018-08-24T09:44:50.320Z</published>
    <updated>2018-08-25T05:54:01.106Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><em>Invisibility Cloak</em>上架Mac App Store了，在此过程中，遇到了一些困难，在这里记录一下又一次与苹果审核团队撕逼的过程。</p><p>开发这款软件的<strong>初衷</strong>是<del>将xxx.mp4/xxx.avi/xxx.mkv在白天藏起来，免得被别人发现。</del> 在Apple store上发现了一款类似的文件隐藏软件<strong>Secret Folder</strong>，售价128元，而且卖的不错。我觉得这个应用蛮有用(坏笑)，而且实现起来难度不是特别大，于是就做了一个相同功能的软件，并将它上架了。</p><p>功能上，我额外支持了drag&amp;drop添加文件的操作，比Secret Folder的体验更<strong>丝滑</strong>一些。定价上，仅为<strong>Secret Folder</strong>的一折，12RMB，现在特价一周，仅售6元，<em>有将某些文件在白天或演讲时藏起来的朋友们别错过。</em> <a href="https://itunes.apple.com/cn/app/invisibility-cloak/id1426266978?mt=12" target="_blank" rel="external">苹果商店下载地址</a></p><p align="center"><br>  <a href="https://itunes.apple.com/cn/app/invisibility-cloak/id1426266978?mt=12" target="_blank" rel="external"><br>    <img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fukxuftu8vj309g09gt8n.jpg" width="200"><br>  <img alt="Download on the app store" src="https://user-images.githubusercontent.com/7317008/43209852-4ca39622-904b-11e8-8ce1-cdc3aee76ae9.png" width="160"><br>  </a><br></p><h1 id="上架过程中遇到的坑"><a href="#上架过程中遇到的坑" class="headerlink" title="上架过程中遇到的坑"></a>上架过程中遇到的坑</h1><p>不得不说，mac应用的审核比iOS应用的审核快多了，短短两天内审核了四次，这或许也从一定程度上反映了两者提交应用数量的差别。</p><p>第一次拒绝我的原因很<strong>奇葩</strong>，说我的名字起的不好，<strong>AVHider</strong>难道有些露骨？</p><p>第二次拒绝我是因为我勾选了Downloads/Picture/Music/Movie folder的读写权限，隐藏文件嘛，能Access的路径当然是越多越好了，但苹果不这么认为，他认为不该勾选的权限绝不能勾。</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fugf3euvrlj313q0qggml.jpg" alt=""></p><blockquote><p>沙盒中的File Access</p></blockquote><p>第三次被拒其实有点懵，因为我在《macOS开发基础教程》这本书里看到说如果要上架，一定要勾上sandbox和printing，但苹果审核团队以printing对我没用为由，拒绝了我。或许是我理解有误，也有可能是作者的笔误。</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fugfcmp305j311g0dggmq.jpg" alt=""></p><blockquote><p>《macOS开发基础教程》一书中关于上架前注意事项的描述</p></blockquote><p>第四次拒绝的原因是为了解决所有路径文件可用性时，我采取了一种粗暴的手法，直接在.entitlements文件里增加了根目录，即所有文件</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;key&gt;com.apple.security.temporary-exception.files.absolute-path.read-write&lt;/key&gt;</div><div class="line">&lt;array&gt;</div><div class="line">    &lt;string&gt;/&lt;/string&gt;</div><div class="line">&lt;/array&gt;</div></pre></td></tr></table></figure><p>苹果让我重新找其他方法上架，于是我找到了本文需要重点介绍的:<strong>com.apple.security.files.bookmarks.app-scope</strong>.</p><h1 id="沙盒访问机制中的File-Access"><a href="#沙盒访问机制中的File-Access" class="headerlink" title="沙盒访问机制中的File Access"></a>沙盒访问机制中的File Access</h1><p>在iOS和macOS中，每个应用都有一个<strong>专属</strong>存储空间，它就是<strong>沙盒(sandbox)</strong>。就macOS来说，苹果规定从macOS X 10.6开始，所有发布到Mac App Store的应用都必须遵从沙盒约定，主要是考虑到第三方恶意应用对系统进行攻击，从安全性角度出发， 对应用访问的系统资源,硬件外设,文件,网络,XPC等做了严格的限制。</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fukwjs9uylj31iu0pq0x0.jpg" alt=""></p><blockquote><p>引入沙盒机制前后APP对系统资源、数据开放程度对比</p></blockquote><p>在没有上架之前，我没有考虑过这个问题，同样，如果你的应用不准备上架，可以不开启Sandbox，随意访问mac上的文件和数据。</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fukwohw5ofj30is05ujts.jpg" alt=""></p><blockquote><p>Sandbox中的File Access</p></blockquote><p>经过第二次被拒之后，我只勾上了用户选择的文件这个Type的读/写权限。但我很快就发现了问题，在应用没重启之前，一切正常运行，但是应用退出再重新打开之后，之前的文件就失去了读写的权限。</p><p>我们需要找到一种策略，让app<strong>记住</strong>我们曾经有过某个文件路径的读写权限，这就是app-scoped bookmark。翻译成中文是<strong>书签</strong>，也很好理解，就好像我们读一本书，某天读累了，<em>夹一张书签在上次看过的地方，下次我们再读的时候，就可以快速回到这一页，而不必从头开始一页页的翻阅了。</em></p><p>既然要记录下来，就涉及到持久化的问题，由于书签比较轻量级，因此我选用了相对简单的<strong>NSUserDefaults</strong>. 网上有OC版本的代码，我用Swift进行了改写，代码如下:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">saveBookmarks</span><span class="params">(<span class="number">_</span> filePath : String)</span></span>&#123;</div><div class="line"> </div><div class="line">       <span class="keyword">let</span> userDefault = <span class="type">UserDefaults</span>.standard</div><div class="line">       <span class="keyword">let</span> folderPath = <span class="type">NSURL</span>(fileURLWithPath: filePath)</div><div class="line">       <span class="built_in">print</span>(folderPath.absoluteString!)</div><div class="line">       <span class="keyword">do</span> &#123;</div><div class="line">           <span class="keyword">let</span> bookmark = <span class="keyword">try</span> folderPath.bookmarkData(options: .securityScopeAllowOnlyReadAccess, includingResourceValuesForKeys: <span class="literal">nil</span>, relativeTo: <span class="literal">nil</span>)</div><div class="line">           userDefault.<span class="keyword">set</span>(bookmark, forKey: folderPath.absoluteString!)</div><div class="line">       &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">           <span class="built_in">print</span>(<span class="string">"Set Bookmark Fails: <span class="subst">\(error.description)</span>"</span>)</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   <span class="function"><span class="keyword">func</span> <span class="title">readBookmarks</span><span class="params">(<span class="number">_</span> filePath : String)</span></span>&#123;</div><div class="line">       </div><div class="line">       <span class="keyword">let</span> userDefault = <span class="type">UserDefaults</span>.standard</div><div class="line">       <span class="keyword">if</span> <span class="keyword">let</span> bookmarkData = userDefault.object(forKey: filePath) <span class="keyword">as</span>? <span class="type">NSData</span> &#123;</div><div class="line">           <span class="keyword">do</span> &#123;</div><div class="line">               <span class="keyword">let</span> url = <span class="keyword">try</span> <span class="type">NSURL</span>.<span class="keyword">init</span>(resolvingBookmarkData: bookmarkData <span class="keyword">as</span> <span class="type">Data</span>, options: .withoutUI, relativeTo: <span class="literal">nil</span>, bookmarkDataIsStale: <span class="literal">nil</span>)</div><div class="line">               url.startAccessingSecurityScopedResource()</div><div class="line">           &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</div><div class="line">               <span class="built_in">print</span>(<span class="string">"Bookmark Access Fails: <span class="subst">\(error.description)</span>"</span>)</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><p>分为<strong>保存</strong>书签和<strong>读取</strong>书签两个函数，考虑到key的唯一性，为了避免冲突我以文件路径为key存bookmark。每次应用启动之后，都根据之前的路径索取这些路径的读写权限。当然这里也是有<strong>注意点</strong>的，主要是当文件路径中包含<em>数字、字母之外</em>的字符(如中文字符、特殊字符等)时，需要注意<strong>转码</strong>。</p><h1 id="上架后思考"><a href="#上架后思考" class="headerlink" title="上架后思考"></a>上架后思考</h1><p>上架的第一天，在中国区付费应用总排行榜出乎我的意料的排到了第121名。这件事说明了: 1.小而美的应用是有市场的；2.用户对价格还是很敏感的；3.不少用户愿意为他们需要的应用付费。</p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fuger4jpwtj31kw10j46x.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;em&gt;Invisibility Cloak&lt;/em&gt;上架Mac App Store了，在此过程中，遇到了一些困难，在这里记录一下又一次与苹
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="macOS开发" scheme="http://zhihaozhang.github.io/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Match for iPhone开发笔记 叁 测试与上架篇</title>
    <link href="http://zhihaozhang.github.io/2018/08/02/Match3/"/>
    <id>http://zhihaozhang.github.io/2018/08/02/Match3/</id>
    <published>2018-08-02T07:31:04.373Z</published>
    <updated>2018-09-20T10:09:24.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>“Match问答”App今天终于通过了苹果的审核，在<em>App Store上架了，</em><a href="https://itunes.apple.com/cn/app/match问答/id1414728016?mt=8" target="_blank" rel="external">苹果商店下载地址</a>，不得不说，苹果的审核还是很严格的。因此今天想写一下从提交审核到被拒(<em>若干回合</em>)再到最终上架这段时间里的故事，其他技术方面的<strong>难点总结</strong>放到后面写。</p><h1 id="上架前的必经之路————测试"><a href="#上架前的必经之路————测试" class="headerlink" title="上架前的必经之路————测试"></a>上架前的必经之路————测试</h1><p>在上架之前有一个关键的步骤其实很容易被<strong>忽略</strong>，特别是<em>个人开发者</em>，没法像公司那样聘请专业的测试团队进行完备的测试。大体上讲，iOS的测试可以分为3类:</p><ol><li>单元测试、UI测试、性能测试、集成测试，通常在模拟器上进行</li><li>真机测试</li><li>Testflight内测</li></ol><h2 id="模拟器测试"><a href="#模拟器测试" class="headerlink" title="模拟器测试"></a>模拟器测试</h2><p>第一类测试通常可以发现App里所有可能的<strong>逻辑错误</strong>、<strong>排版问题</strong>和<strong>用户体验</strong>，在进行真机测试之前，一般需要保证模拟器适配各个手机尺寸，需要特别注意的是iPhone X<em>刘海的打理</em>。因为iPhone大小各异，而独立开发者通常不会有所有屏幕尺寸的机型，因此模拟器进行全面测试很有必要。</p><h2 id="真机测试"><a href="#真机测试" class="headerlink" title="真机测试"></a>真机测试</h2><p>第二类测试是<em>真机测试</em>，和模拟器的区别主要集中在<strong>功能</strong>和<strong>硬件</strong>两方面。功能方面，模拟器不支持信息、通话、短信、Accessibility功能(为残障人士准备);硬件方面，模拟器没有蓝牙、相机等硬件，模拟不了相关功能。如果使用了上述的功能，<strong>必须</strong>真机测试。即使没有使用，也应该安装到真机试试，<em>如果你自己都不想用这个APP，别人更不会用</em>。</p><h2 id="Testflight内测"><a href="#Testflight内测" class="headerlink" title="Testflight内测"></a>Testflight内测</h2><p>第三类也是需要苹果审核的，不过Testflight通常比较松，没有明显的bug、闪退一般会在24小时内批准。这一步通过之后，就可以<strong>邀请</strong>更多的亲朋好友来使用了，注意，这一步是<strong>邀请制</strong>的。需要开发者在<a href="https://appstoreconnect.apple.com/WebObjects/iTunesConnect.woa/ra/ng/app/1414728016/testflight?section=iosbuilds" target="_blank" rel="external">itunes connect</a>里手动添加相关测试人员的iCloud账号，当然也是支持<strong>CSV批量导入</strong>功能的。</p><p>当然Testflight测试也有限制，目前的限制提现在两方面:测试时间不超过<strong>90</strong>天、总测试人数上限是<strong>10000</strong>人，对于大部分应用来说已经很足够了。</p><p><img src="https://ws2.sinaimg.cn/large/0069RVTdgy1ftvhqlaq9kj31kw0yctbb.jpg" alt=""></p><blockquote><p>TestFilght页截图，可见信息有测试剩余天数、邀请数、安装数、活跃用户数、崩溃数</p></blockquote><h2 id="App崩溃的可能原因"><a href="#App崩溃的可能原因" class="headerlink" title="App崩溃的可能原因"></a>App崩溃的可能原因</h2><p>在测试过程中，App崩溃会经常发生。我遇到的比较常见的原因有:</p><ol><li>代码出错</li><li>OOM</li><li>网络状况</li><li>cocoapods的问题</li></ol><p>代码出错很常见，比如我经常犯的错误是ViewController的<em>强制向下转型**，明明不是某个特定VC，你强制向他转，肯定会出错；JSON编码解码也经常会出错，如果没有相应机制，就会引起闪退。</em>Objective-C*动态性能比较好，[obj method]这行代码即使obj对象没有method这个方法，在编译器也是不会报错的，但是运行时就会出错。</p><p>内存不够主要是应用在运行时占用了大量收集内存，使得系统强制将应用回收了。通过<strong>Instruments</strong>可以找到原因。</p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdly1ftvo50ywacj30vk0iy3zd.jpg" alt=""></p><blockquote><p>Instruments截图</p></blockquote><p>网络状况出问题主要是网络不佳(<em>蜂窝2G/3G信号网速慢</em>)造成了相应超时;另外也有可能是后端服务器down掉了(<strong>请求太多处理不过来或受到攻击</strong>)。</p><p>cocoapods里的第三方库质量参差不齐，很难保证没有错误，我在开发Match初期就引了一个非常小众的库(<em>这里就不点名了</em>)，已经不work了。我没有<em>深究原因</em>，有可能是Swift版本原因或者我个人使用有误。后面换了一个star数很多的库，就解决了。总体来说，那些<strong>大名鼎鼎、维护比较勤、关注度高</strong>的库比较<strong>solid</strong>一点，也推荐大家尽量使用那样的库。</p><h1 id="上架"><a href="#上架" class="headerlink" title="上架"></a>上架</h1><p>上架的流程比较复杂，具体的操作步骤我在这里就不展开介绍了，有需求的读者可以参考<a href="http://www.xiaoboswift.com/course/44" target="_blank" rel="external">这个教程</a>。</p><p>上架过程中会遇到一些坑，我不能全方面覆盖，只能结合一些自身经历给大家一些建议。</p><h2 id="第一次提交审核-gt-Reject"><a href="#第一次提交审核-gt-Reject" class="headerlink" title="第一次提交审核 -&gt; Reject"></a>第一次提交审核 -&gt; Reject</h2><p>返回意见：</p><p><strong>Guideline 2.1 - Information Needed</strong></p><p>We have started the review of your app, but we were unable to successfully register for an in-app account. In order for us to review your app, please provide a demo account so that we may fully assess your app’s features.</p><p>第一次返回的意见是让我提供一个账户给他。Match采用的是短信动态验证，虽然我在审核信息里也说了需要审核人员填自己的手机号<em>动态获取</em>。。。但是! 谁让他的爷呢，我不得不给应用开了<strong>后门</strong>，乖乖的重新提交第二个版本。</p><p>第一次审核时间真是快，<strong>24小时内</strong>。</p><h2 id="第二次审核-gt-Reject"><a href="#第二次审核-gt-Reject" class="headerlink" title="第二次审核  -&gt; Reject"></a>第二次审核  -&gt; Reject</h2><p>返回意见：<br><strong>Guideline 2.1 - Information Needed</strong></p><p>This type of app has been identified as one that may violate one or more of the following App Store Review Guidelines. Specifically, these types of apps often:</p><p>1.1.6 - Include false information, features, or misleading metadata.</p><p>2.3.0 - Undergo significant concept changes after approval</p><p>2.3.1 - Have hidden or undocumented features, including hidden “switches” that redirect to a gambling or lottery website</p><p>3.1.1 - Use payment mechanisms other than in-app purchase to unlock features or functionality in the app</p><p>3.2.1 - Do not come from the financial institution performing the loan services</p><p>4.3.0 - Are a duplicate of another app or are conspicuously similar to another app</p><p>5.2.1 - Were not submitted by the legal entity that owns and is responsible for offering any services provided by the app</p><p>5.2.3 - Facilitate illegal file sharing or include the ability to save, convert, or download media from third party sources without explicit authorization from those sources</p><p>5.3.4 - Do not have the necessary licensing and permissions for all the locations where the app is used</p><p><strong>Guideline 5.1.1 - Legal - Privacy - Data Collection and Storage</strong></p><p>We noticed that your app requests the user’s consent to access their camera and photos but does not clarify the use of this feature in the permission modal alert.</p><p>第二次审核终于进入正题了，<em>Guideline 2.1</em>给的意见比较<strong>模糊</strong>，审核人员只是将所有的条款列了出来，并没有具体说到底违反了哪条。</p><p><em>Guideline 5.1.1</em>是个坑，我搜了一下，很多其他开发者也都中过招。我记得之前在<strong>infoplist</strong>里是说了需要获得<em>相机/相册</em>的权限的，但是5.1.1说的是，你不仅需要申明你需要使用相机/相册，还要说<strong>为什么需要使用</strong>，编造一个原因吧。</p><p>针对<em>Guideline 2.1</em>，我们为了得到比较具体的回复，针对条款，<strong>逐条</strong>进行了回复，写了整整一页纸。</p><p>第二次审核时间：<strong>2天。</strong></p><h2 id="第三次审核-gt-Reject"><a href="#第三次审核-gt-Reject" class="headerlink" title="第三次审核  -&gt; Reject"></a>第三次审核  -&gt; Reject</h2><p><em>Guideline 2.1 - Information Needed</em></p><ul><li>How do users obtain 积分?</li></ul><p>终于得到了不那么应付的2.1，原来是审核人员对我们应用内的虚拟货币的获取方式产生了怀疑。这点其实挺<strong>尴尬</strong>的，因为苹果不让接入支付宝和微信购买虚拟的货品，而内购的方式苹果会抽成<strong>30</strong>%，这个比例对于我们来说太高了。因此，我们制定了一个策略，即每天登陆送1个积分；内购功能正在做(<em>其实还没有</em>)，回复了苹果提出的问题。</p><p><em>Guideline 2.3.10 - Performance - Accurate Metadata</em></p><ul><li>We noticed that your app or its metadata includes irrelevant third-party platform information. </li></ul><p>Specifically, a non-iOS status bar is shown in the screenshots.</p><p>Referencing third-party platforms in your app or its metadata is not permitted on the App Store unless there is specific interactive functionality.</p><p>针对<em>2.3.10</em>，这点大家也需要特别注意，苹果特别<strong>反感安卓</strong>，在任何审核人员可见的地方，尽量不要出现安卓这个词。</p><p>问答系统里有很多安卓用户，回答高数的形式主要有两种，一种是在纸上手写答案；第二种是在软件内写公式和推导过程，写完后，用户直接截图，就会有安卓系统的顶栏。这点也被审核人员吐槽了，没办法，只能<strong>认错</strong>，说我们会尽量要求用户去掉顶栏。</p><p>第三次审核时间长了起来：<strong>5天</strong>,包含了<strong>周末两天</strong>。</p><h2 id="第四次审核-gt-Reject"><a href="#第四次审核-gt-Reject" class="headerlink" title="第四次审核  -&gt; Reject"></a>第四次审核  -&gt; Reject</h2><p>第四次审核返回的还是2.1，关于用户获取如何积分的疑问。可能不是同一个审核人员吧，没有看我们的回复？这次我直接将首次针对这条的回复贴了进去，也是想得到一个不那么敷衍的回复罢了。</p><p>第四次审核时间:<strong>3天</strong>。</p><h2 id="第五次审核-gt-Accepted"><a href="#第五次审核-gt-Accepted" class="headerlink" title="第五次审核 -&gt; Accepted"></a>第五次审核 -&gt; Accepted</h2><p>不抱任何希望的情况下，今早收到了通知，居然被允许上架了，苹果审核真是<strong>玄学</strong>。虽然这时候已经做了最坏的打算，并开始2.0新版本的开发了，这其中就包括了<strong>内购</strong>，但1.0最终被接受也算是一件振奋人心好事儿。</p><blockquote><p>苹果审核挺蛋疼的，需要做好被拒绝几次的准备。</p></blockquote><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>至此，我完成了当初给<strong>XZJ同学</strong>许诺的让Match上架App Store的约定。在1个月时间内利用下班时间重拾iOS开发技巧，<strong>熬夜</strong>克服了一个又一个困难，现在回想起来还挺<strong>值得</strong>的。看到别人手机、电脑上跑着我写的应用，是我作为一个程序员最大的<strong>满足</strong>。</p><p>最后，打一个广告，欢迎各位同学使用Match来学高数、赚零花钱。<strong>各大应用商店有售!</strong></p><p align="center"><br>  <a href="https://itunes.apple.com/cn/app/match问答/id1414728016?mt=8" target="_blank" rel="external"><br>  <img alt="Download on the app store" src="https://user-images.githubusercontent.com/7317008/43209852-4ca39622-904b-11e8-8ce1-cdc3aee76ae9.png" width="160"><br>  </a><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;“Match问答”App今天终于通过了苹果的审核，在&lt;em&gt;App Store上架了，&lt;/em&gt;&lt;a href=&quot;https://itune
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="http://zhihaozhang.github.io/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>浅谈函数式编程 (Introducing Functional Programming)</title>
    <link href="http://zhihaozhang.github.io/2018/07/30/FunctionalPrograming/"/>
    <id>http://zhihaozhang.github.io/2018/07/30/FunctionalPrograming/</id>
    <published>2018-07-30T12:30:44.000Z</published>
    <updated>2018-08-01T09:16:20.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近两周利用空余时间<strong>艰难</strong>“啃完”了objc.io出版的<a href="https://objccn.io/products/functional-swift/" target="_blank" rel="external">《函数式Swift》</a>这本书，感觉有些摸到了函数式编程的门道;在函数式编程<strong>思维</strong>的影响下，将之前的项目代码进行了改造。关于函数式编程，也算是有了一点心得，遂写成此文，虽然行文主要是以Swift为<strong>载体</strong>，但并不影响函数式思想的介绍。由于本人才疏学浅，而函数式编程本身<em>博大精深</em>，故谬误在所难免，如发现，还请指出。</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fts0h9ibzrj31kw0r2ahf.jpg" alt=""></p><blockquote><p>《函数式Swift》</p></blockquote><h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><h2 id="WHAT-is-函数式编程"><a href="#WHAT-is-函数式编程" class="headerlink" title="WHAT is 函数式编程"></a>WHAT is 函数式编程</h2><p>wiki对于函数式编程的定义如下:</p><blockquote><p>In computer science, functional programming is a <strong>programming paradigm</strong>—a style of building the structure and elements of computer programs—that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data. It is a <strong>declarative</strong> programming paradigm, which means programming is done with expressions or declarations instead of statements. </p></blockquote><p>我认为最重要的两个单词是<strong>programming Paradigm</strong>和<strong>declarative</strong>，而后者又是为了描述前者准备的。什么是programming Paradigm？我在前几个月写的博客<a href="http://zhihaozhang.github.io/2018/05/20/ProtocolOP/">《面向协议编程初探》</a>中已经解释过了，中文可以翻译为<em>编程范式</em>，我理解为<strong>编程语言设计者希望编程语言的使用者在使用编程语言的时候，思考问题的方式。</strong></p><p>而declarative可以翻译为<em>声明式</em>的，与之相对应的是<strong>imperative</strong>(指令式的)，目前最为广泛使用的<em>面向对象编程</em>就可以划到指令式编程这一类。(declarative和imperative的区别在下文中有所提及)</p><h2 id="函数式编程的和面向对象编程的历史"><a href="#函数式编程的和面向对象编程的历史" class="headerlink" title="函数式编程的和面向对象编程的历史"></a>函数式编程的和面向对象编程的历史</h2><p>在函数式编程面前，面向对象编程其实是晚辈。如果以smalltalk的出现作为面向对象编程元年，那么面向对象编程的历史应该从1975年算起(数据来源<a href="https://baike.baidu.com/item/smalltalk/1379989?fr=aladdin" target="_blank" rel="external">百度百科</a>);而函数式编程的元年可以追溯到Lisp语言出现的1958年(数据来源<a href="https://baike.baidu.com/item/LISP/22083" target="_blank" rel="external">百度百科</a>)。</p><p>函数式编程被很多大佬美誉为<strong>the next big thing</strong>，甚至被称为<strong>最好</strong>的编程范式。让人不免疑惑，既然比面向对象编程出来的早，为什么之前没火，而现在又火了呢？</p><h2 id="WHY函数式编程这两年又火了"><a href="#WHY函数式编程这两年又火了" class="headerlink" title="WHY函数式编程这两年又火了"></a>WHY函数式编程这两年又火了</h2><p>带着疑问，我在搜索引擎中搜索了“函数式编程”和“火了”这两个关键词，找到了一个<a href="https://www.zhihu.com/question/30190384/answer/142902047" target="_blank" rel="external">知乎问答</a>，了解了这一段历史。</p><p>很赞成知乎用户<em>狗好看</em>的回答:</p><blockquote><p>根本的原因是<em>摩尔定律</em>不适用。cpu的性能提升将体现在<strong>核数</strong>增加，这样并行的程序运行速度会越来越快。并行的程序的写法就是找出不能并行的地方，其他地方都尽量并行。如果要这样写，最需要避免的事情就是赋值。函数式编程的本质就是，规避掉“赋值”。</p></blockquote><p>他的回答比较不容易懂，我来用我的理解<em>翻译翻译</em>。</p><blockquote><p>摩尔定律: 当价格不变时，集成电路上可容纳的元器件的数目，约每隔18-24个月便会增加一倍，性能也将提升一倍。</p></blockquote><p>越来越多的人知道，放在初期还是成立的摩尔定律，最近有点不适用了。这和其他很多学科一样，开始的指数级发展，很容易让人过于乐观，到了瓶颈期后，学科发展很容易停滞不前。一个最明显的例子是医学领域关于癌症的笑话，说癌症被攻克，<strong>永远还需要30年</strong>。我用的第一台电脑的CPU是<strong>奔腾4</strong>的，同期经常听到的词还有<strong>赛扬</strong>处理器，奔四有1.4GHz左右的内核时钟，到今天我用的是2016年的顶配MacBook Pro，查了一下，参数为2.7GHz(<em>约20年过去了，还不到2000年的两倍</em>)。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fts1rk3ge3j30wk0jo46i.jpg" alt=""></p><blockquote><p>2016年的顶配MacBook Pro</p></blockquote><p>Intel的工程师也尝试过将这一参数加到3GHz甚至更高，但是他们发现功耗太高、发热太快。但是每年产品线又要更新，那怎么办呢？只能是往CPU里<em>塞核心</em>来获得<strong>计算能力</strong>和<strong>吞吐量</strong>，刚刚发布的MacBook Pro 2018顶配已经用上了<strong>多达6核心的i9</strong>处理器，甚至连iPhone X都已经有了6个核心。将这些核心都利用上，可以让设备充分发挥作用，如果没有充分利用，很多核心就会在那里空转。为了充分利用多核心，在面向对象编程的世界中，经常用到的技术是<strong>同步机制和加锁</strong>，但由于函数式编程的特性，在函数式编程的世界里就不会出现这个问题，因此函数式编程又<strong>火了</strong>。</p><p>其实在科技界这种死灰复燃的例子还有很多，zelear的<em>王自如</em>在他的节目《科技相对论》<a href="http://www.zealer.com/post/223.html" target="_blank" rel="external">小众产品复活指南</a>里曾经介绍过几款死灰复燃产品，比如：<em>有轨电车、死飞、机械键盘、拍立得、车载广播</em>等。这些产品和函数式编程一样，都没有被<strong>替代</strong>的那么彻底，时过境迁，找到了合适的土壤，用户突然又开始想念他的某个功能，所以又活过来了。</p><h1 id="函数式编程的特性-HOW"><a href="#函数式编程的特性-HOW" class="headerlink" title="函数式编程的特性(HOW)"></a>函数式编程的特性(HOW)</h1><p>很遗憾，经过上一节的解释，我依然未能说清函数式编程是什么。这个问题跟面向对象等其他编程范式一样很难给出准确的定义，只能从几个比较<strong>热门</strong>的特性列举一些例子。</p><h2 id="一等函数"><a href="#一等函数" class="headerlink" title="一等函数"></a>一等函数</h2><p>函数的重要性在函数式编程里不言而喻，在支持函数式编程特性的语言里，函数被<strong>提到</strong>了一个非常重要的位置，他跟<em>Int、String、Bool</em>有着相同的地位。函数可以作为变量的字面量存储起来、作为函数的参数和返回值在函数之间传递。</p><p>函数作为变量的例子很多，只想说一句话：</p><blockquote><p>闭包是函数的<em>字面量</em>，就像1之于Int，true之于Bool。</p></blockquote><h2 id="Currying"><a href="#Currying" class="headerlink" title="Currying"></a>Currying</h2><p>接下来举一个函数作为返回值的例子：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">addFactory</span><span class="params">(value1 : Int)</span></span> -&gt; (<span class="type">Int</span> -&gt; <span class="type">Int</span>)&#123;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">(value2 : Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line"><span class="keyword">return</span> value1+value2</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> adder</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> addOne = addFactory(<span class="number">1</span>)</div><div class="line">addOne(<span class="number">2</span>)  <span class="comment">// return 3</span></div><div class="line"></div><div class="line">addFactory(<span class="number">1</span>)(<span class="number">2</span>)  <span class="comment">// return 3</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(value1 : Int , value2 : Int)</span></span>&#123;</div><div class="line"><span class="keyword">return</span> value1 + value2</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>addFactory返回的值是一个函数，其类型为(Int -&gt; Int),意思是返回值是一个接受Int并且返回Int的函数，我们可以用两种方式调用它。其中第二种addFactory(1)(2)又被称为我们习以为常的add(1,2)这种函数调用方式的<strong>Currying(柯里化)</strong>。多说一句，Currying是一个人的名字，他的全名叫<em>Haskell</em> Currying，剩下的应该不需要多解释了。</p><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>接受其它函数作为参数的函数有时被称为<strong>高阶函数</strong>。或许大多数人都使用过<em>Map/Reduce/Filter</em>，他们就是高阶函数最常见的例子。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>]</div><div class="line"></div><div class="line"><span class="comment">// way 1</span></div><div class="line"><span class="keyword">let</span> strs : [<span class="type">String</span>] = []</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span>..&lt;nums.<span class="built_in">count</span>) &#123;</div><div class="line">strs[i] = <span class="string">"No."</span> + <span class="type">String</span>(nums[i])</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// way 2</span></div><div class="line"><span class="keyword">let</span> brr = nums.<span class="built_in">map</span> &#123;</div><div class="line">    <span class="string">"No."</span> + <span class="type">String</span>($<span class="number">0</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以Map为例，假设我们有这样一个需求，将一个整型数组，变为一个String类型的数组，并且在每个数字前加上“No.”，一个没有函数式编程思想的程序员极可能写出way1的代码，这种循环的代码几乎每个程序员都写了几千遍了，很好懂也并没有觉得有什么异常，但其实这是一种<strong>指令式</strong>的编程方式。何为指令式编程呢？就是人以机器的思维方式去思考，我们把自己当做了一台机器，比如上面way1的实现方式，就是我们将思维映射到了CPU上，强迫自己像CPU一样去思考。机器是怎么处理这个问题的呢？他首先要开辟一片内存，然后变更寄存器的值映射到变量i上，通过递增来做循环，然后创建字符串的字面量放到刚开辟出来的内存指定位置上。</p><p>way2使用了集合类型的高阶函数，它接收一个参数，这个参数是另一个函数(函数名不重要)，负责String的初始化的方法。当它拿到这个函数之后，自动帮我们把里面的每一个元素拿出来，传到这个String的初始化函数里面去，就生成了最终的数组。这就是<strong>声明式编程</strong>，好处很明显，代码比以前短了很多，思维方式变得更像人思考的方式了。</p><p>有了高阶函数，函数可以自由<strong>装配</strong>，由一些简单的函数<strong>装配</strong>出一些高级的函数。</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fts5pfl6e9j30fz089jrz.jpg" alt=""></p><blockquote><p>装配过程的可视化</p></blockquote><p>关于函数组合的例子，《函数式Swift》给出的实例是对CoreImage库的使用，对一幅图像进行<strong>模糊、加滤镜、切圆角</strong>等操作。一些网红照片的出炉，通常也是由这些看似最简单的操作组合起来的。</p><h2 id="纯函数-pure-function"><a href="#纯函数-pure-function" class="headerlink" title="纯函数(pure function)"></a>纯函数(pure function)</h2><p>在函数式编程中，对于函数还有两点特殊的要求。</p><ol><li>不依赖外部</li><li>不改变外部<br>满足上面两点要求的函数被称为<em>纯函数(pure function)</em>。这两点保证了无论在什么时候调用函数，对于相同的输入，总会得到相同的输出。这至少带来了两点好处：</li></ol><p>1.函数的可测试性</p><p>2.上文提到的函数式编程没有的<em>同步与加锁</em>问题</p><p>至此也可以引出函数式编程的<strong>思想</strong>了:</p><blockquote><p>避免使用程序状态和可变对象，是降低程序复杂度的有效方式之一，而这也正是函数式编程的精髓。函数式编程强调执行的结果，而非执行的过程。我们先构建一系列简单却具有一定功能的小函数，然后再将这些函数进行组装以实现完整的逻辑和复杂的运算，这是函数式编程的基本思想。</p></blockquote><h2 id="函子、适用函子、单子-Functor-Applicative-Monad"><a href="#函子、适用函子、单子-Functor-Applicative-Monad" class="headerlink" title="函子、适用函子、单子(Functor, Applicative, Monad)"></a>函子、适用函子、单子(Functor, Applicative, Monad)</h2><p>这个部分需要单独写一篇文章介绍，我在理解过程中发现了一个很好的<a href="http://jiyinyiyong.github.io/monads-in-pictures/" target="_blank" rel="external">图解blog</a>.</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fts5vo3dsoj30og07gmy7.jpg" alt=""></p><p>这里先给出结论：<br>functor: 通过 fmap 或者 &lt;$&gt; 应用是函数到封装过的值<br>applicative: 通过 &lt;*&gt; 或者 liftA 应用封装过的函数到封装过的值<br>monads: 通过 &gt;&gt;= 或者 liftM 应用会返回封装过的值的函数到封装过的值</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li>《函数式Swift》(<a href="https://objccn.io/products/functional-swift/" target="_blank" rel="external">https://objccn.io/products/functional-swift/</a>)</li><li>smallTalk 百度百科 (<a href="https://baike.baidu.com/item/smalltalk/1379989?fr=aladdin" target="_blank" rel="external">https://baike.baidu.com/item/smalltalk/1379989?fr=aladdin</a>)</li><li>Lisp 百度百科(<a href="https://baike.baidu.com/item/LISP/22083" target="_blank" rel="external">https://baike.baidu.com/item/LISP/22083</a>)</li><li>知乎:为什么函数式编程这两年又火了(<a href="https://www.zhihu.com/question/30190384/answer/142902047" target="_blank" rel="external">https://www.zhihu.com/question/30190384/answer/142902047</a>)</li><li>《科技相对论》小众产品复活指南(<a href="http://www.zealer.com/post/223.html" target="_blank" rel="external">http://www.zealer.com/post/223.html</a>)</li><li>Functor, Applicative, 以及 Monad 的图片阐释 (<a href="http://jiyinyiyong.github.io/monads-in-pictures/" target="_blank" rel="external">http://jiyinyiyong.github.io/monads-in-pictures/</a>)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近两周利用空余时间&lt;strong&gt;艰难&lt;/strong&gt;“啃完”了objc.io出版的&lt;a href=&quot;https://objccn.io
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="swift" scheme="http://zhihaozhang.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Match for iPhone开发笔记 贰 网络请求和数据流篇</title>
    <link href="http://zhihaozhang.github.io/2018/07/23/Match2/"/>
    <id>http://zhihaozhang.github.io/2018/07/23/Match2/</id>
    <published>2018-07-23T09:43:02.370Z</published>
    <updated>2018-09-20T10:09:41.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>书接<a href="http://zhihaozhang.github.io/2018/07/11/Match/">上文</a>,作为一个<strong>数据驱动</strong>(<em>Data driven</em>)类的APP,如何从服务器端<em>获取到数据</em>并发送<strong>尽量少</strong>的请求次数是一个非常重要的点，甚至被定为<strong>最重要</strong>的点也不为过。这篇博客将介绍我在做Match这个应用过程中使用到的技术以及优化的方法。</p><h1 id="网络请求库"><a href="#网络请求库" class="headerlink" title="网络请求库"></a>网络请求库</h1><h2 id="Alamofire、Moya和Just"><a href="#Alamofire、Moya和Just" class="headerlink" title="Alamofire、Moya和Just"></a>Alamofire、Moya和Just</h2><p>现有的网络请求库非常多，从OC时代<em>大名鼎鼎</em>的<strong><a href="https://github.com/AFNetworking/AFNetworking" target="_blank" rel="external">AFNetworking</a></strong>到Swift时代的<strong><a href="https://github.com/Alamofire/Alamofire" target="_blank" rel="external">Alamofire</a></strong>及它的进一步封装<em><a href="https://github.com/Moya/Moya" target="_blank" rel="external">Moya</a></em>,都是对苹果网络层URLSession的封装，且有着相似的目的<strong>：将网络请求从ViewController中解耦出去。</strong>ViewController中如果混杂了太多的网络请求的<strong>构建</strong>、<strong>发送</strong>、<strong>响应接收</strong>、<strong>响应请求的处理</strong>，会使得ViewController非常<strong>臃肿</strong>，不利于代码维护。</p><p><img src="https://moya.github.io/web/diagram.png" alt=""></p><blockquote><p>Moya在Alamofire的基础上进一步对网络请求进行了封装，使网络请求更容易</p></blockquote><p>考虑到Alamofire和Moya引入的成本较高，我发现了另一个更容易上手的库，名字也很酷，叫<a href="https://github.com/JustHTTP/Just" target="_blank" rel="external">Just</a>,名字就感觉<strong>屌屌</strong>的，用起来也是出奇的好用，调用<em>GET/POST</em>请求<strong>Just</strong>需要一行代码，</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  get request</span></div><div class="line"><span class="type">Just</span>.<span class="keyword">get</span>(<span class="string">"http://httpbin.org/get"</span>)</div><div class="line"></div><div class="line"><span class="comment">//  post request</span></div><div class="line"><span class="type">Just</span>.post(</div><div class="line">    <span class="string">"http://justiceleauge.org/member/register"</span>,</div><div class="line">    data: [<span class="string">"username"</span>: <span class="string">"barryallen"</span>, <span class="string">"password"</span>:<span class="string">"ReverseF1ashSucks"</span>],</div><div class="line">    files: [<span class="string">"profile_photo"</span>: .<span class="type">URL</span>(fileURLWithPath:<span class="string">"flash.jpeg"</span>, <span class="literal">nil</span>)]</div><div class="line">) &#123; r <span class="keyword">in</span></div><div class="line">    <span class="keyword">if</span> r.ok &#123; <span class="comment">/* success! */</span> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>但由于这个项目已经1年多没人维护了，只支持到了Swift 3，在github上发现一堆Swift 4的issue list，因此不得不再寻找其他网络请求库。这时候，<a href="https://github.com/daltoniam/SwiftHTTP" target="_blank" rel="external">SwiftHTTP</a>出现在我视野中，并成了我最终的选择。</p><h2 id="SwiftHTTP成了最终的选择"><a href="#SwiftHTTP成了最终的选择" class="headerlink" title="SwiftHTTP成了最终的选择"></a>SwiftHTTP成了最终的选择</h2><p>SiwftHTTP有着和Just类似的简洁语法，能做到一行代码解决HTTP请求。对需要快速完成整个APP开发的我来说，它能够<em>构建请求并发送</em>、<em>接收响应并处理</em>，加上它的体积小、用法简单等优点，简直就是<strong>简单、可依赖</strong>最好的诠释。当然，Alamofire和Moya存在的价值是不可否定的。</p><p><img src="https://user-gold-cdn.xitu.io/2018/4/3/16288fa6039c2696?imageView2/0/w/1280/h/960/ignore-error/1" alt=""></p><blockquote><p>网络请求库的简单流程</p></blockquote><h2 id="SwiftHTTP响应的处理"><a href="#SwiftHTTP响应的处理" class="headerlink" title="SwiftHTTP响应的处理"></a>SwiftHTTP响应的处理</h2><p>网络请求的响应都是二进制数据，具体到iOS，是NSData类型的数据，因此需要将响应结果进行<strong>编码</strong>。比如拿到的结果是一张图片，在你用<strong>UIImage</strong>对其<em>编码(decode)</em>之前，在计算机看来，它跟其他音频、视频甚至字符串没有什么俩样，都是一串<em>二进制码</em>。</p><p>有过网络方面开发经验的朋友都知道，无论是响应还是请求，除了我们最想要数据部分(<em>请求体</em>)，还有额外的<strong>开销(头部)</strong>，他们告诉你这段请求成功了没有、什么原因没有成功、请求从哪里来、到哪里去等信息，真正有用的部分其实只占了一部分。这也是为什么需要尽量减少网络请求次数的原因，因为这些<strong>额外</strong>的部分，也是会带来<strong>开销</strong>的。网络请求次数太多难免造成应用卡顿，使得用户体验较差。</p><p>具体到SwiftHTTP，我获取到的响应体可能是一个<strong>String</strong>、一个<strong>Int</strong>值、一个<strong>Double</strong>值，更多的时候，是一个<em>对象(Object)</em>，我们需要根据和后端开发者的约定，将其进行正确编码。对Object的编码是较为复杂的,示例如下:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> <span class="type">HTTP</span>.<span class="type">POST</span>(servlet_path!)&#123; response <span class="keyword">in</span></div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> error = response.error&#123;</div><div class="line">                <span class="built_in">print</span>(error)</div><div class="line">                <span class="keyword">return</span></div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">do</span> &#123;</div><div class="line">                <span class="keyword">let</span> decoder = <span class="type">JSONDecoder</span>()</div><div class="line">                <span class="keyword">self</span>.user_history = <span class="keyword">try</span> decoder.decode(history.<span class="keyword">self</span>, from: r.data)</div><div class="line">            &#125;<span class="keyword">catch</span>&#123;</div><div class="line">                <span class="keyword">return</span></div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        </div><div class="line"></div><div class="line"><span class="comment">// history 遵从**Codable**</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">history</span> : **<span class="title">Codable</span>**</span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> asked : [<span class="type">Int</span>]!</div><div class="line">    <span class="keyword">var</span> campaigning : [<span class="type">Int</span>]!</div><div class="line">    <span class="keyword">var</span> favourite : [<span class="type">Int</span>]!</div><div class="line">    <span class="keyword">var</span> phoneNumber : <span class="type">Int</span>!</div><div class="line">    <span class="keyword">var</span> replied : [<span class="type">Int</span>]!</div><div class="line">    <span class="keyword">var</span> tableIndex : <span class="type">Int</span>!</div><div class="line">    <span class="keyword">var</span> voting : [<span class="type">Int</span>]!</div><div class="line">    <span class="keyword">var</span> won : [<span class="type">Int</span>]!</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>相应的处理流程是先判断有没有错误，如果有错，直接返回；没有错误的前提下，使用SwiftyJSON中的JSONDecoder对Object进行编码，需要用do和catch<strong>包围</strong>，因为这一过程不保证一定能成功。</p><blockquote><p>如果结果是数组，将<strong>history.self</strong>改为<strong>[history].self</strong>即可。</p></blockquote><p>需要提前申明Object的类型，且服从<strong>Codable</strong>协议。这里我选用了<strong>Strcut</strong>而不是<strong>Class</strong>，两者的具体区别感兴趣的可以自行去搜索，主要区别是Struct是<strong>值类型</strong>，Class是<strong>引用类型</strong>的。</p><p>当然，String和Int等其他基本类型也有自己的编码方法。比如String的编码方法为:String(data: r.data, encoding: String.Encoding.utf8)。</p><h2 id="Object-Model文件的生成和注意事项"><a href="#Object-Model文件的生成和注意事项" class="headerlink" title="Object Model文件的生成和注意事项"></a>Object Model文件的生成和注意事项</h2><p>Struct和Class的生成可以借助第三方工具<strong><a href="https://github.com/Ahmed-Ali/JSONExport" target="_blank" rel="external">JSONExport</a></strong>完成，国内有人将其进行了<a href="https://github.com/yagamis/JSONExport" target="_blank" rel="external">汉化</a>,可以很方便的导出我们所需要的Swift model文件。</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1ftjy4408vwj31ju1440xs.jpg" alt=""></p><blockquote><p>JSONExport汉化版界面</p></blockquote><p>在使用JSONExport之前，网络请求的结果一般是通过PostMan获取的，有些字段的结果可能是<strong>nil</strong>,直接复制进去JSONExport就会将该字段申明为<strong>Any</strong>，但是这就让编译器为难了，因为他并不知道需要为这个字段开多大的空间。因此当你尝试让该Struct服从<strong>Codable</strong>协议时，<strong>会报错</strong>，这时就需要与后端开发人员沟通，<em>将Any改为正确的特定类型。</em></p><h1 id="从数据流角度减少网络请求数"><a href="#从数据流角度减少网络请求数" class="headerlink" title="从数据流角度减少网络请求数"></a>从数据流角度减少网络请求数</h1><p>上文已经提到了，网络请求会给系统带来很大的一笔开销，减少网络请求数是开发者在开发应用过程中优化应用的一个<strong>重要方面</strong>。这里，我给出在做Match过程中减少网络请求数比较<em>Hack</em>的一个小技巧，也不知道对不对，总之是有效的减少了网络请求数。</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1ftjx2jktw7j31j417yadt.jpg" alt=""></p><blockquote><p>从<em>数据流(data-flow)</em>角度看应用</p></blockquote><p>鉴于在应用开发过程中反复了这种模式，这里只需举一个业务场景来说明即可。上图中涉及了三个场景，第一个场景是问题列表页，是一个TableView，数据是从服务器端获取的(默认20个)。当用户点击TableView的某个Cell，会跳转到问题详情页，包含了该问题的题干和回复部分，这部分数据是由第一个场景传过来的，至此没有<strong>再次</strong>发送获取信息的网络请求。</p><p>第三个场景是用户尝试回答这道题目，点击发送之后，回到第二个场景，这时候如果不做任何动作，用户是看不到自己刚刚的回复内容的，这很容易让用户<strong>造成困惑。</strong>但是我又不想再次发送网络请求来更新数据，于是我借助了<strong>App Delegate</strong>这个<em>中转站</em>，将刚刚用户回复的相关信息进行了保存，并<em>人为的</em>添加到了TableView的数据中。这样，在没有发送任何数据请求的前提下，做到了视图已经更新的<strong>假象</strong>。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>早在写上一篇开发笔记的时候，就有读者问能否像之前的应用一样将Match<strong>开源</strong>。诚然，作为一个完整的应用，有着较大的借鉴意义，但是考虑到朋友为这个应用的开发向我支付了不菲的费用，这个应用最终版权应属于他，所以考虑再三，决定<strong>不开源</strong>，还望大家理解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;书接&lt;a href=&quot;http://zhihaozhang.github.io/2018/07/11/Match/&quot;&gt;上文&lt;/a&gt;,作为一个
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="http://zhihaozhang.github.io/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>魔都买房杂记(下)</title>
    <link href="http://zhihaozhang.github.io/2018/07/18/buyhousetwo/"/>
    <id>http://zhihaozhang.github.io/2018/07/18/buyhousetwo/</id>
    <published>2018-07-18T05:47:26.015Z</published>
    <updated>2018-07-18T05:47:26.015Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>上一篇博客<a href="http://zhihaozhang.github.io/2018/07/16/buy-house/">魔都买房杂记(上)</a>写完分享以来，我只在朋友圈进行了分享，便得到了近300次的阅读，我微信好友一共才<em>400</em>人。虽然可能存在某些好友多次阅读了这个文章的现象，但还是不难看出<strong>楼市</strong>的受关注度，毕竟它挑动着每一个人的<strong>神经</strong>，每个人都迟早是有一块地方要安定下来的。</p><p>在写这篇博客的时候，我已经走完了剩下的几乎所有流程，完成了<strong>草签</strong>(合同与正式网签一样)，只剩下网签这最后一步了。这篇博客，我准备书接上文，将后续的流程写出来，方便读者就看到完整的新房购买过程;同时，将重点放在二手房的<strong>看房、选购</strong>和<strong>谈价</strong>技巧，和上文一样，由于我的<em>不专业性</em>，所提意见有强烈的<em>个人主观色彩</em>，也不接受任何质疑和撕逼，仅供大家参考。</p><h1 id="选房后的签约"><a href="#选房后的签约" class="headerlink" title="选房后的签约"></a>选房后的签约</h1><p>签约有很多流程，由于我认购楼盘的房源比较多，需要打印的东西太多，即使10台打印机同时出动依然来不及。并且网签需要时间，而zf网签系统只在指定的时间段内开放，所以昨晚我经历的只能算是<strong>草签</strong>。</p><p>草签和正式签差别并不大，所有合同都是一样的，只是为了<em>减少正式网签</em>的确认时间，过程还是需要<strong>仔细核对</strong>的，我在核对过程中就发现草签合同里把我购买的房屋售价<strong>写错</strong>了。</p><p>需要签的合同非常多，而且通常至少是一式两份，如果嫌写名字太麻烦，也可以带<strong>个人印章</strong>。合同的细节非常多，这时候我不知道除了接受，还有没有argue的余地了。反正我是无脑的签完了，整个流程需要<strong>两个小时</strong>。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fte9lrckdnj30r80qadh3.jpg" alt=""></p><blockquote><p>众多合同之一，其他涉及敏感信息的合同不宜展示</p></blockquote><p>草签最终合同之前，是需要付清<strong>除了贷款部分所有钱的</strong>。注意，只能刷个人名下的银行卡(最多两张)。由于金额太大，刷卡前最好跟银行客服确认好刷卡额度，现场排队的时候你再去跟人确认申请调整就太浪费时间了。付完钱后，注意<strong>一定</strong>要保留好pos机的票和<strong>收据</strong>。</p><p>接下来就是等正式的网签通知啦~</p><h1 id="二手房看房、选购、谈价"><a href="#二手房看房、选购、谈价" class="headerlink" title="二手房看房、选购、谈价"></a>二手房看房、选购、谈价</h1><p>坦率的讲，这批16年被捂的新盘开完后，上海未来三年内新房将会<strong>极少</strong>。这并非我信口开河，而是由土拍市场决定的，且后面zf想租售并举，所以短期内买新房的机会真的<strong>不多</strong>了，有<strong>房票</strong>和<strong>火力</strong>的抓紧了。<br><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fte9rsnspej30u60omgn3.jpg" alt=""></p><p>我看的二手房也不少，也经历过几次与房东谈价格(包括面对面和电话谈价)，也小小的总结了一点点经验和教训，提供给有购买二手房打算的朋友做个参考。</p><h2 id="二手房看房"><a href="#二手房看房" class="headerlink" title="二手房看房"></a>二手房看房</h2><p>二手房看房一般是需要提前预约的，守时很重要，因为对方交易也想找个靠谱、讲信用的人，而守时都不能做到，会大大减分。</p><p>除此之外，我觉得二手房看房最需要注意是<strong>不卑不亢</strong>，在房东(包括中介)面前不要<strong>暴露</strong>出你的真实想法。在房东面前，<strong>尽量找他房子的一些缺点</strong>，比如<em>楼层不好、朝向不好、装修</em>不好等，<strong>暗示他你的房子并没有你想象的那么好</strong>，给后面的谈价<strong>留出足够的余地</strong>。之前就是有次在某个房东面前表现的太喜欢他房子了，被他吃定了的感觉。最后跟他谈价没有成功，后面他居然以低于我报价10万的价格将房子售出了。</p><p>如果真的是很喜欢，<strong>暗自窃喜</strong>就行，不要表现出来，最多就说还行吧。如果真的不喜欢，那也好办，当房东面多说一些他的优点，出门后再也不联系就行。</p><p>我发现我最开始看房最大的一个错误就是主要<strong>看装修了</strong>，其实装修好这事也不全是好处。房东会在总价里体现出来，而房屋的装修用料什么的需要时间来<em>检验</em>。其实看二手房，最主要看的是<strong>户型</strong>，户型好很重要，相比于高昂的房价，<em>装修其实没那么值钱</em>。有些装修一般的房子，售价要比<strong>号称“精装”</strong>的房子便宜非常多，那他的房子就显得性价比非常高了。</p><p>之前有人说毛坯房最好，自己拿来想怎么装修就怎么装修。这点我非常认同，因为那种<strong>半吊子</strong>房屋你如果想重新装修，不得不先把之前装修处理掉，然后再进行重新装修，这个过程显然是比毛坯直接装修要<strong>麻烦</strong>的，当然装修过程中是需要费一些<strong>精力</strong>和<strong>时间</strong>的。</p><p>觉得满意的房子，在正式进入谈价之前，需要<strong>委托中介做产调、确认房子无抵押、向小区里的人打听房子里面没有出过事(成交后因为凶宅闹上法庭的案例不少)。</strong></p><p>总结：</p><blockquote><p>二手房<strong>看户型不看装修</strong>，通常 毛坯房 &gt; 简装房，<strong>真</strong>精装房根据与毛坯的溢价定，谈价前请中介做产调。</p></blockquote><h2 id="二手房谈价"><a href="#二手房谈价" class="headerlink" title="二手房谈价"></a>二手房谈价</h2><p>二手房谈价是个技术活，一般是由中介进行<strong>初步沟通</strong>的。比如这个房子你想以<strong>500</strong>万买到，你就应该告诉中介，我最多出<strong>480</strong>万，让他去跟房东进行沟通。房东一般是不同意的，会抛出一个价格，如果不高于<strong>520</strong>，那你们就可以坐下来面对面谈了，因为房东对中介也不会说出心里的底价，最终价格都是需要和真实客户面对面商量的。</p><p>有了上一步的铺垫，你抓住他房子的缺点，告诉他你出价的理由(<em>列缺点</em>)，如果对方态度友好，最后适当降价达到了你心理预期价格，你就装作免为其难的<strong>接受</strong>吧，毕竟人都有贪小便宜的缺点，愉快的成交就行。如果实在不行，而且你又很想得到这个房子，那就看加价的幅度能不能承受，遇到真正喜欢的就下手吧，多几万<strong>放在30年来看</strong>也不是多大的问题。</p><p>谈价分为税费各付价和买房付价，其实差别也不大，羊毛还是出在羊身上。还是那句话，这种重要的事情最好是能够当面坐下来谈，如果谈到价格低于你的心理预期了，可以付个十万二十万定金，防止房东<strong>反悔</strong>，因为你看中的房子，其他人很可能因为喜欢这套房子，愿意比你多出几万。</p><h2 id="对中介的态度"><a href="#对中介的态度" class="headerlink" title="对中介的态度"></a>对中介的态度</h2><p>买二手房，选中介真的很重要，好的中介推荐的房子靠谱，而且砍价多，做事稳妥。站在中介的立场上考虑，他最希望的就是卖家和买家尽快成交，他好去搞定新的客户，最怕把战线拖的太长了。</p><p>一般中介不会特别<strong><em>偏袒</em></strong>买家或者卖家，他能迅速找到一个价格，让买卖双方都能接受，拿到中介费，对他来说是最重要的。在中介面前也需要有所保留，不能把你心里的真实想法和价格告诉他。极端情况下，你甚至可以给中介<strong>悬赏</strong>，比如上面的例子，你告诉他如果他能把价格搞到480万，你另给<strong>5</strong>万他作为奖励，这样他就会<strong>有动力</strong>去跟房东砍价，中介的口才一般是比你好的多的。如果最终他做到了，你也以<strong>485</strong>万(低于心理预期的<strong>500万</strong>)成交了；如果他没有做到，有了上面中介与房东的砍价过程，房东的<em>心理预期价格</em>通常会有所<strong>松动</strong>，你后面再谈价会<strong>顺利</strong>一些。</p><p>如果价格合适，双方都能接受，下面就是谈中介费了。很遗憾，我没能走到这一步，因此不能给出太多有效建议，但是上海的中介一般会要求你给房屋售价的<strong>2%</strong>，从我身边朋友了解到的情况来看，通常最终都在<strong>1.4%-1.6%</strong>之间，这里推荐<strong>正规的大中介(如链家)</strong>。某些中介上来就说他们只收<strong>1%</strong>的费用，这种尤其需要<strong>警惕</strong>。</p><h1 id="市区二手小房子和郊区大房子怎么选"><a href="#市区二手小房子和郊区大房子怎么选" class="headerlink" title="市区二手小房子和郊区大房子怎么选"></a>市区二手小房子和郊区大房子怎么选</h1><p><strong>写在前面:</strong>如果你资金足够，市区成熟的<em>学区、医院和商圈</em>还是会给你的生活带来很多便利。这个章节主要是给预算<strong>不那么足</strong>的人看的。</p><p>选购市区二手房的主要原因可能还是由于它的<em>地段好，周边配套比较齐全</em>。相比于郊区的房子，市区的二手房更为<strong>保值</strong>，这点是毋庸置疑的。保值是指大环境不好，万一房价下跌时候，市区价格表现更为坚挺;但是对于房价上涨，升值空间就不好说了，由于市区配套已经很齐全了，周边配套暂时不全的郊区完善后带来的利好，市区是享受不到的。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fte4z3bv7pj308c0ckglz.jpg" alt=""></p><blockquote><p>1997年从东方明珠上俯瞰陆家嘴</p></blockquote><p>20年前从东方明珠上俯瞰陆家嘴，是上图的场景，从图片中看，荒凉到还不如现在的郊区。放到当时，你会投资吗？房子买的是未来，买配套成熟的不叫<strong>投资</strong>，只能叫<strong>储蓄</strong>。</p><p>郊区空气好，环境好，也相对比较安静。但郊区也可能会有<strong>飞机</strong>经过、<strong>高铁</strong>经过，距离<em>垃圾焚烧厂、变电站</em>等对人体不利的功能场所比较近等缺点。这些都是需要<strong>综合考虑</strong>的。</p><h1 id="最后的感悟"><a href="#最后的感悟" class="headerlink" title="最后的感悟"></a>最后的感悟</h1><p>其实在大城市买房，是需要<em>两代</em>(<em>甚至三代人</em>)的努力的，知乎上经常有问题问该不该掏空6个钱包来买房这种问题。大部分的回答是趋同的，即<em>应该掏空买</em>。因为这样能让父辈和祖辈的资产更保值甚至升值，因为把钱投入到楼市，比起存到银行或者放到最近经常炸雷的<strong>P2P</strong>，已经是<strong>对抗通货膨胀</strong>很优秀、<em>很无脑</em>的方法了。房贷也是这样，<strong>4.9%</strong>的基础利率，比起每年通货膨胀率的7%-9%来说，<strong>狠赚</strong>，因此能多贷尽量多贷。毕竟国家肯一次性借给你这么多钱的机会，通常也就买房这一次了。</p><p>工薪阶层如果完全白手起家，是很难凑够首付的，正如上篇博客结尾梁老师微博说的那样，郊区买不了也别拧巴，东南沿海城市了解一下，实在不行就回家找个能发挥先进经验的行业，<strong>给孩子铺个路。</strong></p><h2 id="三代人的“美国梦”"><a href="#三代人的“美国梦”" class="headerlink" title="三代人的“美国梦”"></a>三代人的“美国梦”</h2><p>文末，我引两个故事。第一个是美国<strong>华裔</strong>前商务部部长骆家辉的故事。骆家辉先生的祖父<strong>1880</strong>年去到美国，从一名仆人做起，学习语言同时挣钱，而后回到中国组建家庭。在骆家辉的父亲12岁时，祖父又把一家人带回了美国。骆家辉父亲像半个ABC一样，在美国度过了青少年时光，成年后参军并参加了第二次世界大战，还参与了诺曼底登陆。随后，他的父亲也像祖父一样，回到香港组建了家庭，最后再次举家回到美国，定居西雅图。</p><p>骆家辉记得，在自己幼儿园时期，母亲也在为了成为美国公民学习英语。除了学习语言，父母还做了一些小生意维持生计。不管做什么，他很清楚的认识到，家庭的重心，父母的重心，都放在三件事情上：<strong>第一，获得优良的教育；第二，努力奋斗；第三相互扶持。</strong></p><p>他的父母和中国大多数父母一样，节俭的生活，即使再穷也没有穷子女的教育，为的就是让他们能够过上更好的生活，抓住更多的机遇。正是因为如此，骆家辉先生成为了美国历史上第一位美国本土的亚裔州长和第一位华裔州长。</p><p><img src="https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=920aeb7fbe096b63951456026d5aec21/b03533fa828ba61e309fe47f4134970a304e5968.jpg" alt=""></p><blockquote><p>在就职典礼上，他开玩笑说，州长宅邸距离自己祖父曾经帮佣的那间房子只有<em>一英里的距离</em>，但是他们家族花了<strong>整整100年时间</strong>才<em>走完这段路</em>。</p></blockquote><h2 id="《神秘的西夏》"><a href="#《神秘的西夏》" class="headerlink" title="《神秘的西夏》"></a>《神秘的西夏》</h2><p>我最近一直在看一部央视纪录片《神秘的西夏》，讲的是西夏的开国皇帝<strong>李元昊</strong>在祖父李继迁和父亲<strong>李德明</strong>长达数十年积攒实力后，<strong>称帝</strong>并和建立了与宋、辽三分天下的百年基业。</p><p><img src="https://gss2.bdstatic.com/9fo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=4720b4d9b6b7d0a26fc40ccfaa861d6c/50da81cb39dbb6fdb8723d4d0d24ab18972b37b4.jpg" alt=""></p><p>神秘的西夏这部<strong>充满诚意</strong>的纪录片，涉及了西夏<em>文化、经济、政治、军事</em>等诸多方面，看完这部纪录片我懂了很多，<em>历史</em>就是不断重复的<strong>人性</strong>，很多道理和规律放到今天还是这样，<strong>强烈</strong>建议感兴趣的朋友可以去看看。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>买房这段时间我一直在想，我的<strong>成长过程</strong>和我的孩子将来会怎么样。</p><p>我出生于江苏<strong>四线</strong>城市(的镇子上)，从小少有人管，属于完全的<strong>放养</strong>状态。由于父母比较忙，我经常是只能放了学玩到天黑，饿到不行才到隔壁老爷爷家吃口饭。虽然贪玩，但我还算自觉，基本能坚持做到先做完作业再玩。初到大学，我发现周围的同学都有很多才艺，而我却没有什么拿得出手的才艺。但我从未抱怨过，我觉得农民身上的<strong>纯朴</strong>是千金难换的。我预感到我孩子将来的成长环境<strong>同比</strong>会比我好一些，可能也会像很多城里孩子那样接受很多种类的学前班、兴趣班。另外，优秀小学也是个资源，这就是<strong>学区房</strong>售价高的主要原因，但是由于预算不够，暂时不能给他提供好的学区。</p><p>上一辈总是希望下一辈能够过的比自己好，因为下一辈总是站在上一辈的肩膀上。和平年代，那种<strong>朝为田舍郎，暮登天子堂</strong>的情况已然不可能发生，某一代人突然成为行业的领袖、一飞冲天，概率也并不是很大。</p><p>吴军老师曾在《<strong>硅谷来信</strong>》中提到过这个现象，他把社会阶级进行了分层(比如<strong>100</strong>层)，这100层大致是类似于金字塔那样的结构，越往上走，人数会越少。有些人命好，出生在第10层的家庭，那他10%的努力可能都比第90层的人100%的努力有效。这不能说是不公平，是由他父辈甚至祖辈的努力带来的。对第90层的人来说，让在他这一辈就冲到第10层的难度非常大，他能通过自己的努力，尽可能多<strong>往上*</strong>拱几层<em>，为他的孩子铺个路已经很好了。同样，对于第10层的人来说，如果他不够努力，在他这一代人掉到二三十层也是有可能的，但他通常活的比开始第90层要好很多。</em>懂了这个道理，看很多东西也就看开了。*</p><p>大部分家庭是需要一代人接着上一代人进行<strong>扎实努力</strong>，<em>扶摇曲折向上</em>的。最后希望大家日子都能越过越<strong>红火</strong>，家族越来越<strong>兴旺</strong>，一代更比一代强!</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fte9nruvz2j30u01sz78m.jpg" alt=""></p><blockquote><p>我未来的家</p></blockquote><p>———<strong>谨以此文献给帮助过我的亲人们</strong>———</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;上一篇博客&lt;a href=&quot;http://zhihaozhang.github.io/2018/07/16/buy-hous
      
    
    </summary>
    
      <category term="购房" scheme="http://zhihaozhang.github.io/categories/%E8%B4%AD%E6%88%BF/"/>
    
    
      <category term="随感" scheme="http://zhihaozhang.github.io/tags/%E9%9A%8F%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>魔都买房杂记(上)</title>
    <link href="http://zhihaozhang.github.io/2018/07/16/buy-house/"/>
    <id>http://zhihaozhang.github.io/2018/07/16/buy-house/</id>
    <published>2018-07-16T11:14:16.002Z</published>
    <updated>2018-08-24T10:02:39.975Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么要写这篇博客"><a href="#为什么要写这篇博客" class="headerlink" title="为什么要写这篇博客"></a>为什么要写这篇博客</h1><p>近期终于在魔都<strong>上海</strong>买到了一个属于自己的三房，在一线城市有了一个稳定的<em>安身立命</em>场所。经历了大半年的看二手房、和房东谈价格，到最终选择新房、认筹、摇号、选房。一来记录一下这段经历，二来也为想买房的人提供一些<strong>参考</strong>吧，也仅仅是参考了，毕竟我不是<strong>专业</strong>的。</p><h1 id="购买新房"><a href="#购买新房" class="headerlink" title="购买新房"></a>购买新房</h1><p>决定购买新房是在一次和二手房房东谈价谈崩之后，加上刚刚过去，印象比较深刻，有必要先行记录一下。</p><h2 id="购买新房的好处"><a href="#购买新房的好处" class="headerlink" title="购买新房的好处"></a>购买新房的好处</h2><p>众所周知，由于zf限价，新楼盘一般售价是低于周边二手房的，因为二手房需要支付约2%的中介费、个税(与是否满五唯一相关)、增值税(<strong>5.37%</strong>)和契税(新房也需要)，大部分的房子加起来也要9%，即使是满五唯一的房子，也会被卖家作为一个卖点体现在了售价之中，<strong>毕竟羊毛出在羊身上</strong>。</p><p>而新房就没这么多杂七杂八的费用，现在由于限价，售价比起周边二手，有不小的优势。因为zf可以限制开发商定价，不让他们拿预售证，但是无法跟老百姓们说，你们卖贵了，降价吧。</p><p>除了这些费用，新房最大的好处是房子是全新的，没有他人使用过，也不用担心之前里面出过什么事情，一般买二手房都需要去小区里打听打听需要购买的房子里面出了什么事情没有、咨询房东的出售房子的动机(回答不一定真实)。</p><p>这一批开盘的房子，很多都是被捂盘了两年的，如果是精装交付的房子，装修一般是已经装修好了，没法降低装修标准，在zf限价的大环境下显得尤为值当。无法保证，后面如果继续限价，开发商在装修时候不降准，达到一期同样的水准。</p><p>新房由开发商统一定价，都有一房一价表，不需要(也不可能)遇到二手房时和房东谈价的过程，这个过程真的<strong>超累</strong>！这也是最终促使我购买新房的原因。</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1ftbywzz6waj31kw16o7wh.jpg" alt=""></p><blockquote><p>我购买楼盘的一房一价表</p></blockquote><h2 id="新房的坏处"><a href="#新房的坏处" class="headerlink" title="新房的坏处"></a>新房的坏处</h2><p>新房也有坏处，即新房一般是期房，二手房一般三四个月的流程走完后，就可以交房了，而新房一般需要等待两年左右(被捂成准现房的大约1年甚至更短)。</p><p>有些新房的学区是暂时没有确定的，存在一定的不确定因素。</p><h1 id="新房购买流程"><a href="#新房购买流程" class="headerlink" title="新房购买流程"></a>新房购买流程</h1><p>在上海购买新房一般需要经历<em>认筹、验资、交认筹金、摇号、选房、付首付、办理贷款、网签等后续过程</em>。</p><h2 id="认筹与验资"><a href="#认筹与验资" class="headerlink" title="认筹与验资"></a>认筹与验资</h2><p>认筹与验资其实是一个过程，新楼盘拿到zf开盘许可证后，一般有一周左右的时间让客户认筹。认筹是需要验资的，验资一方面是验证购房者有购房资格，另一方面是验证购房者能够拿出足够的首付款和资金来购买此楼盘的房子。</p><p>拥有购房资格据我所知一般有两种途径，一种是已经落户了的，这种最好办，带个人户口卡或户籍证明原件及复印件到现场即可;另一种是<strong>已婚</strong>并连续缴纳五年以上的社保的，相比之下第二种更为麻烦，所带的材料大约有结婚证、社保缴纳证明和夫妻双方身份证原件和复印件。(我比较幸运，从复旦毕业后，幸运地落了户。所以走的第一条，<strong>第二条所需材料可能不全</strong>)</p><p>检验资产这部分是根据楼盘售价定的，主要是确保你有此楼盘售价最便宜房屋的资金的首付(首套不低于35%/二套不低于70%)。比如我看的楼盘，房屋售价从400-700w，那么就需要有银行开具的200w存款证明(首套)，并且需要冻结认筹金50w。又比如昨天新开的<strong>前滩晶耀</strong>，由于地段好，售价大多在1000w以上，需要验资410w(<em>二套820w</em>)，冻结认筹金<strong>234</strong>万。</p><p>由于新房的性价比不同，认筹比差别非常大，有些楼盘认筹比大约是<strong>1000%</strong>，被笑称为彩票盘;有些性价比低的楼盘认筹比仅有<strong>1.5%</strong>。一句话，群众的眼睛是雪亮的，认筹比越高的楼盘通常意味着性价比越高。</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ftbzm120m4j30m80go76r.jpg" alt=""></p><blockquote><p>博主所购楼盘认筹现场</p></blockquote><h2 id="摇号"><a href="#摇号" class="headerlink" title="摇号"></a>摇号</h2><p>摇号是由公证处完成并公布的，有没有猫腻我不知道，但大抵是公平的。虽然有人说，凡是有阳光照到的地方都有阴影。但作为毫无背景的人来说，也只能是听天由命了。我一个好朋友，在杭州3000多人认筹的楼盘里摇号结果为第一名。这件事也从一个侧面说明了，运气还是很重要的。当然我平时<strong>好事做的比较多</strong>，运气也很好，1700认筹里排在了320+，还算是比较靠前的。</p><h2 id="选房"><a href="#选房" class="headerlink" title="选房"></a>选房</h2><p>选房之前，是需要好好研究上文提到的一房一价表的，需要将在预算内的房子，综合考虑性价比和想要的程度，列一个从前往后的list。很幸运，我所列的list第一个房间就被我选到啦，12楼的东边套，因此我仅用了<strong>5秒钟</strong>就完成了这一步骤。</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1ftc00326z4j31400u0q5h.jpg" alt=""></p><blockquote><p>我们的选房攻略</p></blockquote><p>上面的步骤还是很重要的，因为不是每个人都可以如我一般幸运。如果号够靠前，很容易在里面纠结很久，看到后面进来的人选了房子，很难不着急。特别是在想要的楼栋号和楼层之间怎么选，1楼、2楼和顶楼、次顶楼怎么选，在你纠结的时候，你发现旁边人把你的候选项选走了，选择空间越来越小。当然，号码比较靠后也不全是坏处，选择空间不大了，倒也不至于那么纠结，因为凡事都有两面性。</p><p>多说两句，选房现场和外场不是同一个地方，大约1分钟放10个人进去，这10个人是不分先后选房顺序的，如果1分钟后，你没有选房，又会进来10个人跟你一起选，同样，没有先后顺序。外场跟传销现场差不多，一旦里面有客户选房成功，喇叭里就会喊:”恭喜客户选房成功！” 在外面的人变得更紧张了。真正轮到你之后，会有人带领你<strong>冲</strong>选房内场，并以极快的语速向你喊：“要几号楼几楼，快！快！快！”那语气感觉跟抢劫没啥两样，如果你没有提前做好攻略，很容易进退维谷。</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ftc09s78qnj31kw0ehtqs.jpg" alt=""></p><blockquote><p>内场选房现场，几乎全部售出</p></blockquote><p>选好之后，工作人员会将印有该房间的信息和售价贴到你的选房卡上，这时候就不能反悔了，认筹金就自动变为了<strong>定金</strong>。</p><h2 id="付首付等后续环节"><a href="#付首付等后续环节" class="headerlink" title="付首付等后续环节"></a>付首付等后续环节</h2><p>我刚刚进行到这一环节，知道的也比较少。一般选完房之后，开发商会给约一周的时间给你筹款。这里<strong>郑重申明</strong>一下:由于上海房价较高，因此即使是首套，首付款也不可能只有35%,因为通常工薪阶层的人贷不到那65%。当然，如果你收入高或者有自己的产业、公司，提供流水，最低最低也要准备房价的35%。<em>我发现很多人将首付款误解为了房价的35%，其实除了贷款外的所有钱，都是需要你一次性给清的。</em></p><p>一句话:</p><blockquote><p>首付款 = 房价 - 你能贷款到的钱</p></blockquote><p>贷款的话，就在<strong>售楼现场</strong>咨询各家银行贷款的信息，选一家贷款最多的吧，一般建设银行和中国银行是比较好的。为什么一定要在售楼现场，因为如果不是开发商合作的银行，将会非常麻烦，要走的流程很复杂，所以不推荐。</p><p>后续的等走完全部流程，在下一篇博客中写。</p><h1 id="一点小建议"><a href="#一点小建议" class="headerlink" title="一点小建议"></a>一点小建议</h1><p>由于我现在已经购入了房子，因此说话难免有失公允，但我仍觉得当下对于上海是一个好的购房时机。原因如下：</p><ol><li>在上海已经限制一般公司购房的大背景下，博主所购的楼盘依然一日卖光，说明了上海不缺买房的资金，也不缺买房的人，缺的是高性价比的产品，像上海现在这样的低谷期，遇到合适的就上。</li><li>zf调控楼市，对购房者有利，从容进场，比恐慌性地进场更能选到自己喜欢的房子。</li><li>由于房企资金链压力，房企不得不接受zf的低价入市，精装房子没有降低标准，性价比比后续的要高。</li><li><strong>在城市里拥有一本印有自己名字的房产证，其意义是何等重要，无法用文字来表达，不仅是代表了从此之后有了安身立命之处，也是从无产转变到有产的标志，人生地位从此跨出新舞台。</strong>(引自房产孟老师的微博)</li></ol><p>用梁老师的微博结束正文部分，共勉吧。最后祝大家都能买到自己<strong>称心如意</strong>的房子!</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1ftc0sjm2cjj30u01sz0wb.jpg" alt=""></p><blockquote><p>梁老师的微博</p></blockquote><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p>感谢<strong>父母</strong>，他们每天辛勤劳作、省吃俭用为我准备了首付款;</p><p>感谢大家庭里的亲人们，在我困难的时候提供了周转资金，让我<strong>倍感温暖</strong>;</p><p>感谢之前带我看二手房的中介L总，他跟我年纪相仿，教会了我很多房产的知识。都是在这个大城市奋斗的年轻人，最后没能经他手买到房子，感到有些抱歉;也要感谢龙湖的销售LQQ，这次相处时间并不长，但是给我的建议非常中肯和有用；</p><p>last but not least, <strong> My soul-mate xiaoli，Thank you very much indeed! </strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;为什么要写这篇博客&quot;&gt;&lt;a href=&quot;#为什么要写这篇博客&quot; class=&quot;headerlink&quot; title=&quot;为什么要写这篇博客&quot;&gt;&lt;/a&gt;为什么要写这篇博客&lt;/h1&gt;&lt;p&gt;近期终于在魔都&lt;strong&gt;上海&lt;/strong&gt;买到了一个属于自己的三房，在一线
      
    
    </summary>
    
      <category term="购房" scheme="http://zhihaozhang.github.io/categories/%E8%B4%AD%E6%88%BF/"/>
    
    
      <category term="随感" scheme="http://zhihaozhang.github.io/tags/%E9%9A%8F%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>Match for iPhone开发笔记 壹 开篇杂谈</title>
    <link href="http://zhihaozhang.github.io/2018/07/11/Match/"/>
    <id>http://zhihaozhang.github.io/2018/07/11/Match/</id>
    <published>2018-07-11T02:30:17.303Z</published>
    <updated>2018-09-20T10:09:45.247Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开发Match的初衷"><a href="#开发Match的初衷" class="headerlink" title="开发Match的初衷"></a>开发Match的初衷</h1><p>大约一个月前的某天，一个很久未曾联系的同学突然给我发微信，问我有没有时间帮他做一个iOS App。此人从小学开始就与我是同学，一直是传说中的别人家的孩子，中考、高考都是全市第二名，后进入了南京大学数学系读本科，然后去了复旦读研，跟我又成了校友…</p><p>跟他见面后，他给我讲起了故事，在大学，有一棵树，叫高树，很多人挂在了上面多年，甚至无法毕业。因此，他想做一款叫做Match的产品，来帮助高数方面有困难的同学…</p><h2 id="Match代表什么"><a href="#Match代表什么" class="headerlink" title="Match代表什么"></a>Match代表什么</h2><p>Match，里面包含了MATH(数学)这个单词，而且有匹配的意思，寓意与答题系统中的求助者寻求匹配的答题者吻合。</p><h2 id="我接手Match前"><a href="#我接手Match前" class="headerlink" title="我接手Match前"></a>我接手Match前</h2><p>在找到我之前，他一直看我在朋友圈分享我的技术博客和开发心得，除去编程思想和随感，大多是跟苹果Mac开发和Swift开发相关的，因此他觉得我可以胜任这个工作。回头看，这也可以作为写技术博客的好处之一了吧。</p><h2 id="从拒绝到接受"><a href="#从拒绝到接受" class="headerlink" title="从拒绝到接受"></a>从拒绝到接受</h2><p>一开始，我内心是拒绝的，因为坦率的讲，自2015年后，我就再也没进行过iOS的完整应用开发，甚至连网络请求都用不6了，我不得不利用下班和周末时间重拾iOS开发的细节，并在一个极短的时间内完成整个应用的开发工作，并使其尽可能美观，以达到Apple store严格的上架要求。同事，网上充斥着例如：现在重拾iOS跟1948年加入国军没啥区别、iOS开发已经没人要了之类世俗的看法，虽然我并不认同这种看法，但不可否认，<strong>移动开发的红利期过去了。</strong></p><p>但他的真诚打动了我，<strong>这真不是一句客套话</strong>，在我了解到他作为一个非科班出身的程序猿，独自完成了Match平台的<strong>前端、后端和Android端</strong>初步开发，还是挺让我感动的，加上我本身喜欢苹果的iDev和swift开发，另外我希望用我的技能，让这个世界变得美好哪怕一点点，因此我当时下我就爽快地答应了他的请求。现在回想起来，还挺佩服我当时的勇气的，因为在做这个iOS APP的过程中，我真的遇到了很多问题，熬了好几夜，终于一一克服。或许，就像电影无问西东电影里的独白说的那样:</p><blockquote><p>“如果提前了解了你所面对的人生，你是否还有勇气前来？”   ——《无问西东》</p></blockquote><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1531287863629&amp;di=b921ee9503b175737d5011be0831eab3&amp;imgtype=0&amp;src=http%3A%2F%2Fpic.spider.com.cn%2Fpic%2Fbookpic%2F201801%2F1516515254495080008.jpg" alt=""></p><p>我现在也在反问自己这个问题，如果知道有这么多坑，是不是还会那么爽快的答应下来。</p><h1 id="Match-for-iPhone的界面"><a href="#Match-for-iPhone的界面" class="headerlink" title="Match for iPhone的界面"></a>Match for iPhone的界面</h1><p>作为一个完整应用的开发，肯定是无法在一篇博客中写完的，需要<em>一系列</em>文章来将实现的逻辑给<strong>理顺</strong>。本文作为系列文章的开篇之作，暂且不涉及技术细节，而是介绍这款应用的界面和使用，在实现过程中遇到的坑放到后面的博客中写出来与大家分享。</p><h2 id="从StoryBoard看整个应用"><a href="#从StoryBoard看整个应用" class="headerlink" title="从StoryBoard看整个应用"></a>从StoryBoard看整个应用</h2><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1ft5pr6ddzxj31k41hggo8.jpg" alt=""></p><blockquote><p>Match的StoryBoard原型</p></blockquote><p>从StoryBoard来看，大约有15个场景，其实由于我的优化，已经将不少可以重复使用的场景进行了合并，达到了复用的目的。</p><p>麻雀虽小，五脏俱全，这些场景覆盖了包括登陆页、导航页、问题列表页、问题与回复页、提问题页、写回复页、个人主页、规则说明页、申请提现页和图片预览页等页面，基本上实现了这个平台所需要的所有场景。</p><h2 id="真实的界面截图"><a href="#真实的界面截图" class="headerlink" title="真实的界面截图"></a>真实的界面截图</h2><p>真实的界面响应了iOS 11的号召，采用推荐的大标题风格。</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1ft5qztdcb1j30v91vodhz.jpg" alt=""></p><blockquote><p>模仿Apple store的卡片式问题列表页，增加了下拉刷新和上拉加载更多</p></blockquote><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1ft5rdz2e8fg307s0dwqv6.gif" alt=""></p><blockquote><p>从Github上“学来”的萌萌哒登录页</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1ft5r0w55sdj30v91voq4t.jpg" alt=""></p><blockquote><p>模仿知乎的多Section TableView问题与回复页</p></blockquote><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1ft5r2bwbxkj30v91vojsl.jpg" alt=""></p><blockquote><p>坑点巨多的富文本提问和回复页</p></blockquote><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1ft5r4jilvcj30v91voabt.jpg" alt=""></p><blockquote><p>设计风格良好的交互框</p></blockquote><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1ft5r53oz15j30v91vowgp.jpg" alt=""></p><blockquote><p>中规中矩的个人主页</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1ft5r5zmt7kj30v91vowgu.jpg" alt=""></p><blockquote><p>诱人的答题收入页</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1ft5r75c2vsj30v91vodx7.jpg" alt=""></p><blockquote><p>APP icon 页面，图标由“别人家的孩子”提供</p></blockquote><p>限于篇幅原因，这里只列出了一小部分应用截图。</p><h2 id="系统要求-amp-支持的手机"><a href="#系统要求-amp-支持的手机" class="headerlink" title="系统要求&amp;支持的手机"></a>系统要求&amp;支持的手机</h2><p>系统要求支持iOS 11.0以上，支持的机型包括iPhone 5s、6/7/8 <em>(plus)</em>和 <em>iPhone X</em>。</p><p>最后也欢迎大家支持一下Match的<strong>安卓</strong>版，在各大安卓商店有售。</p><p>从下一篇开始，我将会把在开发这款应用中遇到的困难和解决方案列出来，作一个总结。</p><p>最后学一下电影无问西东，首尾呼应，也当是扪心自问一下：</p><blockquote><p>“如果提前了解了你所面对的人生，你是否还有勇气前来？”</p></blockquote><p>电影《无问西东》描述了四段故事，主人公经历着背叛与毁灭，品尝着分别与想念，也都在最后选择了坚持与盛放。其实到现在也不是很理解这部电影的精神和情怀，但我知道我<strong>肯定是没有</strong>。</p><p>只能列出张果果最后的独白,分享给大家:</p><blockquote><p>看到和听到的，经常会令你们沮丧，世俗是这样强大，强大到生不出改变它们的念头来。可是如果有机会提前了解了你们的人生，知道青春也不过只有这些日子，不知你们是否还会在意那些世俗希望你们在意的事情。愿你在被打击时，记起你的珍贵，抵抗恶意；愿你在迷茫时，坚信你的珍贵，爱你所爱，行你所行，听从你心。</p></blockquote><p><img src="http://t12.baidu.com/it/u=3594607433,4071731292&amp;fm=173&amp;s=B628E1A7579A03D8D1CCEC2F0300A042&amp;w=600&amp;h=375&amp;img.JPEG" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;开发Match的初衷&quot;&gt;&lt;a href=&quot;#开发Match的初衷&quot; class=&quot;headerlink&quot; title=&quot;开发Match的初衷&quot;&gt;&lt;/a&gt;开发Match的初衷&lt;/h1&gt;&lt;p&gt;大约一个月前的某天，一个很久未曾联系的同学突然给我发微信，问我有没有时间帮他
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS开发" scheme="http://zhihaozhang.github.io/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>绕开迅雷的利器:thunderPassby开发笔记</title>
    <link href="http://zhihaozhang.github.io/2018/06/01/thunderPassby/"/>
    <id>http://zhihaozhang.github.io/2018/06/01/thunderPassby/</id>
    <published>2018-06-01T11:47:53.000Z</published>
    <updated>2018-06-02T06:47:49.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="thunder-Bypass-for-macOS-开发初衷"><a href="#thunder-Bypass-for-macOS-开发初衷" class="headerlink" title="thunder-Bypass for macOS 开发初衷"></a>thunder-Bypass for macOS 开发初衷</h1><p>前天无意中看到了<a href="http://free.apprcn.com/get-thunder-real-url/" target="_blank" rel="external">Thunder Real Url</a>的限免信息，觉得这款软件有点意思，而且对于我这种<strong>非迅雷vip</strong>来说好像挺有用。不过点进去后发现是windows的客户端，于是我就萌生了做一个<strong><em>功能类似</em></strong>，但<strong><em>体验更好</em></strong>的macOS客户端。</p><h1 id="软件开源-下载链接"><a href="#软件开源-下载链接" class="headerlink" title="软件开源/下载链接"></a>软件开源/下载链接</h1><p><a href="https://github.com/zhihaozhang/thunder-Bypass" target="_blank" rel="external">开源地址</a></p><p>想下载直接使用的朋友请移步：<br><a href="https://github-production-release-asset-2e65be.s3.amazonaws.com/135258364/f2905dee-65e5-11e8-91ee-5cd6458b500a?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20180602%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20180602T064722Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=21abfd513fa7ec1908a4958e5c0cec59f647cb8061cbbc6d2274782cd0de07e5&amp;X-Amz-SignedHeaders=host&amp;actor_id=4500659&amp;response-content-disposition=attachment%3B%20filename%3DthunderPassby.app.zip&amp;response-content-type=application%2Foctet-stream" target="_blank" rel="external">下载地址</a></p><h1 id="软件用途"><a href="#软件用途" class="headerlink" title="软件用途"></a>软件用途</h1><h2 id="icon-gt-软件用途"><a href="#icon-gt-软件用途" class="headerlink" title="icon -&gt; 软件用途"></a>icon -&gt; 软件用途</h2><p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1frtjl9v4kjj308y06mt90.jpg" alt=""></p><blockquote><p>icon和迅雷icon对比</p></blockquote><p>icon很有趣，是围绕着迅雷的图标展开的。迅雷的图标是一只鸟，thunder-Bypass旨在<strong>绕开(Bypass)*</strong>迅雷(thunder)<em>，因此，我用迅雷icon那只鸟飞出鸟笼的瞬间作为图标，<em>*寓意着突破迅雷的禁锢</em></em>。</p><p>希望icon很好的诠释了软件的用途:</p><blockquote><p>破解并获得以thunder:// 开头的迅雷下载地址背后的真实下载地址，自动复制到您的剪切板，您可以用非迅雷的第三方下载软件另行下载。 <em>Get the real dwnload url from encrypted thunder url which starts with thunder://</em></p></blockquote><h2 id="为什么要突破迅雷的限制"><a href="#为什么要突破迅雷的限制" class="headerlink" title="为什么要突破迅雷的限制"></a>为什么要突破迅雷的限制</h2><p>你们也知道，迅雷非vip的下载速度越来越慢了，通过本软件获取真实的磁力链接，然后复制到良心的第三方下载软件，下载速度可以非常快。关于第三方下载软件的推荐，可以参考知乎上的帖子:<a href="https://www.zhihu.com/question/24471469/answer/28122044" target="_blank" rel="external">除了迅雷，还有什么其他下载软件 ？</a></p><h2 id="磁力链接是什么"><a href="#磁力链接是什么" class="headerlink" title="磁力链接是什么"></a>磁力链接是什么</h2><p>【1】简单地说，磁力链接是一种特殊链接，但是它与传统基于文件的位置或名称的普通链接不一样，它只是通过不同文件内容的Hash结果生成一个纯文本的“数字指纹”，并用它来识别文件。它类似于生活消费品包装上常见的条码，不同的是这个“数字指纹”可以被任何人从任何文件上生成，这也就注定了“磁力链接”不需要任何“中心机构”的支持（例如：BT Tracker服务器），且识别准确度极高。因此任何人都可以生成一个Magnet链接并确保通过该链接下载的文件准确无误。更简单地说：类似【magnet:?xt=urn:sha1:YNCKHTQCWBTRNJIV4WNAE52SJUQCZO5C】这样以“magnet:?”开头的字符串，就是一条“磁力链接”，其在网页上的图标像一块磁铁，很容易辨别。</p><h1 id="软件使用方法"><a href="#软件使用方法" class="headerlink" title="软件使用方法"></a>软件使用方法</h1><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1frvhpcuu58j30qo0ia406.jpg" alt=""></p><blockquote><p>链接是百度里搜的，貌似有福利哟~</p></blockquote><p>主界面很清爽，上面的textField是提供给用户输入需要破解的迅雷下载地址的。<strong>注意该url前后不要有空格、回车等特殊字符，否则可能造成无法解码。</strong></p><p>点击中间的解锁按钮后，如果解码成功，下面的textField会显示解码后的磁力链接，并<strong>自动</strong>复制到您的剪切板，通知中心会发送通知。</p><p>当然，无论解码成功与否，通知中心均会有相应提示。</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1frvhqibpksj30is0gijtb.jpg" alt=""></p><h1 id="破解机制"><a href="#破解机制" class="headerlink" title="破解机制"></a>破解机制</h1><p>破解机制是在网上找的，<a href="https://www.douban.com/note/624978147/" target="_blank" rel="external">参考2</a>，其实就是去掉thunder://后，用base64解密，解密后的url在前面加了AA，在最后加了ZZ。</p><p>核心代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">decryptButtonClicked</span><span class="params">(<span class="number">_</span> sender: Any)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> thunderURL = thunderURLFiled.stringValue</div><div class="line">        <span class="keyword">if</span> thunderURL.hasPrefix(<span class="string">"thunder://"</span>) &#123;</div><div class="line">            <span class="keyword">let</span> encryptedURL = thunderURL.substring(from: thunderURL.index(thunderURL.startIndex,offsetBy :<span class="number">10</span>))</div><div class="line">            </div><div class="line">            </div><div class="line">            <span class="keyword">let</span> decryptedURL0 = <span class="type">Base64FS</span>.decodeString(str: encryptedURL)</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> decryptedURL0.<span class="built_in">count</span> &gt; <span class="number">0</span>&#123;</div><div class="line">                </div><div class="line">                <span class="keyword">let</span> decryptedURL1 = decryptedURL0.substring(from: decryptedURL0.index(decryptedURL0.startIndex,offsetBy :<span class="number">2</span>))</div><div class="line">            </div><div class="line">                <span class="keyword">let</span> decryptedURL2 = decryptedURL1.substring(to: decryptedURL1.index(decryptedURL1.endIndex,offsetBy :-<span class="number">2</span>))</div><div class="line">                </div><div class="line">                decryptedURL.stringValue = decryptedURL2</div><div class="line">                </div><div class="line">                <span class="comment">// copy decrypted URL automaticly for users</span></div><div class="line">                <span class="keyword">let</span> pasteboard = <span class="type">NSPasteboard</span>.general</div><div class="line">                pasteboard.declareTypes([<span class="type">NSPasteboard</span>.<span class="type">PasteboardType</span>.string], owner: <span class="literal">nil</span>)</div><div class="line">                pasteboard.setString(decryptedURL2, forType: <span class="type">NSPasteboard</span>.<span class="type">PasteboardType</span>.string)</div><div class="line">                </div><div class="line">                <span class="keyword">let</span> userNotification = <span class="type">NSUserNotification</span>()</div><div class="line">                userNotification.title = <span class="string">"Message"</span></div><div class="line">                userNotification.subtitle = <span class="string">"恭喜成功破解迅雷下载地址"</span></div><div class="line">                userNotification.informativeText = <span class="string">"提示:地址已帮您复制到剪切板"</span></div><div class="line">                <span class="comment">// 使用NSUserNotificationCenter发送NSUserNotification</span></div><div class="line">                <span class="keyword">let</span> userNotificationCenter = <span class="type">NSUserNotificationCenter</span>.<span class="keyword">default</span></div><div class="line">               </div><div class="line">               </div><div class="line">                userNotificationCenter.delegate = <span class="keyword">self</span></div><div class="line">                </div><div class="line">                userNotificationCenter.scheduleNotification(userNotification)</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">let</span> userNotification = <span class="type">NSUserNotification</span>()</div><div class="line">                userNotification.title = <span class="string">"Message"</span></div><div class="line">                userNotification.subtitle = <span class="string">"解码失败"</span></div><div class="line">                userNotification.informativeText = <span class="string">"请输入正确的迅雷下载地址"</span></div><div class="line">                <span class="comment">// 使用NSUserNotificationCenter发送NSUserNotification</span></div><div class="line">                <span class="keyword">let</span> userNotificationCenter = <span class="type">NSUserNotificationCenter</span>.<span class="keyword">default</span></div><div class="line">                </div><div class="line">                </div><div class="line">                userNotificationCenter.delegate = <span class="keyword">self</span></div><div class="line">                </div><div class="line">                userNotificationCenter.scheduleNotification(userNotification)</div><div class="line">                </div><div class="line">                thunderURLFiled.stringValue = <span class="string">""</span></div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125; <span class="keyword">else</span>&#123;</div><div class="line">            </div><div class="line">            <span class="keyword">let</span> alert = <span class="type">NSAlert</span>()</div><div class="line">            alert.addButton(withTitle: <span class="string">"OK"</span>)</div><div class="line">            </div><div class="line">            alert.messageText = <span class="string">"Alert"</span></div><div class="line">            </div><div class="line">            alert.informativeText = <span class="string">"please input correct thunder download url which hasPrefix thunder://"</span></div><div class="line">            </div><div class="line">            alert.alertStyle = .informational</div><div class="line">        </div><div class="line">            alert.beginSheetModal(<span class="keyword">for</span>: <span class="keyword">self</span>.view.window!, completionHandler: <span class="literal">nil</span>)</div><div class="line">            </div><div class="line">            thunderURLFiled.stringValue = <span class="string">""</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>主要的坑点是有些链接是以thunder://开头的，但是并不能被正确的解码，并引起了程序的崩溃，必须对解码的过程加入错误判断。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>开发完成后，有网友留言说网上有很多在线的，这点我确认过了，确实有。如果提早知道有，我想我还是会做它。因为不管这事看起来有多么简单、无意义，你没有探索过，就无法体会到其中探索的乐趣。另外，这件事或许只是对于开发者来说相对简单，普通用户想理解base64就比较困难，更别说实现它了，他们更想要一个GUI的界面，给输入，得到想要的输出，实现的过程他们不想关心。</p><p>也有人留言说迅雷加密的方式有很多，这个我试了10多条下载链接，暂时没有发现不符合上面提到的加密方式的，欢迎网友提供反例帮我完善解密机制。</p><p>最后用蔡学镛老师的一段话结束本文，大家共勉:</p><blockquote><p>建立一个自己的项目，很重要。它不属于公司或其他人，是你独自拥有的一种精神寄托。它有一部分研究性质，有一部分实验性质，如果还有应用潜力甚至商业潜力就更好了。这样项目的存在，会让你专注思考和动手，会激发你精益求精的态度。你不会在意别人是否理解你在干什么，因为你的自信爆棚。 ​​​  ——蔡学镛</p></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>1.<a href="https://www.zhihu.com/question/36151980/answer/66732525" target="_blank" rel="external">知乎：郭无心的回答</a><br>2.<a href="https://www.douban.com/note/624978147/" target="_blank" rel="external">豆瓣</a><br>3.<a href="https://github.com/jdjack/Swift-URL-Safe-Base64" target="_blank" rel="external">Github:Base64FS</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;thunder-Bypass-for-macOS-开发初衷&quot;&gt;&lt;a href=&quot;#thunder-Bypass-for-macOS-开发初衷&quot; class=&quot;headerlink&quot; title=&quot;thunder-Bypass for macOS 开发初衷&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="macOS开发" scheme="http://zhihaozhang.github.io/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>面向协议编程初探</title>
    <link href="http://zhihaozhang.github.io/2018/05/20/ProtocolOP/"/>
    <id>http://zhihaozhang.github.io/2018/05/20/ProtocolOP/</id>
    <published>2018-05-20T09:06:16.024Z</published>
    <updated>2018-07-30T06:27:13.291Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从编程范式讲起"><a href="#从编程范式讲起" class="headerlink" title="从编程范式讲起"></a>从编程范式讲起</h1><p>或许你经常听到诸如面向对象编程、面向过程编程、面向协议编程、函数式编程这些词，心中也不免疑惑，这些词都是些啥？</p><h2 id="编程范式-on-wiki"><a href="#编程范式-on-wiki" class="headerlink" title="编程范式 on wiki"></a>编程范式 on wiki</h2><p>相比于本文要介绍的面向协议编程，面向对象编程的名声似乎更响。面向对象由于<em>C++</em>和<em>java</em>的流行，成为近二十年来最为流行的<strong><a href="https://zh.wikipedia.org/wiki/编程范型" target="_blank" rel="external">编程范式</a></strong>。其他编程范式还有比面向对象更早的<strong>面向过程编程</strong>、<strong>指令编程</strong>，以及以<em>Haskell</em>为代表的<em>*函数式</em>编程和苹果提出的<em>面向协议</em>编程。</p><p>编程范式是一类典型的<strong>编程风格</strong>，是指从事软件工程的一类典型的风格（可以对照方法学）。编程范型提供了（同时决定了）程序员对程序执行的看法。             ——wiki</p><h2 id="我理解的编程范式"><a href="#我理解的编程范式" class="headerlink" title="我理解的编程范式"></a>我理解的编程范式</h2><p>说说我的理解，我认为编程范式<strong>反应了某种编程语言的设计者希望程序员在使用他设计的语言时，用什么样的方式去思考问题。</strong>因此不同的编程范式各有自身的长处，也难免有不足之处，在应对各种问题的时候，某种编程范式可能会更适合一些，选择得当，程序员的工作量会减少很多。</p><p>一种语言，可能支持多种编程范式，例如Swift，既支持面向协议编程，又支持面向对象编程、面向协议编程和函数式编程。只是在解决不同任务时，某些范式更合适。</p><h3 id="Swift-amp-面向对象编程"><a href="#Swift-amp-面向对象编程" class="headerlink" title="Swift &amp; 面向对象编程"></a>Swift &amp; 面向对象编程</h3><p>举个例子，由于历史原因，在开发Cocoa和cocoa touch程序时，还是广泛使用了UIkit、Foundation框架和控制器视图(ViewController)，他们使用的是OC时代的面向对象编程的方式，从<strong>继承</strong>的角度去考虑问题的。</p><p><img src="http://img.my.csdn.net/uploads/201210/18/1350528267_1570.jpg" alt=""></p><blockquote><p>UIkit框架类组织架构图</p></blockquote><h3 id="Swift-amp-面向过程编程"><a href="#Swift-amp-面向过程编程" class="headerlink" title="Swift &amp; 面向过程编程"></a>Swift &amp; 面向过程编程</h3><p>在解决<strong>动画</strong>、<strong>渲染</strong>、<strong>数据可视化</strong>等问题时，还是以古老的面向过程式的思维方式进行编程。因为在画图时，先绘制的东西会被后绘制的东西盖住，形成<strong>层(Layer)</strong>的概念。如果不能保证代码是同步一条条执行，那很可能每次渲染出来的图形是不同的。</p><h3 id="Swift-amp-函数式编程"><a href="#Swift-amp-函数式编程" class="headerlink" title="Swift &amp; 函数式编程"></a>Swift &amp; 函数式编程</h3><p><a href="https://objccn.io/products/functional-swift/" target="_blank" rel="external">函数式编程</a>本身是一个很大的课题，精髓是避免使用程序状态和可变对象，从而降低程序复杂度。函数式编程强调执行的结果，而非执行的过程。我们先构建一系列简单却具有一定功能的小函数，然后再将这些函数进行组装以实现完整的逻辑和复杂的运算，这是函数式编程的基本思想。</p><p>Swift在函数式编程方面表现虽不如Haskell来的纯粹，但是作为一个比Haskell流行的多的语言，和很多已有的函数式编程语言，Swift在语法上更加优雅灵活，语言本身也遵循了函数式的设计模式，是大部分程序员接触函数式编程的第一门语言。以后有机会单独介绍一下函数式编程，有兴趣的读者也可以先看chase Zhang的这篇<a href="https://io-meter.com/2017/05/29/A-Brief-Intro-to-Functional-Programming/" target="_blank" rel="external">blog</a>。</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1frhyb0vzaaj30q80er0t2.jpg" alt=""></p><h1 id="面向协议编程出现的历史"><a href="#面向协议编程出现的历史" class="headerlink" title="面向协议编程出现的历史"></a>面向协议编程出现的历史</h1><p>回到今天的主角，面向协议编程。面向协议编程是由面向对象编程演变来的，协议在诸如c++和java等面向对象的语言中有一个别名，<strong>接口</strong>。(别骂街、别关网页，好戏在后头)</p><h2 id="面向对象编程的好处"><a href="#面向对象编程的好处" class="headerlink" title="面向对象编程的好处"></a>面向对象编程的好处</h2><p>面向对象编程这些年能够风光无限，主要是由于它有的很多优点，例如：</p><ol><li>数据封装</li><li>访问控制</li><li>类型抽象为类</li><li>继承关系，更符合人类思维</li><li>代码以逻辑关系组织到一起，方便阅读</li><li>由于继承、多态的特性，自然设计出高内聚、低耦合的系统结构，使得系统更灵活、更容易扩展，而且成本较低</li><li>在设计时，可重用现有的，在以前的项目的领域中已被测试过的类使系统满足业务需求并具有较高的质量</li></ol><p>这么多优点，不可能一下全抛弃，所以也注定了面向协议编程不是一种革命性的编程范式，而是对面向对象编程的改良和演变。</p><h2 id="Who-is-Crusty-at-Apple"><a href="#Who-is-Crusty-at-Apple" class="headerlink" title="Who is Crusty at Apple"></a>Who is Crusty at Apple</h2><p>长久以来，大家似乎默认了面向对象编程的好处都是由class带来的，但在苹果公司内部，有个叫Crusty的老兄<strong>think different</strong>了，他认为这一切是抽象类型带来的，而不是class带来的。我们知道，在面向对象编程中，接口和类都是对数据类型的抽取，类只是抽象类型众多实现的手段之一。在很多编程语言中，Struct和枚举同样可以做到对数据类型的抽取。</p><blockquote><p>It’s Type, not Classes.                           ————Crusty</p></blockquote><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1frhz1ha9i8j30jg0d6dg6.jpg" alt=""></p><p>Crusty认为，较好的抽象类型应该：</p><ol><li>更多地支持值类型，同时也支持引用类型</li><li>更多地支持静态类型关联（编译期），同时也支持动态派发（runtime）</li><li>结构不庞大不复杂</li><li>模型可扩展</li><li>不给模型强制添加数据</li><li>不给模型增加初始化任务的负担</li><li>清楚哪些方法该实现哪些方法不需实现</li></ol><p>经过改良的接口，达到了上面的要求，并改名为协议。至此，苹果决定将面向对象中的继承父类发展为服从协议，面向协议编程出现了。</p><h1 id="面向协议编程的好处"><a href="#面向协议编程的好处" class="headerlink" title="面向协议编程的好处"></a>面向协议编程的好处</h1><p>前面提到了，经过Apple改良的接口达到了上节提出的较好抽象类型的目标。Swift的面向协议编程相比于OC的面向对象编程的好处主要体现在两点：1.<strong>动态派发的安全性</strong>、2.<strong>横切关注点</strong>。</p><h2 id="动态派发的安全性"><a href="#动态派发的安全性" class="headerlink" title="动态派发的安全性"></a>动态派发的安全性</h2><p>OC有强大的Runtime，在OC中，message与方法是在执行阶段绑定的，而不是编译阶段。简单的说 [a someFunc] 这样一个调用，在编译阶段，编译器并不知道someFunc要执行哪段代码。这个时候[a someFunc]会被转换为 objc_msgSend(a, “someFunc”)，字面的意思也很容易理解，就是给a这个instance，发“someFunc”这个消息，以selector的形式。在运行阶段，执行到上述的objc_msgSend这个函数时。函数内部会到a对应的内存地址，寻找someFunc这个方法的地址，并执行。如果找不到，就会抛一个“unknown selector sent to instance”的异常。（比如.h中声明了方法，但.m中没有实现，就可以重现这个错误）</p><p>下面举的例子来自于喵神在MDCC 16上的演讲<a href="https://blog.csdn.net/it_zhaoxiaowei/article/details/53436851" target="_blank" rel="external">《面向协议编程与 Cocoa 的邂逅》</a>中的ppt：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="type">ViewController</span> *v1 = ...</div><div class="line">[v1 myMethod];</div><div class="line"><span class="type">AnotherViewController</span> *v2 = ...</div><div class="line">[v2 myMethod];</div><div class="line"><span class="type">NSObject</span> *v3 = [<span class="type">NSObject</span> new] <span class="comment">// v3  `myMethod`</span></div><div class="line"><span class="type">NSArray</span> *array = @[v1, v2, v3];</div><div class="line"><span class="keyword">for</span> (id obj <span class="keyword">in</span> array) &#123;</div><div class="line">    [obj myMethod];</div><div class="line">&#125;</div><div class="line"><span class="comment">// Runtime error:</span></div><div class="line"><span class="comment">// unrecognized selector sent to instance blabla</span></div></pre></td></tr></table></figure><p>上面的代码是可以编译过的，但是在运行时程序会崩溃。有了<strong>协议</strong>(<strong>protocol</strong>),可以申明数组的每个对象都是遵从某个协议的，如果塞进去了不遵从该协议的对象，就会报错，通不过编译。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Greetable</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">greet</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cat</span>: <span class="title">Greetable</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> name: <span class="type">String</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">greet</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"meow~ <span class="subst">\(name)</span>"</span>)</div><div class="line">&#125; &#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> array: [<span class="type">Greetable</span>] = [</div><div class="line">        <span class="type">Person</span>(name: <span class="string">"Wei Wang"</span>),</div><div class="line">        <span class="type">Cat</span>(name: <span class="string">"onevcat"</span>)]</div><div class="line"><span class="keyword">for</span> obj <span class="keyword">in</span> array &#123;</div><div class="line">    obj.greet()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Bug</span>: <span class="title">Greetable</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> name: <span class="type">String</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// Compiler Error:</span></div><div class="line"><span class="comment">// 'Bug' does not conform to protocol 'Greetable'</span></div><div class="line"><span class="comment">// protocol requires function 'greet()'</span></div></pre></td></tr></table></figure><h2 id="横切关注点-Cross-Cutting-Concerns"><a href="#横切关注点-Cross-Cutting-Concerns" class="headerlink" title="横切关注点(Cross-Cutting Concerns)"></a>横切关注点(Cross-Cutting Concerns)</h2><p>由于大部分面向对象的编程语言都是单继承的，导致了某些功能是不同类之间都需要的，但是由于改类已经继承了其他类，或者无法将不同类之间抽取出更多共性(或者说对于某一个小功能点来这样做代价太大)，成为他们的父类，这样不得不在每个类里面重复一遍代码，使得代码很冗长。这样的小功能就可以称为横切关注点。</p><p>还是直接拿喵神的例子，假设我们有一个 ViewController，它继承自UIViewController，我们向其中添加一个 myMethod，如果这时候我们又有一个继承自 UITableViewController 的 AnotherViewController，我们也想向其中添加同样的 myMethod，这时，我们迎来了 OOP 的一大困境，那就是我们很难在不同继承关系的类里共用代码。这里的问题用“行话”来说叫做“横切关注点” (Cross-Cutting Concerns)。我们的关注点 myMethod 位于两条继承链 (UIViewController -&gt; ViewCotroller 和 UIViewController -&gt; UITableViewController -&gt; AnotherViewController) 的横切面上。面向对象是一种不错的抽象方式，但是肯定不是最好的方式。它无法描述两个不同事物具有某个相同特性这一点。在这里，特性的组合要比继承更贴切事物的本质。</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fri12dytq6j30c3079dfs.jpg" alt=""></p><p>在swift中很容易抽取出协议，并用<strong>extension</strong>关键字提供协议的默认实现，从而避免的代码的重复。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>1.<a href="https://blog.csdn.net/it_zhaoxiaowei/article/details/53436851" target="_blank" rel="external">《面向协议编程与 Cocoa 的邂逅》</a><br>2.<a href="https://zh.wikipedia.org/wiki/编程范型" target="_blank" rel="external">wiki:编程范式</a><br>3.<a href="https://io-meter.com/2017/05/29/A-Brief-Intro-to-Functional-Programming/" target="_blank" rel="external">A Brief Intro to Functional Programming</a><br>4.<a href="https://www.zhihu.com/question/39844612" target="_blank" rel="external">Objective-C 的消息机制如何理解</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;从编程范式讲起&quot;&gt;&lt;a href=&quot;#从编程范式讲起&quot; class=&quot;headerlink&quot; title=&quot;从编程范式讲起&quot;&gt;&lt;/a&gt;从编程范式讲起&lt;/h1&gt;&lt;p&gt;或许你经常听到诸如面向对象编程、面向过程编程、面向协议编程、函数式编程这些词，心中也不免疑惑，这些词
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="swift" scheme="http://zhihaozhang.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift5新特性</title>
    <link href="http://zhihaozhang.github.io/2018/05/09/swiftfive/"/>
    <id>http://zhihaozhang.github.io/2018/05/09/swiftfive/</id>
    <published>2018-05-09T05:29:58.331Z</published>
    <updated>2018-05-09T05:29:58.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>话说这两天好像是Google IO召开的日子，借机蹭一波热度，唱个反调，浅析一下Swift5可能会出现的新特性，也算是为下个月即将举办的<strong>WWDC</strong>预热预热吧。</p><h1 id="ABI稳定性"><a href="#ABI稳定性" class="headerlink" title="ABI稳定性"></a>ABI稳定性</h1><p>ABI稳定性这个话题是一个历史遗留任务，最初是Swift3的目标，苹果的拖延症一直拖到了Swift5，还不一定可以实现。这也是国内很多公司不敢全面拥抱Swift的<strong>重要原因之一</strong>。</p><h2 id="ABI是啥"><a href="#ABI是啥" class="headerlink" title="ABI是啥"></a>ABI是啥</h2><p>ABI是Application Binary Interfaces（应用二进制接口）的缩写，它描述了应用程序和操作系统或其他应用程序的低级接口。</p><p>在应用程序运行时，Swift二进制需要和其他库或组件通过ABI进行接触，因此ABI定义了非常底层的细节。比如：如何调用一个函数，数据在内存中是如何存储的、元数据在哪以及如何获取到。</p><p>由于现在ABI是不稳定的，因此每一个APP都不得不绑定特定版本的Swift动态库。这样从外面看起来，Swift与App的关联比ios系统要更紧密。</p><p>举个例子来说，app1使用的是Swift 4.0，因此它绑定的是包含4.0 ABI的Swift 4.0动态库，而app2使用的是Swift 4.1，它绑定的就是包含4.1 ABI的Swift 4.1动态库。如果ABI变得稳定了，那么ABI就可以抽出来，集成到ios系统中，因为它可以跟Swift的任一版本兼容。</p><h2 id="ABI的重要性"><a href="#ABI的重要性" class="headerlink" title="ABI的重要性"></a>ABI的重要性</h2><p>通过上面的描述，应该不难看出ABI的重要性了，总结一下ABI稳定性带来的好处吧：</p><ul><li>App所占的大小会减小</li><li>Swift变化也没现在这么频繁</li><li>版本变化时，更少的改动</li><li>因为不需要绑定特定版本的swift，开发者可以做出预编译的框架</li></ul><p>但凡事都有两面性，由于带上了ABI这个脚链，不可避免的也会引入一些缺点：</p><ul><li>限制了接口的变动</li><li>Swift的发展和演化需要考虑的东西也渐渐多了起来</li></ul><h1 id="Async-Await-模式"><a href="#Async-Await-模式" class="headerlink" title="Async/Await 模式"></a>Async/Await 模式</h1><p>熟悉javascript的朋友应该对这个模式不陌生，在ES7中，也加入了这个模式应对异步编程。这个好用的特性，即将引入Swift5！</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>之前，例如错误处理、回调之类的异步API用起来挺麻烦的，组合调用时很容易产生出复杂的控制流，用Swift的guard let语法糖在闭包调用中看起来重重嵌套，开发者很难知道当前所处的上下文。</p><p>举个例子：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadWebResource</span><span class="params">(<span class="number">_</span> path: String, completionBlock: <span class="params">(result: Resource)</span></span></span> -&gt; <span class="type">Void</span>) &#123; ... &#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">decodeImage</span><span class="params">(<span class="number">_</span> r1: Resource, <span class="number">_</span> r2: Resource, completionBlock: <span class="params">(result: Image)</span></span></span> -&gt; <span class="type">Void</span>)</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">dewarpAndCleanupImage</span><span class="params">(<span class="number">_</span> i : Image, completionBlock: <span class="params">(result: Image)</span></span></span> -&gt; <span class="type">Void</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">processImageData1</span><span class="params">(completionBlock: <span class="params">(result: Image)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</div><div class="line">   loadWebResource(<span class="string">"dataprofile.txt"</span>) &#123; dataResource <span class="keyword">in</span></div><div class="line">      loadWebResource(<span class="string">"imagedata.dat"</span>) &#123; imageResource <span class="keyword">in</span></div><div class="line">         decodeImage(dataResource, imageResource) &#123; imageTmp <span class="keyword">in</span></div><div class="line">            dewarpAndCleanupImage(imageTmp) &#123; imageResult <span class="keyword">in</span></div><div class="line">               completionBlock(imageResult)</div><div class="line">             &#125;</div><div class="line">          &#125;</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>引入Async/Await模式后，现在的代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadWebResource</span><span class="params">(<span class="number">_</span> path: String)</span></span> async -&gt; <span class="type">Resource</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">decodeImage</span><span class="params">(<span class="number">_</span> r1: Resource, <span class="number">_</span> r2: Resource)</span></span> async -&gt; <span class="type">Image</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">dewarpAndCleanupImage</span><span class="params">(<span class="number">_</span> i : Image)</span></span> async -&gt; <span class="type">Image</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">processImageData1</span><span class="params">()</span></span> async -&gt; <span class="type">Image</span> &#123;</div><div class="line">    <span class="keyword">let</span> dataResource = await loadWebResource(<span class="string">"dataprofile.txt"</span>)</div><div class="line">    <span class="keyword">let</span> imageResource = await loadWebResource(<span class="string">"imagedata.dat"</span>)</div><div class="line">    <span class="keyword">let</span> imageTmp = await decodeImage(dataResource, imageResource)</div><div class="line">    <span class="keyword">let</span> imageResult = await dewarpAndCleanupImage(imageTmp)</div><div class="line">    <span class="keyword">return</span> imageResult</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>此处应有掌声</p></blockquote><h1 id="Actors"><a href="#Actors" class="headerlink" title="Actors"></a>Actors</h1><ul><li>Actors是一个新概念，它表示现实世界中的一些概念，比如“一个文档”、“一台设备”、“一次网络请求”等。</li><li>它是调度队列、可运行在该队列上并受该队列保护的数据的组合</li><li>可以认为是类似于class和protocol的一种新类型</li><li>允许开发者在其中定义内部变量/函数从而管理数据、进行相关操作</li><li>不能返回值、抛出异常、没有inout参数</li><li>开发者可以与之异步通信，Actor可以保证它所保护的数据只被运行于其上的代码接触到</li><li>UIKit和AppKit可以将主线程建模成MainActor</li><li>和class、protocol一样，开发者可以用extension关键字扩展MainActor</li><li>当引用数变为0时，Actor生命周期完成</li></ul><p>举个例子，假设正在开发一个tableview的应用，内容是一个string数组(受保护数据)，代码看起来应该是这样:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">actor <span class="type">TableModel</span> &#123;</div><div class="line">    <span class="keyword">let</span> mainActor : <span class="type">TheMainActor</span></div><div class="line">    <span class="keyword">var</span> theList : [<span class="type">String</span>] = [] &#123;</div><div class="line">        <span class="keyword">didSet</span> &#123;</div><div class="line">            mainActor.updateTableView(theList)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">init</span>(mainActor: <span class="type">TheMainActor</span>) &#123; </div><div class="line">        <span class="keyword">self</span>.mainActor = mainActor </div><div class="line">    &#125;</div><div class="line">    actor <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(entry: String)</span></span> &#123;</div><div class="line">      theList.append(entry)</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><h1 id="其他提升"><a href="#其他提升" class="headerlink" title="其他提升"></a>其他提升</h1><ul><li>String:对正则表达式<strong>Language级别</strong>的支持、性能提升。</li><li>标准库的改进</li><li>改进Foundation</li><li>增加了新语法</li></ul><p>让我们一起静待WWDC2018的到来！</p><p>参考</p><ol><li><a href="https://www.developerinsider.in/what-will-be-new-in-swift-5/" target="_blank" rel="external">本文主要翻译自：DeveloperInsider</a>.</li><li><a href="https://www.jianshu.com/p/5860f5542f21" target="_blank" rel="external">Swift库二进制接口(ABI)兼容性研究</a></li><li><a href="https://imtx.me/archives/2370.html" target="_blank" rel="external">Swift 5 的蓝图：ABI 稳定</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;话说这两天好像是Google IO召开的日子，借机蹭一波热度，唱个反调，浅析一下Swift5可能会出现的新特性，也算是为下个月即将举办的&lt;s
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="swift" scheme="http://zhihaozhang.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>GoBACKSPACE————致敬Go2Shell的Finder插件</title>
    <link href="http://zhihaozhang.github.io/2018/04/17/GoBACKSPACE/"/>
    <id>http://zhihaozhang.github.io/2018/04/17/GoBACKSPACE/</id>
    <published>2018-04-17T12:52:36.290Z</published>
    <updated>2018-04-18T02:55:39.971Z</updated>
    
    <content type="html"><![CDATA[<p>仅以此项目<strong>向Go2Shell致敬</strong>、也庆祝Github10周年生日快乐，整个项目开源于<a href="https://github.com/zhihaozhang/GoBACKSPACE" target="_blank" rel="external">Github</a>，直接想用的朋友可以去<a href="https://pan.baidu.com/s/1EhGCUSVwVk1oXUCwbMfa5w" target="_blank" rel="external">百度网盘</a>下载。</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在macOS系统中，<strong>Finder</strong>(中文被官方译为访达)扮演着文件管理器的角色。在大多数场景下，Finder还是挺好用的，但是有一点让我很抓狂，那就是我在Finder视图中发现了一个文件或文件夹，想去它的父级目录时比较麻烦，因为Finder工具栏左边的&lt; &gt;按钮经常是灰色的，而且也只是能记录着你之前访问过的文件路径历史，有点类似于safari里访问过网页的历史。</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fqfyhfema8j3096050wei.jpg" alt=""></p><blockquote><p>Finder(访达)的工具栏截图 (&lt; &gt;为灰色)，蓝色指南针为GoBACKSPACE</p></blockquote><p>macOS的Finder只帮你记录了按时间先后访问过的文件地址，<strong>这意味着按&lt;键并不一定意味着去父级文件夹，它只表示是你之前访问过的文件夹。</strong> 更多情况下，&lt;和&gt;按键是灰色的，不让按的状态。</p><p>而GoBACKSPACE的出现将彻底改变这一现状，GoBACKSPACE可以做到的就是让你在文件的<strong>绝对</strong>路径关系之间浏览文件。主要需要解决的绝对路径去父文件夹的功能，因为去子文件夹只需要靠双击操作即可。我觉得<strong>绝对</strong>路径关系是更符合我思考的一种方式。去父文件夹这件事还是经常发生的，比如你在一个项目视图下，想去父目录将整个项目删除或AirDrop分享给其他人；搜索到了一张照片，想将该目录下所有照片打包等…</p><p>由于GoBACKSPACE和Finder之间的关系紧密，把它做成一个类似Go2Shell那样的插件是更好的选择；考虑到GoBACKSPACE的开发初衷是帮助用户更好的在不同文件夹间切换，因此这里选用了一个指南针作为logo，乍一看跟safari的图标好像，估计上架时会被苹果喷。看着旁边的Go2Shell，竟毫无违和感。</p><p>希望至此，读者已经明白了我<strong>为什么</strong>要开发GoBACKSPACE。</p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>首先要下载这个软件，我将安装文件打包上传到了<a href="https://pan.baidu.com/s/1EhGCUSVwVk1oXUCwbMfa5w" target="_blank" rel="external">百度网盘</a>，无需密码即可下载。</p><p>为了帮助读者将GoBACKSPACE添加到Finder工具栏，我做了一个Gif如下。</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fqfwji6347g30go0dekjm.gif" alt=""></p><blockquote><p>将GoBACKSPACE添加到Finder工具栏的方法</p></blockquote><p>一次添加即可，无需重复添加，使用它的时候，需要两个步骤：</p><ul><li>步骤1：点击icon</li><li>步骤2：<strong>没有步骤2!!</strong></li></ul><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fqfxcspvfig30go09lqv5.gif" alt="App icon"></p><blockquote><p>插件的最终效果demo</p></blockquote><h1 id="核心功能的实现"><a href="#核心功能的实现" class="headerlink" title="核心功能的实现"></a>核心功能的实现</h1><p>本项目的需求是我个人的真实需求，实现的时候参考了PathToGo这个项目，该项目返回上层使用了<strong>AppleScript</strong>，苹果自己的脚本语言，并使用Swift与之进行交互，返回脚本执行成功与否；并根据脚本的执行情况给用户弹toast，以免在最顶层目录时，不能继续往父级目录前进给用户带来困扰。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">tell</span> <span class="built_in">application</span> <span class="string">"Finder"</span></div><div class="line"><span class="keyword">set</span> currentPath <span class="keyword">to</span> <span class="keyword">POSIX path</span> <span class="keyword">of</span> (target <span class="keyword">of</span> window <span class="number">1</span> <span class="keyword">as</span> <span class="built_in">alias</span>)</div><div class="line"><span class="keyword">set</span> myArray <span class="keyword">to</span> <span class="keyword">my</span> theSplit(currentPath, <span class="string">"/"</span>)</div><div class="line"><span class="keyword">set</span> lengthOfArray <span class="keyword">to</span> <span class="keyword">the</span> <span class="built_in">length</span> <span class="keyword">of</span> myArray</div><div class="line"><span class="keyword">set</span> the_path <span class="keyword">to</span> <span class="string">""</span> <span class="keyword">as</span> <span class="built_in">string</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> lengthOfArray ≤ <span class="number">3</span> <span class="keyword">then</span></div><div class="line"><span class="built_in">return</span> <span class="string">"fail"</span></div><div class="line"><span class="keyword">else</span></div><div class="line"><span class="keyword">set</span> lengthOfNewArray <span class="keyword">to</span> (lengthOfArray - <span class="number">2</span>)</div><div class="line"><span class="keyword">set</span> parentPath <span class="keyword">to</span> items <span class="number">2</span> <span class="keyword">through</span> lengthOfNewArray <span class="keyword">of</span> myArray</div><div class="line"></div><div class="line"><span class="keyword">repeat</span> <span class="keyword">with</span> anItem <span class="keyword">in</span> parentPath</div><div class="line"><span class="keyword">set</span> the_path <span class="keyword">to</span> the_path &amp; <span class="string">"/"</span> &amp; anItem</div><div class="line"><span class="keyword">end</span> <span class="keyword">repeat</span></div><div class="line"><span class="keyword">set</span> the_path <span class="keyword">to</span> the_path &amp; <span class="string">"/"</span></div><div class="line"><span class="comment">-- go2Parent(the_path)</span></div><div class="line"><span class="keyword">set</span> the_folder <span class="keyword">to</span> (<span class="keyword">POSIX file</span> the_path) <span class="keyword">as</span> <span class="built_in">alias</span></div><div class="line"><span class="keyword">tell</span> <span class="built_in">application</span> <span class="string">"Finder"</span></div><div class="line"><span class="built_in">activate</span></div><div class="line"><span class="keyword">if</span> window <span class="number">1</span> exists <span class="keyword">then</span></div><div class="line"><span class="keyword">set</span> target <span class="keyword">of</span> window <span class="number">1</span> <span class="keyword">to</span> the_folder</div><div class="line"><span class="keyword">else</span></div><div class="line">reveal the_folder</div><div class="line"><span class="keyword">end</span> <span class="keyword">if</span></div><div class="line"><span class="keyword">end</span> <span class="keyword">tell</span></div><div class="line"></div><div class="line"><span class="built_in">return</span> <span class="string">"OK"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">end</span> <span class="keyword">if</span></div><div class="line"></div><div class="line"><span class="built_in">return</span> myArray</div><div class="line"><span class="keyword">end</span> <span class="keyword">tell</span></div><div class="line"></div><div class="line"><span class="keyword">on</span> theSplit(theString, theDelimiter)</div><div class="line"><span class="comment">-- save delimiters to restore old settings</span></div><div class="line"><span class="keyword">set</span> oldDelimiters <span class="keyword">to</span> <span class="literal">AppleScript</span>'s <span class="literal">text item delimiters</span></div><div class="line"><span class="comment">-- set delimiters to delimiter to be used</span></div><div class="line"><span class="keyword">set</span> <span class="literal">AppleScript</span>'s <span class="literal">text item delimiters</span> <span class="keyword">to</span> theDelimiter</div><div class="line"><span class="comment">-- create the array</span></div><div class="line"><span class="keyword">set</span> theArray <span class="keyword">to</span> <span class="keyword">every</span> <span class="built_in">text</span> <span class="built_in">item</span> <span class="keyword">of</span> theString</div><div class="line"><span class="comment">-- restore the old setting</span></div><div class="line"><span class="keyword">set</span> <span class="literal">AppleScript</span>'s <span class="literal">text item delimiters</span> <span class="keyword">to</span> oldDelimiters</div><div class="line"><span class="comment">-- return the result</span></div><div class="line"><span class="built_in">return</span> theArray</div><div class="line"><span class="keyword">end</span> theSplit</div></pre></td></tr></table></figure><p>AppleScript的逻辑是将当前Finder视图的路径返回，然后将这个路径以”/”进行分割，并根据返回数组的长度，去掉最后两个元素，形成新的路径，让AppleScript控制Finder将当前页面替换为新的文件夹路径，由于AppleScript的原生性，体验还是非常顺滑的。</p><p>Toast的出现和消除添加了动画，且动画的时间都是可以设置的，实现于ToastWindowController.swift文件中，感兴趣的读者可以去将项目clone下来看看，我觉得这个部分可以单独抽出去成为一个小轮子，也来源于PathToGO。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://github.com/HansonStudio/PathToGo" target="_blank" rel="external">PathToGO</a></li><li><a href="https://www.flaticon.com" target="_blank" rel="external">flaticon</a></li><li><a href="https://segmentfault.com/a/1190000011273388" target="_blank" rel="external">AppleScript教程1</a></li><li><a href="http://erikslab.com/2007/08/31/applescript-how-to-split-a-string/" target="_blank" rel="external">Erik’s Lab</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;仅以此项目&lt;strong&gt;向Go2Shell致敬&lt;/strong&gt;、也庆祝Github10周年生日快乐，整个项目开源于&lt;a href=&quot;https://github.com/zhihaozhang/GoBACKSPACE&quot; target=&quot;_blank&quot; rel=&quot;exte
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="macOS开发" scheme="http://zhihaozhang.github.io/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>极客编程日历桌面版开发笔记</title>
    <link href="http://zhihaozhang.github.io/2018/02/10/TuringCal/"/>
    <id>http://zhihaozhang.github.io/2018/02/10/TuringCal/</id>
    <published>2018-02-10T05:23:31.464Z</published>
    <updated>2018-07-18T05:48:10.817Z</updated>
    
    <content type="html"><![CDATA[<p>#背景介绍<br>图灵教育推出的<a href="http://www.ituring.com.cn/book/details/2625" target="_blank" rel="external"><strong>限量款编程日历2018</strong></a>，因为简约大气的设计和每周一个编程语言的介绍，在程序员中广受欢迎。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1foaaqel4dwj30u011i448.jpg" alt=""></p><blockquote><p>图灵教育推出的编程日历实体版</p></blockquote><p>不幸的是由于限量1000款，除去赠品的300多套，真正在售的只有600多套，很快就被抢购一空。值得欣慰的是，前天下午作者将pdf版本的日历公开<a href="http://www.ituring.com.cn/book/download/43507086-33c3-40e9-9115-d610e1333bca" target="_blank" rel="external">下载</a>。</p><p>在简书中也无意间看到有人用python片段将壁纸与当周的日历进行了融合，这个想法让我受到了启发，从该文章下面的评论看到很多用户(特别是mac用户)反映在 macOS 下，Wand 库有点小问题，GitHub 有人提到了这个 <a href="https://github.com/dahlia/wand/issues/324" target="_blank" rel="external">issue</a>。</p><p>我一直在使用的一款软件Blotter，吸附在桌面上的日历和待办事项，于是就萌生了一个将该pdf吸附在桌面上，并根据当前日期展示相应日期的应用，于是我花半天做了TuringCalendar这款应用,<a href="https://github.com/zhihaozhang/TuringCalendar" target="_blank" rel="external">开源地址</a>。欢迎有能力的开发者改进这款应用。</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1foabaeu23ij30m80dw77m.jpg" alt=""></p><blockquote><p>Blotter截图</p></blockquote><h1 id="TuringCalendar的现状"><a href="#TuringCalendar的现状" class="headerlink" title="TuringCalendar的现状"></a>TuringCalendar的现状</h1><p>由于时间仓促，这款软件有一些缺点需要后续解决。</p><ul><li>现在的默认将日历页放置在右上角，因为左上角被Blotter占了，后面需要做成可配置的。</li><li>现在是白底的，在浅色背景的桌面上会比较美观，在深色背景中就不那么美观了。关于这点我在简书上问过python代码的作者，他告诉我用<strong>通道混合</strong>来解决，目前尚在研究中。</li></ul><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fo9z6yw8fuj31dm1hkx6p.jpg" alt=""></p><blockquote><p>TuringCalendar截图</p></blockquote><h1 id="TuringCalendar开发过程"><a href="#TuringCalendar开发过程" class="headerlink" title="TuringCalendar开发过程"></a>TuringCalendar开发过程</h1><h2 id="将窗口固定在桌面上"><a href="#将窗口固定在桌面上" class="headerlink" title="将窗口固定在桌面上"></a>将窗口固定在桌面上</h2><p>macOS管理窗口的类是NSWindow，将窗口固定在桌面上是通过继承该类，并override 其中的某些方法做到的。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="keyword">init</span>(contentRect: <span class="type">NSRect</span>, styleMask style: <span class="type">NSWindow</span>.<span class="type">StyleMask</span>, backing backingStoreType: <span class="type">NSWindow</span>.<span class="type">BackingStoreType</span>, <span class="keyword">defer</span> flag: <span class="type">Bool</span>) &#123;</div><div class="line">      </div><div class="line">      <span class="keyword">super</span>.<span class="keyword">init</span>(contentRect: contentRect, styleMask: style, backing: backingStoreType, <span class="keyword">defer</span>: flag)</div><div class="line">      </div><div class="line">      <span class="keyword">self</span>.level = <span class="type">NSWindow</span>.<span class="type">Level</span>(rawValue: <span class="type">NSWindow</span>.<span class="type">Level</span>.<span class="type">RawValue</span>(<span class="type">CGWindowLevelForKey</span>(<span class="type">CGWindowLevelKey</span>.desktopWindow) - <span class="number">1</span>))</div><div class="line">      </div><div class="line">      <span class="keyword">self</span>.collectionBehavior = (<span class="type">NSWindow</span>.<span class="type">CollectionBehavior</span>(rawValue: <span class="type">NSWindow</span>.<span class="type">CollectionBehavior</span>.<span class="type">RawValue</span>(<span class="type">UInt8</span>(<span class="type">NSWindow</span>.<span class="type">CollectionBehavior</span>.canJoinAllSpaces.rawValue) |</div><div class="line">          <span class="type">UInt8</span>(<span class="type">NSWindow</span>.<span class="type">CollectionBehavior</span>.stationary.rawValue) |</div><div class="line">          <span class="type">UInt8</span>(<span class="type">NSWindow</span>.<span class="type">CollectionBehavior</span>.ignoresCycle.rawValue)))</div><div class="line">      )</div><div class="line">      </div><div class="line">      <span class="keyword">self</span>.backgroundColor = <span class="type">NSColor</span>.clear</div><div class="line">      <span class="keyword">self</span>.isOpaque = <span class="literal">false</span></div><div class="line">      </div><div class="line">      </div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="keyword">var</span> canBecomeMain: <span class="type">Bool</span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="keyword">var</span> canBecomeKey: <span class="type">Bool</span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>init方法中，指定了窗口的层级为desktopWindow-1，并且指定了窗口的背景色和一些操作的影响，主要是<strong>expose</strong>操作的时候，该窗口不应该和其他普通窗口一样，收缩起来。同时override相应方法，让该窗口不可以成为Main窗口和Key窗口。</p><h2 id="读取pdf"><a href="#读取pdf" class="headerlink" title="读取pdf"></a>读取pdf</h2><p>读取pdf是通过PDFView完成的，需要导入<strong>Quartz</strong>库。在StoryBoard中也有相关的组件，可以查到日历每页的宽高，在StoryBoard中指定为固定宽高即可。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@IBOutlet</span> <span class="keyword">var</span> calendarViewer: <span class="type">PDFView</span>!</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidLoad()</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> url = <span class="type">Bundle</span>.main.url(forResource: <span class="string">"calendar"</span>, withExtension: <span class="string">"pdf"</span>)</div><div class="line">    <span class="keyword">let</span> pdf = <span class="type">PDFDocument</span>(url: url!)</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> today = <span class="type">GetWeekByDate</span>(date: <span class="type">Date</span>())</div><div class="line">    </div><div class="line">    calendarViewer.document = pdf</div><div class="line">    calendarViewer.go(to: (pdf?.page(at: today-<span class="number">1</span>))!)</div><div class="line">    </div><div class="line">    <span class="comment">// Do any additional setup after loading the view.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里发现一个坑，PDFView是会响应鼠标事件的，上下滑会在页与页之间切换，由于PDFView是NSView的子类，因此可以override hitTest方法，让PDFView不响应相关事件，使用了extension关键字。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">PDFView</span></span>&#123;</div><div class="line">    <span class="keyword">open</span> <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">hitTest</span><span class="params">(<span class="number">_</span> point: NSPoint)</span></span> -&gt; <span class="type">NSView</span>? &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="得到今天是今年的第几周"><a href="#得到今天是今年的第几周" class="headerlink" title="得到今天是今年的第几周"></a>得到今天是今年的第几周</h2><p>我将原作者提供的pdf文件进行了截取，只保留了我们需要的53个周的数据。通过下面的方法获取到当天是2018年的第几周，然后让PDFView跳到相应的页面。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetWeekByDate</span><span class="params">(date:Date)</span></span> -&gt;<span class="type">Int</span>&#123;</div><div class="line">     <span class="keyword">guard</span> <span class="keyword">let</span> calendar = <span class="type">NSCalendar</span>(identifier: <span class="type">NSCalendar</span>.<span class="type">Identifier</span>.gregorian) <span class="keyword">else</span> &#123;</div><div class="line">         <span class="keyword">return</span> <span class="number">0</span></div><div class="line">     &#125;</div><div class="line">     <span class="keyword">let</span> components = calendar.components([.weekOfYear,.weekOfMonth,.weekday,.weekdayOrdinal], from: date)</div><div class="line">    </div><div class="line">     <span class="keyword">return</span> components.weekOfYear!;</div><div class="line"> &#125;</div></pre></td></tr></table></figure><h2 id="将窗口固定在右上角"><a href="#将窗口固定在右上角" class="headerlink" title="将窗口固定在右上角"></a>将窗口固定在右上角</h2><p>控制窗口这件事是由windowController完成的，获取到相应的window，并调用setFrameOrigin方法指定窗口的初始x,y坐标即可。需要注意的是屏幕的坐标左下角是（0，0）。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">windowDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.windowDidLoad()</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> window = window, <span class="keyword">let</span> screen = window.screen &#123;</div><div class="line">        <span class="keyword">let</span> screenRect = screen.visibleFrame</div><div class="line">        <span class="keyword">let</span> offsetFromLeft = <span class="type">CGFloat</span>(screenRect.maxX - window.frame.width)</div><div class="line">        <span class="keyword">let</span> offsetFromTop = <span class="type">CGFloat</span>(<span class="number">0</span>)</div><div class="line">        <span class="keyword">let</span> offsetFromBottom = screenRect.maxY - window.frame.height - offsetFromTop</div><div class="line">        window.setFrameOrigin(<span class="type">NSPoint</span>(x: offsetFromLeft, y: offsetFromBottom))</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="与Python版本相比的优点"><a href="#与Python版本相比的优点" class="headerlink" title="与Python版本相比的优点"></a>与Python版本相比的优点</h2><p>相比于python版，<strong>TuringCalendar</strong>也有自己的优势，那就是不需要手动的去生成壁纸，而且每周要定时更换；环境的配置可能有一些坑，很多人都在评论里说配置没有成功。</p><p>最后，欢迎有能力的开发者改进<a href="https://github.com/zhihaozhang/TuringCalendar" target="_blank" rel="external">这款应用</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#背景介绍&lt;br&gt;图灵教育推出的&lt;a href=&quot;http://www.ituring.com.cn/book/details/2625&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;限量款编程日历2018&lt;/strong&gt;&lt;/a&gt;，因为简
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="macOS开发" scheme="http://zhihaozhang.github.io/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
