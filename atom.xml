<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chih-Hao&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/ee6c42acd9e6fdf6da073aabf58a2ad9</icon>
  <subtitle>骨灰级果粉</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhihaozhang.github.io/"/>
  <updated>2017-10-11T13:12:12.755Z</updated>
  <id>http://zhihaozhang.github.io/</id>
  
  <author>
    <name>Chih-Hao</name>
    <email>zhihaozhang@me.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>为SVG中大小可变的&lt;g&gt;元素加上边框和背景色</title>
    <link href="http://zhihaozhang.github.io/2017/10/11/gInSVG/"/>
    <id>http://zhihaozhang.github.io/2017/10/11/gInSVG/</id>
    <published>2017-10-11T13:11:38.258Z</published>
    <updated>2017-10-11T13:12:12.755Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题的出现"><a href="#问题的出现" class="headerlink" title="问题的出现"></a>问题的出现</h1><p>我在使用d3js开发项目过程中，遇到了这样的需求，将鼠标hover到某些元素上时，将该元素的detail信息<strong>逐条展示</strong>出来，而且为了将detail框与其他元素区别开来，需要给detail展示区域添加边框或增加底色，想要的效果大概是下面的图那样的。</p><div align="center"><br><img src="https://ip.freep.cn/588778/screen.png" alt=""><br>预期效果图<br></div><h1 id="问题解决思路"><a href="#问题解决思路" class="headerlink" title="问题解决思路"></a>问题解决思路</h1><p>普通的HTML元素有很多方法来获得其宽高等其他位置属性的方法。如果是一组元素，可以用div标签将他们组合起来，指定div的border颜色和宽度，div的边框会根据元素的宽高动态改变大小。</p><p>SVG中，将元素成组的标签是g元素，之前使用它是将元素进行分组，然后统一进行平移和旋转之类的功能变换。毫无意外的，普通DOM元素获取宽高和位置属性的方法offsetWidth、ClientWidth全部失效，返回值均为<strong>undefined</strong>。我的初步想法是获得这些元素，然后绘制矩形，这样就有了类似div的边框效果。</p><p>在Stack Overflow中，找到了问题的答案，有两个原生的JS方法可以作为候选。</p><h2 id="getBBox"><a href="#getBBox" class="headerlink" title="getBBox"></a>getBBox</h2><p>document.getElementById(“g1”).getBBox()的返回结果如下：</p><div align="center"><br><img src="http://youdaocloud.oss-cn-shanghai.aliyuncs.com/SVG_g_width.4.PNG" alt=""><br>getBBox返回值<br></div><h2 id="getBoundingClientRect"><a href="#getBoundingClientRect" class="headerlink" title="getBoundingClientRect()"></a>getBoundingClientRect()</h2><p>而document.getElementById(“g1”).getBoundingClientRect()的返回结果如下：</p><div align="center"><br><img src="http://youdaocloud.oss-cn-shanghai.aliyuncs.com/SVG_g_width.5.PNG" alt=""><br>getBoundingClientRect返回值<br></div><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>发现两个方法的返回结果是不一样的，主要是因为getBBox()获得的是元素在当前SVG坐标中的数据，而getBoundingClientRect()则是浏览器的坐标。<br>显然，getBBox()方法更贴合我们的需求。</p><h1 id="添加背景色"><a href="#添加背景色" class="headerlink" title="添加背景色"></a>添加背景色</h1><p>getBBox方法可以让我们知道矩形该如何绘制，如果让矩形fill none的话，是可以看到底层的文字的，但设计师比较执拗，死磕我需要背景色。而正确获取矩形位置大小是需要先将detail信息绘制到svg画板上的，因此后面再绘制矩形的时候，矩形就盖住了底层的detail信息文字。</p><p>对于这个先有鸡还是先有蛋的问题，我采取了一个比较tricky的方法，即在绘制完矩形之后，再绘制一遍deatil信息，这样后绘制的detail信息就处在了矩形的上层，从而可以被用户看到，而底层的detail信息实际上是存在的，只不过是被矩形这遮挡住了。</p><p>给设计师看过效果之后，他露出了满意的微笑☺。</p><p>代码</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawDeatilBorder</span>(<span class="params">data</span>)</span>&#123;</div><div class="line"></div><div class="line">           vis.selectAll(<span class="string">'.detailBorder'</span>).remove();</div><div class="line"></div><div class="line">           <span class="keyword">var</span> position = <span class="built_in">document</span>.getElementById(<span class="string">"detailInfoBorder"</span>).getBBox();</div><div class="line"></div><div class="line">           vis.append(<span class="string">'rect'</span>).attr(<span class="string">'class'</span>,<span class="string">'detailBorder'</span>).style(<span class="string">'fill'</span>,<span class="string">'#f0f0f0'</span>).attr(<span class="string">'x'</span>,position.x<span class="number">-20</span>).attr(<span class="string">'y'</span>,position.y<span class="number">-20</span>).attr(<span class="string">'width'</span>,position.width+<span class="number">40</span>)</div><div class="line">               .attr(<span class="string">'height'</span>,position.height+<span class="number">40</span>).attr(<span class="string">'fill'</span>,<span class="string">'red'</span>).attr(<span class="string">'rx'</span>,<span class="string">'3px'</span>).attr(<span class="string">'ry'</span>,<span class="string">'3px'</span>).attr(<span class="string">'stroke'</span>,<span class="string">'none'</span>);</div><div class="line"></div><div class="line">           <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">           <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> data) &#123;</div><div class="line"></div><div class="line">               <span class="keyword">if</span> (<span class="keyword">typeof</span>(data[key]) !== <span class="string">"object"</span>) &#123;</div><div class="line">                   i++;</div><div class="line">                   vis.append(<span class="string">"text"</span>).attr(<span class="string">'class'</span>, <span class="string">'detailInfo'</span>).attr(<span class="string">"x"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                       <span class="keyword">return</span> <span class="number">850</span></div><div class="line">                   &#125;).attr(<span class="string">"y"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                       <span class="keyword">return</span> i * <span class="number">20</span> + <span class="number">30</span>;</div><div class="line">                   &#125;).attr(<span class="string">"dy"</span>, <span class="string">".35em"</span>).attr(<span class="string">"text-anchor"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                       <span class="keyword">return</span> <span class="string">"start"</span>;</div><div class="line">                   &#125;).text(<span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">                       <span class="keyword">return</span> key + <span class="string">" : "</span> + data[key];</div><div class="line">                   &#125;)</div><div class="line">                       .style(<span class="string">"fill-opacity"</span>, <span class="number">1</span>);</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">       &#125;</div></pre></td></tr></table></figure></code></pre><p><a href="https://github.com/zhihaozhang/Topology" target="_blank" rel="external">项目开源地址</a>,供参考。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题的出现&quot;&gt;&lt;a href=&quot;#问题的出现&quot; class=&quot;headerlink&quot; title=&quot;问题的出现&quot;&gt;&lt;/a&gt;问题的出现&lt;/h1&gt;&lt;p&gt;我在使用d3js开发项目过程中，遇到了这样的需求，将鼠标hover到某些元素上时，将该元素的detail信息&lt;str
      
    
    </summary>
    
      <category term="visualization" scheme="http://zhihaozhang.github.io/categories/visualization/"/>
    
    
      <category term="SVG" scheme="http://zhihaozhang.github.io/tags/SVG/"/>
    
  </entry>
  
  <entry>
    <title>mouseSync后续功能完善心得</title>
    <link href="http://zhihaozhang.github.io/2017/09/29/mouseSyncII/"/>
    <id>http://zhihaozhang.github.io/2017/09/29/mouseSyncII/</id>
    <published>2017-09-29T13:26:44.235Z</published>
    <updated>2017-09-30T02:39:00.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在<a href="http://zhihaozhang.github.io/2017/09/23/让iMac与MacBook高效协同工作——mouseSync开发心得/">上篇博客</a>中,我介绍了mouseSync这款软件的开发初衷、使用场景和开发的过程，感谢一些朋友试用该软件并给我留言，提出了一些新的需求和issue。同时也感谢开发者头条的推荐至头版的精选板块，让那篇开发笔记被2万开发者阅读过了，收获了<strong>github的star</strong>若干、<strong>公众号的关注</strong>若干、赞赏约<strong>50元</strong>。真的非常感谢大家的关注、star鼓励和金钱赞赏。</p><p>我整理了一下大家的需求，大体上可归纳为3类。</p><ol><li>没有logo</li><li>在外部设备(鼠标/Trackpad真正属于的那台Mac)上容易引起误操作</li><li>一个关键的功能，左键拖拽功能，没有实现</li></ol><p>在这篇博客中，我就来写一下对上面提到的三个需求的解决方案。完成上述三个需求后的软件在<a href="https://pan.baidu.com/s/1i5Gee6T" target="_blank" rel="external">网盘</a>可下载到，最新代码依然开源在<a href="https://github.com/zhihaozhang/mouseSync" target="_blank" rel="external">github</a>上。</p><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><h2 id="没有logo"><a href="#没有logo" class="headerlink" title="没有logo"></a>没有logo</h2><p>其实这件事挺尴尬的，我不是设计师，因此平时logo的主要来源是<a href="https://www.flaticon.com" target="_blank" rel="external">flaticon</a>，这次没忍心打扰正在熟睡的非著名设计师Joseph，因此还是在flaticon上找的icon，进行了简单的颜色变换与组合。</p><p>icon考虑到了mouseSync具有鼠标和蓝牙的特性，因此还是比较写实的。考虑到蓝牙客户端有外部设备和数据中心(两台Mac)之分，因此两个icon虽然很相似，但仍有细微的不同。不同点在于，数据中心的icon多了一个类似信号指示的标志，表示它是接收蓝牙信号的一端。</p><p>由于本人设计方面实在业余，还请大家轻喷。有空再找非著名设计师Joseph实现一枚漂亮的logo。</p><div align="center"><br><img src="https://syy.freep.cn/588778/icons.png" alt=""><br>&gt; icons<br></div><h2 id="在外部设备端容易引起误操作"><a href="#在外部设备端容易引起误操作" class="headerlink" title="在外部设备端容易引起误操作"></a>在外部设备端容易引起误操作</h2><p>之前的demo视频中，为了让两台电脑看起来一致，我录的是同时打开文件，同时在图标上右击，在现实生活中，在同一时刻同时操作两台Mac的需求很少不存在。通常情况下，用户还是想对某一台Mac进行操作的。<strong>mouseSync的定位应该是：帮助用户用一个鼠标操作两台电脑，且给用户决定什么时候操作哪台，省去两个鼠标之间换来换去的麻烦。</strong></p><p>之前的项目中，我对鼠标事件添加的均是全局监控事件，因此只要mouseSync<strong>生命周期</strong>没有结束，它的操作将实时被发送到另一台mac上。我想过两个解决方案：</p><ol><li>跟其他共享键盘的软件一样，使用全局快捷键对蓝牙通知服务进行开启/关闭</li><li>将全局监控事件变成局部监控事件，蓝牙通知服务仅在应用视图为Keywindow时有效</li></ol><h3 id="为什么选择Plan-B"><a href="#为什么选择Plan-B" class="headerlink" title="为什么选择Plan B"></a>为什么选择Plan B</h3><p>关于方案1，我觉得作为一款软件，快捷键应当由用户自己决定，虽然cocoapod上已经有非常好的项目<a href="https://github.com/Clipy/KeyHolder" target="_blank" rel="external">KeyHolder</a>进行支持,但是考虑到两个因素还是决定使用Plan B。</p><p>先看看Plan B，Plan B是这样的，首先让当前的window全屏，但是里面没有内容，因此无论在当前试图下如何操作，都不会有可能造成误操作。回到Plan A，快捷键的录入放到哪里呢？如果放到当前视图，将会带来一定的误操作风险；如果放到MenuBar，那么用户将不得不退出全屏模式，到菜单栏进行设置，这样的解决方案破坏了用户体验，综合考虑，最终还是选了Plan B。</p><h3 id="实现过程中遇到的问题"><a href="#实现过程中遇到的问题" class="headerlink" title="实现过程中遇到的问题"></a>实现过程中遇到的问题</h3><p>让当前窗口一打开就全屏的方法是在ViewDidLoad方法体中进行控制的:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">super</span>.viewDidLoad()</div><div class="line"><span class="keyword">self</span>.view.window?.zoom(<span class="keyword">self</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>但是我很快就发现了问题：<strong>尽管已经将应用全屏了，但是用户依然会有一定几率对dock栏和顶部菜单栏进行误操作。</strong>用户如果在操作另一台电脑的时候，还得注意这台电脑上是不是误操作了，这不符合我们软件开发的初衷。考虑到有些用户将dock放在底部，有些用户将dock放在左边，因此，我加了这样的限制，当用户将鼠标移动到距离屏幕边缘<strong>50px</strong>以内的时候，程序帮助他将鼠标移动至屏幕中央。参照下图，灰色地带就可以作为防止鼠标误操作的缓冲区。</p><div align="center"><br><img src="https://syy.freep.cn/588778/border.png" alt=""><br>&gt; 防止对dock和菜单栏误操作解决方法示意图<br></div><p>阅读过上一篇博客的朋友一定注意到了，我们的程序是记录上一个鼠标点的位置，并将上一个鼠标点的位置与当前位置相减，将位置变动作为特征值进行发送。因此，在鼠标被程序移动到屏幕中央的时候，需要将上一个位置更新为屏幕中央的坐标。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//屏幕宽高的获取方式</span></div><div class="line">    <span class="keyword">let</span> <span class="type">SCREEN_WIDTH</span> = <span class="type">NSScreen</span>.main()!.frame.width</div><div class="line">    <span class="keyword">let</span> <span class="type">SCREEN_HEIGHT</span> = <span class="type">NSScreen</span>.main()!.frame.height</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="左键拖拽功能"><a href="#左键拖拽功能" class="headerlink" title="左键拖拽功能"></a>左键拖拽功能</h2><p>左键拖一个文件或窗口到一个新位置这个功能还是经常被使用到的，我使用的是Trackpad，通常是使用<strong>三支拖移</strong>。想要监听外围设备的这个动作并不难，但是想让计算机模拟这个操作相对比较困难。就像双击不是单纯的模拟单击事件两次一样，这次我又踩到坑了，drag and move事件并不是简单的mousedown-&gt; mousemove -&gt; mouseup这么容易的事情。</p><p>我在<a href="https://stackoverflow.com/questions/1817628/clicking-the-mouse-down-to-drag-objects-on-mac" target="_blank" rel="external">Stack Overflow</a>上找到了正确的方法：有一个叫<strong>kCGEventLeftMouseDragged</strong>的事件，专门来处理这件事。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mouse_left_drag_to</span><span class="params">(<span class="keyword">float</span> x, <span class="keyword">float</span> y)</span> </span>&#123;</div><div class="line">    CGEventRef left_drag_event = CGEventCreateMouseEvent(<span class="literal">NULL</span>, kCGEventLeftMouseDragged, CGPointMake(x, y), <span class="number">0</span>);</div><div class="line"></div><div class="line">    CGEventPost(kCGHIDEventTap, left_drag_event);</div><div class="line">    CFRelease(left_drag_event);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>和Scroll滚轮事件一样，这里我们采用的是Quartz模拟鼠标事件,因此依然需要C与swift进行混编。模拟总共可分为3步：第一步是创建一个Quartz鼠标事件；第二步是将这个事件放到事件流中，并指定位置；第三步是release这个事件。</p><p>模拟这个事件的时候，随着鼠标拖拽后的不停移动，会不停产生event，而且event中x和y的偏移量始终是相对于第一次鼠标drag按下时的坐标。因此，我们需要记录两件事，第一件事是第一次drag时候的坐标，第二件事是当前是不是开启了新一轮的drag还是仍然在上一轮的drag中。核心代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> dragFirst == <span class="literal">true</span>&#123;</div><div class="line">dragFirst = <span class="literal">false</span></div><div class="line">    mouseLocBeforeDrag = <span class="type">NSEvent</span>.mouseLocation()                 mouseLocBeforeDrag.y = <span class="type">NSHeight</span>(<span class="type">NSScreen</span>.screens()![<span class="number">0</span>].frame) - mouseLocBeforeDrag.y;</div><div class="line">    </div><div class="line">    mouse_left_drag_to(<span class="type">Float</span>(mouseLocBeforeDrag.x)+<span class="type">Float</span>(dx!),<span class="type">Float</span>(mouseLocBeforeDrag.y)-<span class="type">Float</span>(dy!)</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    mouse_left_drag_to(<span class="type">Float</span>(mouseLocBeforeDrag.x)+<span class="type">Float</span>(dx!),<span class="type">Float</span>(mouseLocBeforeDrag.y)-<span class="type">Float</span>(dy!))</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面的代码有两处需要注意：</p><ol><li>dragFirst初始值为true,在mouseUp之后重新置为true，表示一轮的drag已经完成了；</li><li>y的坐标是-，x的坐标是+，这是由OS X的坐标系决定的。</li></ol><p>最后，我用两台电脑同时在画板上写了一个牛B。mouseSync的开发工作算是告一段落了，希望对大家有所帮助！</p><div align="center"><br><img src="https://syy.freep.cn/588778/dragdemo.gif" alt=""><br>&gt; drag事件demo<br></div><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://stackoverflow.com/questions/1817628/clicking-the-mouse-down-to-drag-objects-on-mac" target="_blank" rel="external">https://stackoverflow.com/questions/1817628/clicking-the-mouse-down-to-drag-objects-on-mac</a></li><li><a href="https://www.flaticon.com" target="_blank" rel="external">https://www.flaticon.com</a></li></ol><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>试用软件之后如果您对软件有任何的意见与建议，欢迎留言。如果您喜欢这款软件，也欢迎您将它推荐给您的朋友们。让我们一起将mouseSync变得更好！</p><p>我会在订阅号里不定期分享我个人的macOS/ios开发心得和开发笔记，也会在里面发表对于苹果产品/框架/趋势的拙见，希望爱好科技产品或者苹果生态圈的开发者关注。相信本公众号一定能给您带来收获和启发。</p><p>【欢迎扫码关注微信公众号】</p><div align="center"><br><img src="https://syy.freep.cn/588778/640.jpeg" alt=""><br>&gt; 扫码关注微信公众号 骨灰级果粉 获得最新文章更新<br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在&lt;a href=&quot;http://zhihaozhang.github.io/2017/09/23/让iMac与MacBook高效协同工作—
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="macOS开发" scheme="http://zhihaozhang.github.io/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>青芒 for Mac客户端开发笔记</title>
    <link href="http://zhihaozhang.github.io/2017/09/26/%E9%9D%92%E8%8A%92%20for%20Mac%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    <id>http://zhihaozhang.github.io/2017/09/26/青芒 for Mac客户端开发笔记/</id>
    <published>2017-09-26T02:59:15.000Z</published>
    <updated>2017-09-26T03:54:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于轻芒和青芒"><a href="#关于轻芒和青芒" class="headerlink" title="关于轻芒和青芒"></a>关于轻芒和青芒</h1><p>轻芒阅读是我每天都会打开的app，在它提供的两百多个channel中，我订阅了其中十几个channel，非常喜欢这个产品。这个产品的创始人是王俊煜，他曾经创办了一个更有名的公司——豌豆荚。关于轻芒和俊煜的更多介绍，请参照： <a href="http://tech2ipo.com/10034248" target="_blank" rel="external">前沿科技</a>的报道。虽然报道里强调了轻芒不是青芒，但是参照知了和知乎的关系，我还是决定把我的客户端取名为青芒。而且取名青芒的一大好处是logo好设计。做完原型的第二天，我就找了非著名设计师Joseph帮我设计了一枚logo，个人觉得还是很赞的。</p><p><img src="https://syy.freep.cn/588778/41854-ddfac87df1936535.jpeg" alt="非著名设计师Joseph设计的logo" title="非著名设计师Joseph设计的logo"></p><blockquote><p>非著名设计师Joseph设计的logo</p></blockquote><h1 id="为什么要做青芒"><a href="#为什么要做青芒" class="headerlink" title="为什么要做青芒"></a>为什么要做青芒</h1><p>8月18日，我在github闲逛的时候发现了轻芒团队仍处于内测阶段的<a href="https://github.com/qingmang-team/docs" target="_blank" rel="external">API文档</a>，抱着试一试的态度，我给轻芒团队发送了内测申请的邮件，两天后得到了对方产品经理振辉的回复，同意了我参加内测的申请，在这表示感谢。收到邮件之后我兴奋异常，虽然之前也做了像微博、twitter、Instagram的客户端，但是这些产品早已有比我做的更好的产品上架到Apple Store了，估计除了我以外，没有人会用我开发的简陋版客户端。而轻芒则不同，目前还真没有mac和windows的客户端。</p><p>轻芒的用户通常对精神生活有丰富的追求，在macOS和windows中，我估计macOS用户会非常多，因此我选择了macOS平台，我认为这对我是一个机会，可能会有不少人试用这款软件。毕竟看到别人电脑或手机上运行着你开发的软件，还是会给人带来很大的成就感的。(偷笑)</p><p>据不完全统计，自从开源以来，已经有100多人下载了该软件。</p><h1 id="青芒是怎么做的"><a href="#青芒是怎么做的" class="headerlink" title="青芒是怎么做的"></a>青芒是怎么做的</h1><p>知了是知乎日报的mac客户端，青芒跟知了有着相同的需求，即展示channel list、article list、article content三个部分，于是萌生了借鉴知了的念头，搜了一圈之后发现github上并没有类似的mac软件开源出来，于是做了决定：自己从头开始写，并且写完的第一件事就是将项目开源。我相信三段式布局的应用会适用很多场景，并且会给初学者们带来一定的启发。项目开源在<a href="https://github.com/zhihaozhang/qingmang-for-mac" target="_blank" rel="external">我的github</a>上，欢迎fork和star，特别感谢github开发者@jydemo、@immress对本项目提出的改进与code实现，效果图如下。</p><p><img src="https://syy.freep.cn/588778/1BFAC168-DB08-4B9B-9EC4-04E8CE009D08.png" alt="客户端视图（模仿的知了）" title="客户端视图（模仿的知了）"></p><blockquote><p>客户端视图（模仿的知了）</p></blockquote><p><img src="https://syy.freep.cn/588778/41854-4a66018d8973436d.jpeg" alt="Notification Center视图（略丑）" title="Notification Center视图（略丑）"></p><blockquote><p>Notification Center视图（略丑）</p></blockquote><p><img src="https://syy.freep.cn/588778/41854-dfd0c7c1f1826698.jpeg" alt="TouchBar视图" title="TouchBar视图"></p><blockquote><p>TouchBar视图</p></blockquote><p>轻芒的API遵循RPC风格，形如 域名/主体.操作，主体和操作都使用小写开头的驼峰命名法，总体上还是比较容易调用的。青芒目前用到了其中的category.list、category.get、article.list、article.get。经测试，发现内测版里提供的channel还非常有限，只有11个，所以目前选择将所有channel展示出来。</p><p>开发青芒过程中，使用到了如下技术：<strong>HTTP请求、json解析、NSSplitView、WebKit、NSTableView、多线程(GCD)、imageView、自定义NSTextField、NSScrollView、自定义Window、NSTouchBar、NCWidgetProviding</strong>等技术,下面我来详细介绍一下青芒实现的过程。</p><h1 id="界面部分"><a href="#界面部分" class="headerlink" title="界面部分"></a>界面部分</h1><p>macOS/ios界面的构建一直是值得争论的话题，大体上有三种可选方式：</p><ol><li>纯代码手写</li><li>Xib文件</li><li>Stroyboard</li></ol><h2 id="纯手写代码"><a href="#纯手写代码" class="headerlink" title="纯手写代码"></a>纯手写代码</h2><p>纯手写代码是极客的不二选择，对于多人协作工作是很好的选择，但是缺点主要是不能直观的看到效果、编码速度很慢，例如初始化一个自定义的Button可能就需要二十行代码，非常不利于阅读。</p><h2 id="Xib文件"><a href="#Xib文件" class="headerlink" title="Xib文件"></a>Xib文件</h2><p>Xib解决了上面的两个问题，提升了开发效率。其实Xib就是XML格式的文件，在编译过程中，被编译成Nib文件，每个Nib文件跟对应的ViewController关联。Xib的缺点是：代码可能回覆盖UI的设计，而且每个视图都需要单个的Xib，视图间的跳转依然需要代码控制。</p><h2 id="Stroyboard"><a href="#Stroyboard" class="headerlink" title="Stroyboard"></a>Stroyboard</h2><p>为了解决了Xib的问题，Apple提供了故事板功能。StoryBoard可以看成将很多Xib集中到了一起，像讲述一个故事一样，清晰的看到每个ViewController之间的跳转关系，跳转可以不用写代码了。因此我选用了StoryBoard来构建青芒。</p><p><img src="https://syy.freep.cn/588778/41854-29c7c999adbbd83f.jpeg" alt="青芒的StoryBoard文件截图" title="青芒的StoryBoard文件截图"></p><blockquote><p>青芒的StoryBoard文件截图</p></blockquote><p>从StroyBoard截图可以清晰的看到整个界面的布局，整个界面的布局是模仿的知乎日报Mac客户端（知了）做的，经典的三段式布局，NSSplitView可以将界面分成左右(或上下)的两部分。考虑到主题一列比较窄，而且主题和相应主题下的文章有强关联关系，因此借用SplitView将Overview Controller一分为二，这样三段式布局就算是完成了。</p><p>先从左边的OverView视图说起，这个视图里由两部分组成，第一个部分是一系列的主题按钮，点击之后，在右边的NSTableview里展示对应主题下的最新文章list。最新文章list点击之后，在右边的DetailView中用一个WebView展现文章的详情。</p><p>黑色的部分是TouchBar的视图，TouchBar是苹果在MacBook Pro 2016机型上加入的一个新的交互设备，围绕他的讨论有很多，我们有空可以单独聊一下，但是为了尊重这条价值4K的bar，我还是决定做了相应的适配，将主题通过按钮的形式放到了Bar上，Bar上的按钮和OverView的按钮是需要做联动功能的，在下文中会提到。</p><p>耐心地拖入相关控件、控制控件之间的相对位置，最初始的原型就算是完成了。当然，经过试用，还是可以发现优化的部分，比如Overview里的tableview并不是顶到window title的，这样用户拖拽那部分的时候，窗口依然可以移动，同样，WebView上方也是需要留白的。虽然只是个很小的细节，但真的很讨好用户。</p><h1 id="自定义取代系统默认"><a href="#自定义取代系统默认" class="headerlink" title="自定义取代系统默认"></a>自定义取代系统默认</h1><p>界面完成后，就需要做功能了，但是等等，好像看起来不大对劲，为什么效果相比于知了差很多呢？下面的截图展现了青芒的第二版，相比于第一版，已经是把window的标题去掉了，但还是给人一种寨寨的、不够简洁的感觉。TableView中选中的颜色跟整体界面很不符。</p><p><img src="https://syy.freep.cn/588778/41854-9395234244a1c39e.jpeg" alt="第二版的青芒原型" title="第二版的青芒原型"></p><blockquote><p>第二版的青芒原型</p></blockquote><p>为什么会出现这样的情况呢？因为一直到现在，我们都是采用的系统默认选项，没有设计人员的审美在里面。如何给用户带来私人订制的感觉呢？这就需要我们覆盖系统的默认行为和属性，具体来说，就是自定义子类，继承并覆盖父类中不符合开发者预期的部分。</p><p>从最后的结果来看，我们需要整个软件看起来背景是白色的，因此我们在每一个view加载的函数中，指定背景色为白色，使用<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">view.wantsLayer =<span class="literal">true</span></div><div class="line"><span class="keyword">self</span>.view.layer?.backgroundColor=<span class="type">NSColor</span>.white.cgColor</div></pre></td></tr></table></figure></p><p>虽然所有视图背景色全部设为了白色，但是关闭、最大化、最小化按钮依然title上，而不是overview那部分，设置title为影藏，它们又不见了，让他们正确显示在overview中的做法是在window加载函数中加入：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.window?.titleVisibility = .hidden</div><div class="line"><span class="keyword">self</span>.window?.titlebarAppearsTransparent =<span class="literal">true</span></div><div class="line"><span class="keyword">self</span>.window?.styleMask.insert(.fullSizeContentView)</div></pre></td></tr></table></figure></p><p>关于TableView中选中状态的背景色，可行的方法有两种。第一种是自定义Cell覆盖NSTableCellView，覆盖父类中的override var backgroundStyle:NSBackgroundStyle{}属性。第二种方法是github上的用户@jydemofork我的项目之后给我提的issue，自定义NSTableRowView，覆盖父类方法：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">drawSelection</span><span class="params">(<span class="keyword">in</span> dirtyRect:NSRect)</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.drawSelection(<span class="keyword">in</span>: dirtyRect)</div><div class="line">    <span class="keyword">var</span> slectorRect =<span class="type">NSInsetRect</span>(<span class="keyword">self</span>.bounds,<span class="number">0</span>,<span class="number">0</span>)</div><div class="line">    <span class="type">NSColor</span>(calibratedWhite:<span class="number">0.92</span>, alpha:<span class="number">1.0</span>).setStroke()</div><div class="line">    <span class="type">NSColor</span>(calibratedWhite:<span class="number">0.92</span>, alpha:<span class="number">1.0</span>).setFill()</div><div class="line">    <span class="keyword">var</span> slectorPath =<span class="type">NSBezierPath</span>(roundedRect: slectorRect, xRadius:<span class="number">0</span>, yRadius:<span class="number">0</span>)</div><div class="line">    slectorPath.fill()</div><div class="line">    slectorPath.stroke()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后实现tableview的代理方法，</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(_tableView:NSTableView, rowViewForRow row:Int)</span></span> -&gt;<span class="type">NSTableRowView</span>? &#123;</div><div class="line">    <span class="keyword">let</span> rowview = <span class="type">MyTableRowView</span>(frame: .zero)</div><div class="line">    <span class="keyword">return</span> rowview</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>两个主视图之间的分隔条比较粗，总让人觉得不美，解决方法还是自定义。覆盖NSSplitView，覆盖属性<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> vardividerThickness:<span class="type">CGFloat</span>&#123;</div><div class="line">    <span class="keyword">get</span> &#123;return0.<span class="number">5</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>如果用户愿意分隔条还是可以左右动的，想禁掉左右动的功能，实现NSSplitView的一个代理方法：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">splitView</span><span class="params">(_ofDividerAtsplitView:NSSplitView, effectiveRect proposedEffectiveRect:NSRect, forDrawnRect drawnRect:NSRect, ofDividerAt dividerIndex:Int)</span></span> -&gt;<span class="type">NSRect</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">NSRect</span>.zero</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>经过这一章节，不难发现还是代码靠谱(😎)。经过上面的调整，界面看起来简洁、清爽了不少，可以以假乱真了。</p><p>希望这一章节让大家明白，想要做出看起来美的东西，一定要去大胆地替代系统的默认选项。而具体的做法通常是覆盖父类中的属性和方法，记得要将组件和自定义的类关联起来。</p><p><img src="https://syy.freep.cn/588778/41854-3976993182ab74f9.jpeg" alt="美化后的界面" title="美化后的界面"></p><blockquote><p>美化后的界面</p></blockquote><h1 id="一个坑"><a href="#一个坑" class="headerlink" title="一个坑"></a>一个坑</h1><p>自定义TableView的Cell过程中，由于文章的标题通常是比较长的，因此用NSTextField无法放下，必须使用NSTextView，而NSTextView默认是可以上下左右滑动的，所以在文章列表中上下滑动的时候，每当滑动到TextView里，滑动事件就会白TextView捕获，TableView中的Scroll view没有机会捕获了。</p><p>解决的方法和上一节一样，通过覆盖cell里(请注意是Cell，不是tableview)的scroll view，重写hitTest方法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">hitTest</span><span class="params">(_point:NSPoint)</span></span> -&gt;<span class="type">NSView</span>? &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>告诉cell，这个滑动事件我不处理了，请交给别人处理吧。</p><h1 id="NSTouchBar"><a href="#NSTouchBar" class="headerlink" title="NSTouchBar"></a>NSTouchBar</h1><p>为了赶时髦，应用内做了TouchBar和通知中心的内容。TouchBar需要注意的是NSWindow和NSViewController之间的联动。从NSWindow到NSViewController:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> myViewcontroller =<span class="keyword">self</span>.window?.contentViewControlleras!mainViewController</div></pre></td></tr></table></figure></p><p>相反的过程:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> mywindowController=<span class="type">NSApplication</span>.shared().windows[<span class="number">0</span>].windowControlleras?windowController</div></pre></td></tr></table></figure></p><p>这样就可以做到在TouchBar中按了某个按钮，在主界面里也可以看到按钮被选中的效果，满足了一致性。</p><h1 id="Notification-Center视图"><a href="#Notification-Center视图" class="headerlink" title="Notification Center视图"></a>Notification Center视图</h1><p>通知中心做的蛮丑的，真的是为了尝试一下TodayExtension的功能而已。模仿知了，目前功能只是展示了首页的文章列表，点击文章可以用系统默认浏览器打开原文。其实这也就够了，毕竟通知中心就是为了看个大概用的，谁也不会经常点开看。通知中心需要注意的是要自定义视图的高度，通过<br>self.preferredContentSize=CGSize(width:self.view.frame.size.width, height:xxx)<br>完成。<br>最后要注意的是用URLSession请求数据，可以防止UI卡顿，UI卡顿给用户带来的感觉非常糟糕。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">getData</span><span class="params">(with urlString:String,success:@escaping<span class="params">(Data?)</span></span></span>-&gt;<span class="type">Void</span>, failure: ((<span class="type">Error</span>)-&gt;<span class="type">Void</span>)? =<span class="literal">nil</span>) &#123;</div><div class="line"></div><div class="line">         <span class="keyword">guard</span> <span class="keyword">let</span> url =<span class="type">URL</span>(string: urlString)<span class="keyword">else</span>&#123;</div><div class="line"></div><div class="line">         <span class="keyword">return</span></div><div class="line"></div><div class="line">&#125;</div><div class="line">    <span class="keyword">let</span> task =<span class="type">URLSession</span>.shared.dataTask(with: url) &#123; (data:<span class="type">Data</span>?, response:<span class="type">URLResponse</span>?, error:<span class="type">Error</span>?)<span class="keyword">in</span></div><div class="line">    <span class="type">DispatchQueue</span>.main.async&#123;</div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> error = error &#123;</div><div class="line">                     failure?(error)</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">                      success(data)</div><div class="line">                 &#125;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">     task.resume()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="文章具体内容视图"><a href="#文章具体内容视图" class="headerlink" title="文章具体内容视图"></a>文章具体内容视图</h1><p>青芒团队提供的API里有web-content这一项，只要通过webview包装然后load一下就会将文字和图片展示出来，但是还是有一些细节需要考虑到的。比如有些图片是很大的，虽然限制了窗口不得小于一个值，但有些图片还是远超了这个大小。web-content是没有标题的，看起来会比较突兀，标题和标题需要你手动加上。图片过大时，窗口是可以左右滑动的，怎么把他限制不能滑动。字体如何跟其他部分视图的字体做到没有违和感，都是需要考虑的问题，这些用前端里的CSS样式可以控制，需要开发者有一定的前端开经验。由于本公众号重心在果教，因此这里就不具体展开叙述了，感兴趣的朋友可以参考<a href="https://github.com/zhihaozhang/qingmang-for-mac" target="_blank" rel="external">我的github</a>。</p><h1 id="青芒的宣传"><a href="#青芒的宣传" class="headerlink" title="青芒的宣传"></a>青芒的宣传</h1><p>做完青芒之后，考虑到整个项目是用最新的swift4写成，于是我在微博上@了swiftLanguage，博主是一个不大不小的V，关注者多是对swift感兴趣的或从业人员。短短两天，该微博获得了1万多次阅读，最后我欣喜的发现，王俊煜也给该微博点了赞，感谢俊昱的鼓励与肯定。</p><p><img src="https://syy.freep.cn/588778/41854-9f58bf0f94c7afad.jpeg" alt="微博截图" title="微博截图"></p><blockquote><p>微博截图</p></blockquote><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>青芒的开发只用了两天，其实可以做的东西还有很多。试用软件之后如果您对软件有任何的意见与建议，欢迎留言。</p><p>如果您喜欢这款软件，也欢迎您将它推荐给您的朋友们。让我们一起将青芒变得更好！</p><p>我会在订阅号里不定期分享我个人的macOS/ios开发心得和开发笔记，也会在里面发表对于苹果产品/框架/趋势的拙见，希望爱好科技产品或者苹果生态圈的开发者关注。相信本公众号一定能给您带来收获和启发。<br>【欢迎扫码关注微信公众号】</p><p><img src="https://syy.freep.cn/588778/640.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关于轻芒和青芒&quot;&gt;&lt;a href=&quot;#关于轻芒和青芒&quot; class=&quot;headerlink&quot; title=&quot;关于轻芒和青芒&quot;&gt;&lt;/a&gt;关于轻芒和青芒&lt;/h1&gt;&lt;p&gt;轻芒阅读是我每天都会打开的app，在它提供的两百多个channel中，我订阅了其中十几个channe
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="macOS开发" scheme="http://zhihaozhang.github.io/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>让iMac与MacBook高效协同工作——mouseSync开发心得</title>
    <link href="http://zhihaozhang.github.io/2017/09/23/%E8%AE%A9iMac%E4%B8%8EMacBook%E9%AB%98%E6%95%88%E5%8D%8F%E5%90%8C%E5%B7%A5%E4%BD%9C%E2%80%94%E2%80%94mouseSync%E5%BC%80%E5%8F%91%E5%BF%83%E5%BE%97/"/>
    <id>http://zhihaozhang.github.io/2017/09/23/让iMac与MacBook高效协同工作——mouseSync开发心得/</id>
    <published>2017-09-23T11:49:34.000Z</published>
    <updated>2017-09-27T07:03:56.040Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开发mouseSync的初衷"><a href="#开发mouseSync的初衷" class="headerlink" title="开发mouseSync的初衷"></a>开发mouseSync的初衷</h1><p>或许是不想让买显示器送主机的笑话成真，Apple将iMac 2015之后的版本关闭了纯显示器模式。Apple store里LG的显示器挺贵的，27寸5K版本售价超过了1万元，衬托出了iMac 27寸13000+的定价之良心。考虑到两者颜值的差别，在看脸的时代，iMac的销量还是很不错的。iMac的用户很可能也是MacBook的用户，因此让iMac和MacBook协同工作是很有意义的一件事。当然，也同样适用于两台MacBook之间的协同工作。</p><p><img src="https://syy.freep.cn/588778/1.jpeg" alt="" title="老版本iMac的Target Display 模式"></p><p> 为了让两台Mac协同工作，我发现最痛苦的事情莫过于需要两套触摸板(鼠标)和键盘。在谷歌里搜了半天，发现了很多通过蓝牙将一台mac的键盘作为另一台mac键盘的软件，但是将一台mac的鼠标作为另一台mac的鼠标的软件却很少。比较知名的软件是Synergy，但是它的普通版售价19刀、pro版售价29刀，作为一个工程师的我不愿意掏这钱，于是mouseSync出现了。和以前一样，它是开源的，托管在github上，地址是：<a href="https://github.com/zhihaozhang/mouseSync" target="_blank" rel="external">https://github.com/zhihaozhang/mouseSync</a></p><h1 id="mouseSync开发步骤"><a href="#mouseSync开发步骤" class="headerlink" title="mouseSync开发步骤"></a>mouseSync开发步骤</h1><p>开发任何东西，我首先问自己的事情便是:大象放进冰箱一共分几步？要想让一台mac的鼠标事件同步给另一台mac，首先需要将两台电脑连接起来，建立一条稳定的专用通道。然后每当宿主机发生相应时间的时候，发通知给另一台Mac，让它的鼠标也跟着移动。</p><h2 id="为什么选用蓝牙"><a href="#为什么选用蓝牙" class="headerlink" title="为什么选用蓝牙"></a>为什么选用蓝牙</h2><p>考虑到协同工作肯定两台电脑靠的很近，在蓝牙的接收范围内。再考虑到蓝牙4.0标准的耗电量很低，而且即使在没有wifi的情况下依然可以工作，因此我选用了蓝牙技术来建立专用通道。蓝牙框架中值得注意的概念大约有5个。我想举一个我生活中的例子来介绍下面的概念:我每天会用一个体重计量一下体重，然后体重计会通过蓝牙传到我的手机App里，这样我就可以知道我每天的体重以及近期体重的趋势。</p><ol><li>Central(数据中心) 用来展示信息的设备，对应上面例子中的手机。</li><li>Peripheral(外围设置) 原始数据采集，对应上面例子中的体重计。</li><li>Service(服务) 指外围设置提供的各种能力，对应上面例子中体重计称重的能力。</li><li>Characteristic(特征值) 服务中的数据成为特征值，对应上面例子中的体重数据、体质数据等其他数据。</li><li>UUID 服务或特征值的唯一标志。每个服务或特征值均有一个唯一标识。比如我的体重计不仅能称重，还能测体脂、水分等特征值，手机App端能区分体重数据和水分数据，就靠UUID。当然，UUID的值需要数据中心和外围设置通讯前就约定好。</li></ol><p><img src="https://syy.freep.cn/588778/2.jpeg" alt="" title="蓝牙通讯的流程"></p><p>蓝牙通讯的流程图清楚的解释了蓝牙通讯的整个过程，这个过程类似TCP/IP的三次握手，不过没有那么严格。简单的来说，这个过程就是外设将自己的特征值通过服务的形式打包发布，通过建立起来的蓝牙通道广播给数据中心。首先，数据中心扫描蓝牙信号，发现外设后，与外设建立起链接，请求服务携带的数据，一次最基本的读取数据交换就算是完成了。当然，数据中心也可以发指令给外设。对于经常变化的特征值，数据中心可以订阅它，每当它发生变化时，可以实时通知数据中心，以便数据中心做出相应变化。具体到Cocoa框架，蓝牙的相关类见下图。</p><p><img src="https://syy.freep.cn/588778/3.jpeg" alt="" title=" 蓝牙的相关类"></p><h3 id="Peripheral相关类"><a href="#Peripheral相关类" class="headerlink" title="Peripheral相关类"></a>Peripheral相关类</h3><p>CBPeripheralManager是管理外设的，提供了发布服务，广播方法，CBPeripheralManagerDelegate是它的代理方法，考虑到了外设和数据中心之间数据交换是异步的，它定义了一组协议方法，根据不同的状态出发回调代理方法完成双方数据交换。</p><p>CBPeripheral类是建立蓝牙连接后，给CBCentral调用peripheral外设提供的对象。CBPeripheralDelegate是它的代理协议，提供辅助CBPeripheral完成服务发现、数据获取、订阅数据后的回调方法。</p><h3 id="Central相关类"><a href="#Central相关类" class="headerlink" title="Central相关类"></a>Central相关类</h3><p>CBCentral是数据中心类，完成蓝牙设备发现，建立连接，请求服务数据功能。CBCentralDelegate是它的代理协议，辅助它central提供Peripheral发现，建立连接后的回调。</p><h3 id="service相关类"><a href="#service相关类" class="headerlink" title="service相关类"></a>service相关类</h3><p>CBMutableService是可变类型的服务对象类，UUID和特征值可以修改。与它对应的是CBService，属性不可修改的服务对象类。</p><h3 id="characteristic相关类"><a href="#characteristic相关类" class="headerlink" title="characteristic相关类"></a>characteristic相关类</h3><p>CBMutableCharacteristic是可变类型的特征值对象类，UUID、properties属性可以修改。与它对应的是CBCharacteristic类，上述属性不能修改。</p><p><img src="https://syy.freep.cn/588778/4.jpeg" alt="" title="外设、服务、特征间的关系"></p><p>回到mouseSync,两台Mac中，负责采集触摸板事件的那台Mac是外围设置，另一台Mac是数据中心。建立起蓝牙物理通道之后，接下来要做的事是监听外围设置的触摸板事件，然后通知数据中心的触摸板跟着该事件进行响应。</p><h1 id="在外围设备端监听鼠标事件"><a href="#在外围设备端监听鼠标事件" class="headerlink" title="在外围设备端监听鼠标事件"></a>在外围设备端监听鼠标事件</h1><p>鼠标事件的监听分为全局监听和应用内监听，显然全局监听更符合我们的要求。对键盘鼠标事件的监听，主要调用的是NSEvnet里的addGlobalMonitorForEvents方法。鼠标事件有很多种，这里我选取了比较重要的几种，分别是移动(.mouseMoved)、单击(.leftMouseDown/up)、双击(特殊处理)、右击(.rightMouseDonw/up)、触摸板的上下左右滑动(.scrollWheel)和鼠标的上下滑动。</p><h2 id="移动事件"><a href="#移动事件" class="headerlink" title="移动事件"></a>移动事件</h2><p>移动比较好处理，这里我关心的是当前位置相比于上一个位置x和y方向的坐标变动情况，因此需要一个变量记录上一个位置，然后将x和y方向的变动通过蓝牙发送给数据中心，让数据中心的鼠标也进行相应的变动。值得注意的是，Mac的坐标(0,0)点在左下方，因此移动鼠标的时候需要进行相应的转换。</p><h2 id="单击事件"><a href="#单击事件" class="headerlink" title="单击事件"></a>单击事件</h2><p>单击事件分成两个步骤，第一个步骤是左键按下，第二个步骤是左键弹起来。只有两个事件都发生，我们才认为整个单击的过程完成了。单击事件并不需要传外围设置的坐标给数据中心，直接人数据中心在当前的鼠标位置执行单击事件即可。</p><h2 id="双击事件"><a href="#双击事件" class="headerlink" title="双击事件"></a>双击事件</h2><p>双击事件和单击事件很像，监听事件传入的event对象有一个clickCount属性，如果该属性的值大于等于2，那么就认为它是双击事件。后面的步骤跟单击事件一样。</p><h2 id="右击事件"><a href="#右击事件" class="headerlink" title="右击事件"></a>右击事件</h2><p>右击事件跟单击事件就更像了，只是将名称由left改成了right。</p><h2 id="滑动事件"><a href="#滑动事件" class="headerlink" title="滑动事件"></a>滑动事件</h2><p>滑动事件在x和y方向的变化值分别对应的是event对象里的deltaX和deltaY，将这两个值传给数据中心，并有数据中心跟着这两个值进行相应的滑动即可。通常情况下，用户只会在一个方向上进行滑动(鼠标只能上下滑动)，因此我将鼠标左右和上下的滑动分成了两个部分进行处理，传递的时候判断外围设置在哪个方向上更显著，让数据中心进行相应的滑动。</p><h1 id="在数据中心端模拟鼠标事件"><a href="#在数据中心端模拟鼠标事件" class="headerlink" title="在数据中心端模拟鼠标事件"></a>在数据中心端模拟鼠标事件</h1><h2 id="单击、右击事件的模拟"><a href="#单击、右击事件的模拟" class="headerlink" title="单击、右击事件的模拟"></a>单击、右击事件的模拟</h2><p>前面提到过了，单击和右击事件非常像，因此举同一个例子就可以说明问题。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">mouseMoveAndClick</span><span class="params">(onPoint point: CGPoint)</span></span> &#123;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> moveEvent = <span class="type">CGEvent</span>(mouseEventSource: <span class="literal">nil</span>, mouseType: .mouseMoved, mouseCursorPosition: point, mouseButton: .<span class="keyword">left</span>) <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> downEvent = <span class="type">CGEvent</span>(mouseEventSource: <span class="literal">nil</span>, mouseType: .leftMouseDown, mouseCursorPosition: point, mouseButton: .<span class="keyword">left</span>) <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> upEvent = <span class="type">CGEvent</span>(mouseEventSource: <span class="literal">nil</span>, mouseType: .leftMouseUp, mouseCursorPosition: point, mouseButton: .<span class="keyword">left</span>) <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        moveEvent.post(tap: <span class="type">CGEventTapLocation</span>.cghidEventTap)</div><div class="line">        downEvent.post(tap: <span class="type">CGEventTapLocation</span>.cghidEventTap)</div><div class="line">        upEvent.post(tap: <span class="type">CGEventTapLocation</span>.cghidEventTap)</div><div class="line">    &#125;~~</div></pre></td></tr></table></figure><p>思路是通过CGEvent创建一个事件，然后调用该事件的post方法告诉系统，执行该事件。</p><h2 id="鼠标移动事件的模拟"><a href="#鼠标移动事件的模拟" class="headerlink" title="鼠标移动事件的模拟"></a>鼠标移动事件的模拟</h2><p>移动事件的模拟跟上面思路一样，要注意的是OS X屏幕的坐标系统，x和y方向的变化是加还是减。</p><h2 id="双击事件的模拟"><a href="#双击事件的模拟" class="headerlink" title="双击事件的模拟"></a>双击事件的模拟</h2><p>开始以为双击事件的模拟无非就是模拟两次单击事件，让他们之间的时间间隔非常小。但经过尝试，该方式行不通。在网上搜了一些solution，最后居然是在我最喜欢的炉石传说的一个插件里发现的答案。 代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">`  <span class="function"><span class="keyword">func</span> <span class="title">doubleClick</span><span class="params">(at location: NSPoint)</span></span> &#123;</div><div class="line"> <span class="keyword">let</span> source = <span class="type">CGEventSource</span>(stateID: .privateState)</div><div class="line"> </div><div class="line"> <span class="keyword">var</span> click = <span class="type">CGEvent</span>(mouseEventSource: source, mouseType: .leftMouseDown,</div><div class="line"> mouseCursorPosition: location, mouseButton: .<span class="keyword">left</span>)</div><div class="line"> click?.setIntegerValueField(.mouseEventClickState, value: <span class="number">1</span>)</div><div class="line"> click?.post(tap: .cghidEventTap)</div><div class="line"> </div><div class="line"> <span class="keyword">var</span> release = <span class="type">CGEvent</span>(mouseEventSource: source, mouseType: .leftMouseUp,</div><div class="line">   mouseCursorPosition: location, mouseButton: .<span class="keyword">left</span>)</div><div class="line"> release?.setIntegerValueField(.mouseEventClickState, value: <span class="number">1</span>)</div><div class="line"> release?.post(tap: .cghidEventTap)</div><div class="line"> </div><div class="line"> click = <span class="type">CGEvent</span>(mouseEventSource: source, mouseType: .leftMouseDown,</div><div class="line"> mouseCursorPosition: location, mouseButton: .<span class="keyword">left</span>)</div><div class="line"> click?.setIntegerValueField(.mouseEventClickState, value: <span class="number">2</span>)</div><div class="line"> click?.post(tap: .cghidEventTap)</div><div class="line"> </div><div class="line"> release = <span class="type">CGEvent</span>(mouseEventSource: source, mouseType: .leftMouseUp,</div><div class="line">   mouseCursorPosition: location, mouseButton: .<span class="keyword">left</span>)</div><div class="line"> release?.setIntegerValueField(.mouseEventClickState, value: <span class="number">2</span>)</div><div class="line"> release?.post(tap: .cghidEventTap)</div><div class="line"> &#125;</div></pre></td></tr></table></figure><h2 id="滑动事件的模拟"><a href="#滑动事件的模拟" class="headerlink" title="滑动事件的模拟"></a>滑动事件的模拟</h2><p>滑动事件的模拟，swift目前支持的不是很好，我在Stack Overflow上找到了一个比较tricky的方法。需要swift和C混编，借助C来完成任务。关于swift和C/OC的混编内容比较多，这里不展开讲了，感兴趣的可以研究我的开源代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">` <span class="function"><span class="keyword">void</span> <span class="title">createScrollWheelEventY</span><span class="params">(<span class="keyword">float</span> x)</span> </span>&#123;</div><div class="line"> CGEventRef upEvent = CGEventCreateScrollWheelEvent(</div><div class="line"> <span class="literal">NULL</span>,</div><div class="line"> kCGScrollEventUnitPixel, <span class="number">2</span>, x*<span class="number">5</span>, <span class="number">0</span> );</div><div class="line">CGEventPost(kCGHIDEventTap, upEvent);</div><div class="line"> CFRelease(upEvent);</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">createScrollWheelEventX</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line"> CGEventRef upEvent = CGEventCreateScrollWheelEvent(</div><div class="line"> <span class="literal">NULL</span>,</div><div class="line"> kCGScrollEventUnitPixel, <span class="number">2</span>, <span class="number">0</span>, y*<span class="number">5</span>);</div><div class="line"> CGEventPost(kCGHIDEventTap, upEvent);</div><div class="line"> CFRelease(upEvent);</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p>在这里遇到了一个诡异的问题，上下滑动可以很好的工作，但是左右滑动死活不能和预期的一样，单步跟踪后发现传入函数的确实是float类型的正确值，但是创建upEvent的时候，该变量的值突变了。后面将float类型改成了int类型，又可以正常的工作了。如果知道为什么的同学可以留言告诉我。</p><h1 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h1><p><img src="https://syy.freep.cn/588778/demo922.gif" alt=""><br><img src="https://syy.freep.cn/588778/demo1.gif" alt=""><br><img src="https://syy.freep.cn/588778/demo2.gif" alt=""></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>开发mouseSync的过程中，让我更深刻的理解了Cocoa的蓝牙框架、键盘鼠标事件。纸上得来终觉浅，绝知此事要躬行。</p><p>另外，mouseSync的开发还没有完成，目前存在的问题是外围设备这边的鼠标容易误操作，因此我准备将外围设备的鼠标控制在一个window内，一旦移除这个window，就强行将光标移动回window中心。通过快捷键控制软件的开启和关闭。还有一个比较重要的功能正在开发中，那就是我非常喜爱的三指拖移功能，敬请期待！</p><p><em>你对mouseSync的功能还有哪些期待或建议呢？不妨留言告诉我吧！</em></p><p>开发和写本文过程中参考了以下资料，在这表示感谢：<br>【1】 macOS应用开发，赵剑 张帆 合著<br>【2】HSTracker的github开源代码 <a href="https://github.com/HearthSim/HSTracker/blob/master/HSTracker/Utility/Automation.swift" target="_blank" rel="external">https://github.com/HearthSim/HSTracker/blob/master/HSTracker/Utility/Automation.swift</a><br>【3】Stack Overflow: <a href="https://stackoverflow.com/questions/42813264/cocoa-application-scroll-programmatically" target="_blank" rel="external">https://stackoverflow.com/questions/42813264/cocoa-application-scroll-programmatically</a><br>【4】 ios蓝牙技术：<a href="http://www.jianshu.com/p/c1154179da8a" target="_blank" rel="external">http://www.jianshu.com/p/c1154179da8a</a></p><p><em>我会在微信公众号【骨灰级果粉】中不定期分享我个人的macOS/ios开发心得和开发笔记，也会在里面发表对于苹果产品/框架/趋势的拙见，希望爱好科技产品或者苹果生态圈的开发者关注。相信本公众号一定能给您带来收获和启发。</em></p><p><img src="https://syy.freep.cn/588778/640.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;开发mouseSync的初衷&quot;&gt;&lt;a href=&quot;#开发mouseSync的初衷&quot; class=&quot;headerlink&quot; title=&quot;开发mouseSync的初衷&quot;&gt;&lt;/a&gt;开发mouseSync的初衷&lt;/h1&gt;&lt;p&gt;或许是不想让买显示器送主机的笑话成真，App
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="macOS开发" scheme="http://zhihaozhang.github.io/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>associate brush</title>
    <link href="http://zhihaozhang.github.io/2014/11/15/associate%20brush/"/>
    <id>http://zhihaozhang.github.io/2014/11/15/associate brush/</id>
    <published>2014-11-15T05:54:57.000Z</published>
    <updated>2017-09-24T04:14:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇博客记录了在上一篇博客加入scatterplot matrix的基础上，实现了associate brush的操作，即，从RadViz中brush一块区域，右边16个scatterplot里对应的点都会高亮出来，其他的点将暗淡下去；同样的，从右边16个scatterplot matrix里任一scatterplot cell里brush一些点，另外15个cell以及左边的RadViz里相应的点都会被highlight出来。具体的效果如下图：<br><img src="http://i12.tietuku.cn/c8876c3f133891c5.jpg" alt=""></p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">\&lt;!DOCTYPE html\&gt;</div><div class="line">\&lt;html\&gt;</div><div class="line">\&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=gbk&quot;\&gt;</div><div class="line">\&lt;meta name=&quot;author&quot; content=&quot;oscar999&quot;\&gt;</div><div class="line">\&lt;head\&gt;</div><div class="line">\&lt;script type=&quot;text/javascript&quot; src=&quot;script/d3.v3.js&quot;\&gt; \&lt;/script\&gt;</div><div class="line">\&lt;style\&gt;</div><div class="line">body &#123;</div><div class="line">width: 1440px;</div><div class="line">margin: 15px auto 0;</div><div class="line">background: #fff;</div><div class="line">&#125;</div><div class="line"># RadViz&#123;</div><div class="line">float:left;margin-top:20px;margin-left:10px;width:510px; height:510px;  border-width:1px; border-style:solid; border-color:#bfb7b0;</div><div class="line">&#125;</div><div class="line">\&lt;/style\&gt;</div><div class="line">\&lt;title\&gt;RadViz\&lt;/title\&gt;</div><div class="line">\&lt;/head\&gt;</div><div class="line"></div><div class="line">\&lt;body\&gt;</div><div class="line">\&lt;div id=&quot;RadViz&quot;\&gt; \&lt;/div\&gt;</div><div class="line">\&lt;script src=&quot;kNN.js&quot;\&gt;\&lt;/script\&gt;</div><div class="line">\&lt;script src=&quot;dunnsIndex.js&quot;\&gt;\&lt;/script\&gt;</div><div class="line">\&lt;style\&gt;</div><div class="line">svg &#123;</div><div class="line">font: 10px sans-serif;</div><div class="line">padding: 10px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.axis,</div><div class="line">.frame &#123;</div><div class="line">shape-rendering: crispEdges;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.axis line &#123;</div><div class="line">stroke: #ddd;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.axis path &#123;</div><div class="line">display: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.cell text &#123;</div><div class="line">font-weight: bold;</div><div class="line">text-transform: capitalize;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.frame &#123;</div><div class="line">fill: none;</div><div class="line">stroke: #aaa;</div><div class="line">&#125;</div><div class="line"></div><div class="line">circle &#123;</div><div class="line">fill-opacity: .7;</div><div class="line">&#125;</div><div class="line"></div><div class="line">circle.hidden &#123;</div><div class="line">fill: #ccc !important;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.extent &#123;</div><div class="line">fill: #000;</div><div class="line">fill-opacity: .125;</div><div class="line">stroke: #fff;</div><div class="line">&#125;</div><div class="line">\&lt;/style\&gt;</div><div class="line"></div><div class="line"></div><div class="line">\&lt;script type=&quot;text/javascript&quot;\&gt;</div><div class="line">var DimNum = 4;                  //维度数</div><div class="line">var ordertxt = [1,2,3,4]();        //order顺序</div><div class="line">var orderNum = ordertxt.length;  //order的个数</div><div class="line">var UnitRadius=360/orderNum;     //每个单元的角度</div><div class="line"></div><div class="line">var centerX=240.0;               //圆心</div><div class="line">var centerY=270.0;</div><div class="line">var r = 190;                     //半径</div><div class="line">var outerRadius = r+10;           //内半径</div><div class="line">var innerRadius = r-10;           //外半径</div><div class="line"></div><div class="line">var DimPoint = new Array();</div><div class="line">var Radius = new Array();</div><div class="line"></div><div class="line">var NodePoint =new Array();</div><div class="line"></div><div class="line">//compute DimPoint</div><div class="line">for(var i=0;i\&lt;orderNum;i++)&#123;</div><div class="line">DimPoint[i]()=new Array();</div><div class="line">&#125;</div><div class="line">for(var i=0; i\&lt;orderNum;i++)&#123;</div><div class="line">Radius[i]() = (UnitRadius*i)*Math.PI/180;</div><div class="line">DimPoint[i]()[0]()=r\*Math.cos(Radius[i]());  //DA的x坐标</div><div class="line">DimPoint[i]()[1]()=r\*Math.sin(Radius[i]());  //DA的y坐标</div><div class="line">DimPoint[i]()[2]()=ordertxt[i]();            //DA的值</div><div class="line">&#125;</div><div class="line">//compute Data Point</div><div class="line">d3.csv(&quot;iris-normalization.csv&quot;,function(RecordData)&#123;</div><div class="line">for(var i=0;i\&lt;RecordData.length;i++)&#123;</div><div class="line">NodePoint[i]()=new Array();</div><div class="line">&#125;</div><div class="line">for(var i=0;i\&lt;RecordData.length;i++)&#123;</div><div class="line">var tt=RecordData[i]().dimData;</div><div class="line">var t1=tt.split(&quot;,&quot;);</div><div class="line">for(var j=0;j\&lt;t1.length;j++)&#123;</div><div class="line">t1[j]()=parseFloat(t1[j]());</div><div class="line">&#125;</div><div class="line">var t2=new Array(t1.length);</div><div class="line">for(var k=1;k\&lt;=ordertxt.length;k++)</div><div class="line">&#123;</div><div class="line">t2[k-1]()=t1[ordertxt[k-1]()-1];</div><div class="line">&#125;</div><div class="line">//        console.log(t2)</div><div class="line">//        console.log(t1+&quot; ---&quot;)</div><div class="line">RecordData[i]().dimData = t2;</div><div class="line">&#125;</div><div class="line">var dataStr = &quot;&quot;;</div><div class="line">for(var i=0;i\&lt;RecordData.length;i++)&#123;</div><div class="line">var SumDown = getSumDown(RecordData[i]().dimData,orderNum);</div><div class="line">var SumUpX = getSumUpX(RecordData[i]().dimData,Radius,orderNum);</div><div class="line">var SumUpY = getSumUpY(RecordData[i]().dimData,Radius,orderNum);</div><div class="line">var CoordX = SumUpX/SumDown;</div><div class="line">var CoordY = SumUpY/SumDown;</div><div class="line">NodePoint[i]()[0]() = CoordX+centerX;</div><div class="line">NodePoint[i]()[1]() = CoordY+centerY;</div><div class="line">NodePoint[i]()[2]() = RecordData[i]().classId;</div><div class="line">NodePoint[i]()[3]() = RecordData[i]().id;</div><div class="line">dataStr = dataStr+NodePoint[i]()[3]()+&quot;,&quot;+NodePoint[i]()[0]()+&quot;,&quot;+NodePoint[i]()[1]()+&quot;,&quot;+NodePoint[i]()[2]()+&quot;\n&quot;;</div><div class="line">&#125;</div><div class="line">//                console.log(dataStr);</div><div class="line">//              console.log(dataStr);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">var width = 600, height = 500;</div><div class="line"></div><div class="line">var svg = d3.select(RadViz).append(&quot;svg&quot;).attr(&quot;width&quot;,width).attr(&quot;height&quot;, height) ;</div><div class="line"></div><div class="line">var xScale = d3.scale.linear().domain([10,510]())</div><div class="line">.range([10,510]());</div><div class="line"></div><div class="line">var yScale = d3.scale.linear().domain([10,510]())</div><div class="line">.range([20,510-20]());</div><div class="line"></div><div class="line">var brush = d3.svg.brush()</div><div class="line">.x(xScale)</div><div class="line">.y(yScale)</div><div class="line">.extent([0,0](),[0,0]())</div><div class="line">.on(&apos;brush&apos;,brushed)</div><div class="line">.on(&apos;brushstart&apos;,brushstart)</div><div class="line">.on(&apos;brushend&apos;,brushend);</div><div class="line"></div><div class="line">function brushstart()&#123;</div><div class="line"> d3.select(&apos;body&apos;).selectAll(&apos;.cell&apos;).selectAll(&apos;circle&apos;)</div><div class="line">//                 .style(&apos;fill&apos;,&apos;#ccc&apos;);</div><div class="line">.classed(&apos;hidden&apos;,true);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">function brushend()&#123;</div><div class="line">if (brush.empty()) &#123;</div><div class="line">d3.select(&apos;body&apos;).selectAll(&apos;.cell&apos;).selectAll(&apos;circle&apos;)</div><div class="line">.classed(&apos;hidden&apos;, function () &#123;</div><div class="line"></div><div class="line">return false;</div><div class="line"></div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function brushed()&#123;</div><div class="line"></div><div class="line">var extent = brush.extent();</div><div class="line">var xmin = extent[0]()[0]();</div><div class="line">var xmax = extent[1]()[0]();</div><div class="line">var ymin = extent[0]()[1]();</div><div class="line">var ymax = extent[1]()[1]();</div><div class="line">//        console.log(xmax + &quot; &quot; + xmin);</div><div class="line">//        console.log(ymax + &quot; &quot; + ymin);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"> Nodes.style(&quot;fill&quot;,function(d, i) &#123;</div><div class="line"></div><div class="line"></div><div class="line">var color;</div><div class="line">//         console.log(d);</div><div class="line"></div><div class="line">//         d3.select(&apos;body&apos;).selectAll(&apos;.cell&apos;).selectAll(&apos;circle&apos;)</div><div class="line">//                 .style(&apos;fill&apos;,&apos;#ccc&apos;);</div><div class="line"></div><div class="line"> if(d[0]()\&gt;=xmin &amp;&amp; d[0]()\&lt;=xmax &amp;&amp; d[1]()\&gt;=ymin &amp;&amp; d[1]()\&lt;=ymax)&#123;</div><div class="line"></div><div class="line"> d3.select(&apos;body&apos;).selectAll(&apos;.cell&apos;).selectAll(&apos;circle&apos;)</div><div class="line"> .filter(function(dd)&#123;return dd.id==d[3]();&#125;)</div><div class="line"> .classed(&apos;hidden&apos;,false);</div><div class="line"></div><div class="line"></div><div class="line"> return &apos;red&apos;;</div><div class="line"></div><div class="line"> &#125;else&#123;</div><div class="line"></div><div class="line">//             return color(d[2]());</div><div class="line"></div><div class="line">if (d[2]() == &quot;1&quot;)</div><div class="line">color = &quot;#ffc2ce&quot;;</div><div class="line">else if (d[2]() == &quot;2&quot;)</div><div class="line">color = &quot;#0ffa1d&quot;;</div><div class="line">else if (d[2]() == &quot;3&quot;)</div><div class="line">color = &quot;#fee905&quot;;</div><div class="line">return color;</div><div class="line">&#125;</div><div class="line"> &#125;);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">svg.append(&apos;g&apos;).call(brush)</div><div class="line">.selectAll(&apos;rect&apos;)</div><div class="line">.style(&apos;fill-opacity&apos;,0.3);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">var dimdata = []();</div><div class="line">for ( var i = 0; i \&lt; DimNum; i++) &#123;</div><div class="line">dimdata[i]() = 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//draw arc</div><div class="line">var pie = d3.layout.pie().sort(null);</div><div class="line">var arc = d3.svg.arc()</div><div class="line">.startAngle(function(d,i)&#123;</div><div class="line">return (UnitRadius*i+90-0.5*UnitRadius+1)\* Math.PI/180&#125;)</div><div class="line">.endAngle(function(d,i)&#123;return (UnitRadius*i+90+0.5*UnitRadius)\*Math.PI/180&#125;)</div><div class="line">.innerRadius(innerRadius)</div><div class="line">.outerRadius(outerRadius)</div><div class="line">;</div><div class="line">var arcs = svg.selectAll(&quot;g.arc&quot;).data(pie(dimdata)).enter()</div><div class="line">.append(&quot;g&quot;).attr(&quot;class&quot;, &quot;arc&quot;).attr(&quot;transform&quot;,</div><div class="line">&quot;translate(&quot; + centerX + &quot;,&quot; + centerY + &quot;)&quot;)</div><div class="line">;</div><div class="line">arcs.append(&quot;path&quot;)</div><div class="line">//.style(&quot;stroke&quot;,&quot;red&quot;)</div><div class="line">//.style(&quot;stroke-opacity&quot;,0)</div><div class="line">//  .style(&quot;stroke-width&quot;,0)</div><div class="line">.attr(&quot;fill&quot;,function(d, i) &#123;</div><div class="line">var color1=[&quot;#006650&quot;,&quot;#f5ab00&quot;,&quot;#db4527&quot;,&quot;#005687&quot;]();</div><div class="line">return color1[i]();</div><div class="line">&#125;)</div><div class="line">.attr(&quot;d&quot;, arc);</div><div class="line">//show Dimension Point</div><div class="line">svg.selectAll(&quot;circle&quot;)</div><div class="line">.data(DimPoint)</div><div class="line">.enter()</div><div class="line">.append(&quot;circle&quot;)</div><div class="line">.attr(&quot;cx&quot;, function(d) &#123;</div><div class="line">return d[0]()+centerX;</div><div class="line">&#125;)</div><div class="line">.attr(&quot;cy&quot;, function(d) &#123;</div><div class="line">return d[1]()+centerY;</div><div class="line">&#125;).attr(&quot;r&quot;, 4)</div><div class="line">.attr(&quot;opacity&quot;,0.8);</div><div class="line"></div><div class="line">svg.selectAll(&quot;text&quot;)</div><div class="line">.data(DimPoint)</div><div class="line">.enter()</div><div class="line">.append(&quot;text&quot;)</div><div class="line">.text(function(d) &#123;</div><div class="line">return d[2]();</div><div class="line">&#125;)</div><div class="line">.attr(&quot;x&quot;, function(d) &#123;</div><div class="line">return d[0]()+centerX ;</div><div class="line">&#125;).attr(&quot;y&quot;, function(d) &#123;</div><div class="line">return d[1]()+centerY;</div><div class="line">&#125;).attr(&quot;font-family&quot;, &quot;sans-serif&quot;)</div><div class="line">.attr(&quot;font-size&quot;, 15)</div><div class="line">.attr(&quot;stroke-width&quot;,2)</div><div class="line">.attr(&quot;fill&quot;, &quot;black&quot;);</div><div class="line"></div><div class="line"></div><div class="line">//show data point</div><div class="line">var Nodes = svg.selectAll(&quot;RadViz&quot;)</div><div class="line">.data(NodePoint)</div><div class="line">.enter()</div><div class="line">.append(&quot;circle&quot;)</div><div class="line">.attr(&quot;class&quot;, &quot;node&quot;)</div><div class="line">.attr(&quot;id&quot;,function(d,i)&#123;return i;&#125;)</div><div class="line">.attr(&quot;cx&quot;,function(d,i)&#123; return d[0](); &#125;)</div><div class="line">.attr(&quot;cy&quot;,function(d,i)&#123;return d[1]();&#125;)</div><div class="line">.attr(&quot;r&quot;, 4.5)</div><div class="line">.attr(&quot;class&quot;,&quot;nodes&quot;)</div><div class="line">.style(&quot;opacity&quot;,0.8)</div><div class="line">.style(&quot;fill&quot;,function(d, i) &#123;</div><div class="line">var color;</div><div class="line">if (d[2]() == &quot;1&quot;)</div><div class="line">color = &quot;#ffc2ce&quot;;</div><div class="line">else if (d[2]() == &quot;2&quot;)</div><div class="line">color = &quot;#0ffa1d&quot;;</div><div class="line">else if (d[2]() == &quot;3&quot;)</div><div class="line">color = &quot;#fee905&quot;;</div><div class="line">return color;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">Nodes.on(&quot;mouseenter&quot;,function()&#123;d3.select(this).style(&apos;fill&apos;,&apos;red&apos;)</div><div class="line"></div><div class="line">var x = d3.select(this).attr(&apos;cx&apos;);</div><div class="line">var y = d3.select(this).attr(&apos;cy&apos;);</div><div class="line"></div><div class="line">//                    alert(x+&quot; &quot;+y)</div><div class="line">//                    var sequence = new Array();</div><div class="line">sequence = kNN(NodePoint,[x,y](),5);</div><div class="line">var NN=  Nodes.filter(function(d,i)&#123;</div><div class="line">var flag=false;</div><div class="line">for(var i=0;i\&lt;sequence.length;i++)</div><div class="line">&#123;</div><div class="line">if(d[3]()==sequence[i]())&#123;</div><div class="line">flag=true;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">return flag;</div><div class="line">&#125;).style(&apos;fill&apos;,&apos;red&apos;)</div><div class="line"></div><div class="line">&#125;)</div><div class="line">.on(&apos;mouseleave&apos;,function(d,i)&#123;Nodes.style(&quot;fill&quot;,function(d, i) &#123;</div><div class="line">var color;</div><div class="line">if (d[2]() == &quot;1&quot;)</div><div class="line">color = &quot;#ffc2ce&quot;;</div><div class="line">else if (d[2]() == &quot;2&quot;)</div><div class="line">color = &quot;#0ffa1d&quot;;</div><div class="line">else if (d[2]() == &quot;3&quot;)</div><div class="line">color = &quot;#fee905&quot;;</div><div class="line">return color;</div><div class="line">&#125;)&#125;)</div><div class="line"></div><div class="line">.style(&quot;stroke&quot;, &quot;black&quot;)</div><div class="line">.style(&quot;stroke-width&quot;, 0.8)</div><div class="line">.append(&quot;title&quot;)</div><div class="line">.text(function(d) &#123; return &quot;point&quot;+d[3]()+&quot;-class:&quot;+d[2](); &#125;)</div><div class="line"></div><div class="line">Nodes.on(&apos;click&apos;,function(d,i)&#123;</div><div class="line"></div><div class="line">//                   var x = d3.select(this).attr(&apos;cx&apos;)</div><div class="line">//                   var y = d3.select(this).attr(&apos;cy&apos;)</div><div class="line"></div><div class="line">var x = d[0]();</div><div class="line">var y = d[1]();</div><div class="line"></div><div class="line">//                    alert(x+&quot; &quot;+y)</div><div class="line">//                    var sequence = new Array();</div><div class="line">sequence = kNN(NodePoint,[x,y](),5);</div><div class="line">//                    alert(sequence);</div><div class="line">var Str=&quot;&quot;;</div><div class="line">for(var kk=0;kk\&lt;sequence.length;kk++)&#123;</div><div class="line">Str=Str+NodePoint[sequence[kk]()][2]()+&quot;  &quot;;</div><div class="line">&#125;</div><div class="line">alert(Str);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&#125;)</div><div class="line"></div><div class="line">var KNum =15;</div><div class="line">var right = 0;</div><div class="line">for(var i=0;i\&lt;NodePoint.length;i++) &#123;</div><div class="line">var tmp = new Array();</div><div class="line">tmp = [NodePoint[i]()[0](), NodePoint[i]()[1]()];</div><div class="line">//                    console.log(tmp);</div><div class="line"></div><div class="line">sequence = kNN(NodePoint, tmp, KNum);</div><div class="line">var count1 = 0;</div><div class="line">var count2 = 0;</div><div class="line">var count3 = 0;</div><div class="line">for (var kk = 0; kk \&lt; sequence.length; kk++) &#123;</div><div class="line">if (NodePoint[sequence[kk]()][2]() == 1) &#123;</div><div class="line">count1++;</div><div class="line">&#125; else if (NodePoint[sequence[kk]()][2]() == 2) &#123;</div><div class="line">count2++;</div><div class="line">&#125; else if (NodePoint[sequence[kk]()][2]() == 3) &#123;</div><div class="line">count3++;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var max = Math.max(count1, Math.max(count2, count3))</div><div class="line">var predict = 0;</div><div class="line">if (count1 == max) &#123;</div><div class="line">predict = 1;</div><div class="line">&#125; else if (count2 == max) &#123;</div><div class="line">predict = 2;</div><div class="line">&#125; else if (count3 == max) &#123;</div><div class="line">predict = 3;</div><div class="line">&#125;</div><div class="line">if (NodePoint[i]()[2]() == predict) &#123;</div><div class="line">right++;</div><div class="line">&#125; else &#123;</div><div class="line">console.log(&quot;predict is &quot; + predict + &quot; NodePoint is &quot; + NodePoint[i]()[2]())</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">console.log(right);</div><div class="line"></div><div class="line">var dunnsindex = (dunnsIndex(3,NodePoint));</div><div class="line"></div><div class="line">svg.append(&apos;text&apos;)</div><div class="line">.text(&apos;Dunns Index: &apos;+dunnsindex.toFixed(3))</div><div class="line">.attr(&apos;x&apos;,width)</div><div class="line">.attr(&apos;y&apos;,height)</div><div class="line">.attr(&apos;dx&apos;,-250)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&#125;);//.data</div><div class="line"></div><div class="line">function getSumUpX(RecordData,Radius,orderNum)&#123;</div><div class="line">var TempUpX=0;</div><div class="line">for(var i=0;i\&lt;orderNum;i++)&#123;</div><div class="line">TempUpX=TempUpX+r*RecordData[i]()*Math.cos(Radius[i]());</div><div class="line">&#125;</div><div class="line">return TempUpX;</div><div class="line">&#125;</div><div class="line">function getSumUpY(RecordData,Radius,orderNum)&#123;</div><div class="line">var TempUpY=0;</div><div class="line">for(var i=0;i\&lt;orderNum;i++)&#123;</div><div class="line">TempUpY=TempUpY+r*RecordData[i]()*Math.sin(Radius[i]());</div><div class="line">&#125;</div><div class="line">return TempUpY;</div><div class="line">&#125;</div><div class="line">function getSumDown(RecordData,orderNum)&#123;</div><div class="line">var TempDown=0;</div><div class="line">for(var i=0;i\&lt;orderNum;i++)&#123;</div><div class="line">TempDown =TempDown+RecordData[i]();</div><div class="line">&#125;</div><div class="line">return TempDown;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">\&lt;/script\&gt;</div><div class="line"></div><div class="line">\&lt;style\&gt;</div><div class="line"></div><div class="line">svg &#123;</div><div class="line">font: 10px sans-serif;</div><div class="line">padding: 10px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.axis,</div><div class="line">.frame &#123;</div><div class="line">shape-rendering: crispEdges;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.axis line &#123;</div><div class="line">stroke: #ddd;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.axis path &#123;</div><div class="line">display: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.cell text &#123;</div><div class="line">font-weight: bold;</div><div class="line">text-transform: capitalize;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.frame &#123;</div><div class="line">fill: none;</div><div class="line">stroke: #aaa;</div><div class="line">&#125;</div><div class="line"></div><div class="line">circle &#123;</div><div class="line">fill-opacity: .7;</div><div class="line">&#125;</div><div class="line"></div><div class="line">circle.hidden &#123;</div><div class="line">fill: #ccc !important;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.extent &#123;</div><div class="line">fill: #000;</div><div class="line">fill-opacity: .125;</div><div class="line">stroke: #fff;</div><div class="line">&#125;</div><div class="line"></div><div class="line">\&lt;/style\&gt;</div><div class="line"></div><div class="line"></div><div class="line">\&lt;script\&gt;</div><div class="line"></div><div class="line">var width = 960,</div><div class="line">size = 130,</div><div class="line">padding = 20;</div><div class="line"></div><div class="line">var x = d3.scale.linear()</div><div class="line">.range([padding / 2, size - padding / 2]());</div><div class="line"></div><div class="line">var y = d3.scale.linear()</div><div class="line">.range([size - padding / 2, padding / 2]());</div><div class="line"></div><div class="line">var xAxis = d3.svg.axis()</div><div class="line">.scale(x)</div><div class="line">.orient(&quot;bottom&quot;)</div><div class="line">.ticks(6);</div><div class="line"></div><div class="line">var yAxis = d3.svg.axis()</div><div class="line">.scale(y)</div><div class="line">.orient(&quot;left&quot;)</div><div class="line">.ticks(6);</div><div class="line"></div><div class="line">var color = d3.scale.category10();</div><div class="line"></div><div class="line">d3.csv(&quot;flowers.csv&quot;, function(error, data) &#123;</div><div class="line">if (error) throw error;</div><div class="line"></div><div class="line">var domainByTrait = &#123;&#125;,</div><div class="line">traits = d3.keys(data[0]()).filter(function(d) &#123; return d !== &quot;species&quot;&amp;&amp;d!=&quot;id&quot;; &#125;),</div><div class="line">n = traits.length;</div><div class="line"></div><div class="line">traits.forEach(function(trait) &#123;</div><div class="line">domainByTrait[trait]() = d3.extent(data, function(d) &#123; return d[trait](); &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">xAxis.tickSize(size \* n);</div><div class="line">yAxis.tickSize(-size \* n);</div><div class="line"></div><div class="line">var brush = d3.svg.brush()</div><div class="line">.x(x)</div><div class="line">.y(y)</div><div class="line">.on(&quot;brushstart&quot;, brushstart)</div><div class="line">.on(&quot;brush&quot;, brushmove)</div><div class="line">.on(&quot;brushend&quot;, brushend);</div><div class="line"></div><div class="line">var svg = d3.select(&quot;body&quot;).append(&quot;svg&quot;)</div><div class="line">.attr(&quot;width&quot;, size \* n + padding)</div><div class="line">.attr(&quot;height&quot;, size \* n + padding)</div><div class="line">.append(&quot;g&quot;)</div><div class="line">.attr(&quot;transform&quot;, &quot;translate(&quot; + padding + &quot;,&quot; + padding / 2 + &quot;)&quot;);</div><div class="line"></div><div class="line">svg.selectAll(&quot;.x.axis&quot;)</div><div class="line">.data(traits)</div><div class="line">.enter().append(&quot;g&quot;)</div><div class="line">.attr(&quot;class&quot;, &quot;x axis&quot;)</div><div class="line">.attr(&quot;transform&quot;, function(d, i) &#123; return &quot;translate(&quot; + (n - i - 1) \* size + &quot;,0)&quot;; &#125;)</div><div class="line">.each(function(d) &#123; x.domain(domainByTrait[d]()); d3.select(this).call(xAxis); &#125;);</div><div class="line"></div><div class="line">svg.selectAll(&quot;.y.axis&quot;)</div><div class="line">.data(traits)</div><div class="line">.enter().append(&quot;g&quot;)</div><div class="line">.attr(&quot;class&quot;, &quot;y axis&quot;)</div><div class="line">.attr(&quot;transform&quot;, function(d, i) &#123; return &quot;translate(0,&quot; + i \* size + &quot;)&quot;; &#125;)</div><div class="line">.each(function(d) &#123; y.domain(domainByTrait[d]()); d3.select(this).call(yAxis); &#125;);</div><div class="line"></div><div class="line">var cell = svg.selectAll(&quot;.cell&quot;)</div><div class="line">.data(cross(traits, traits))</div><div class="line">.enter().append(&quot;g&quot;)</div><div class="line">.attr(&quot;class&quot;, &quot;cell&quot;)</div><div class="line">.attr(&quot;transform&quot;, function(d) &#123; return &quot;translate(&quot; + (n - d.i - 1) * size + &quot;,&quot; + d.j * size + &quot;)&quot;; &#125;)</div><div class="line">.each(plot);</div><div class="line"></div><div class="line">// Titles for the diagonal.</div><div class="line">cell.filter(function(d) &#123; return d.i === d.j; &#125;).append(&quot;text&quot;)</div><div class="line">.attr(&quot;x&quot;, padding)</div><div class="line">.attr(&quot;y&quot;, padding)</div><div class="line">.attr(&quot;dy&quot;, &quot;.71em&quot;)</div><div class="line">.text(function(d) &#123; return d.x; &#125;);</div><div class="line"></div><div class="line">cell.call(brush);</div><div class="line"></div><div class="line">function plot(p) &#123;</div><div class="line">var cell = d3.select(this);</div><div class="line"></div><div class="line">x.domain(domainByTrait[p.x]());</div><div class="line">y.domain(domainByTrait[p.y]());</div><div class="line"></div><div class="line">cell.append(&quot;rect&quot;)</div><div class="line">.attr(&quot;class&quot;, &quot;frame&quot;)</div><div class="line">.attr(&quot;x&quot;, padding / 2)</div><div class="line">.attr(&quot;y&quot;, padding / 2)</div><div class="line">.attr(&quot;width&quot;, size - padding)</div><div class="line">.attr(&quot;height&quot;, size - padding);</div><div class="line"></div><div class="line">cell.selectAll(&quot;circle&quot;)</div><div class="line">.data(data)</div><div class="line">.enter().append(&quot;circle&quot;)</div><div class="line">.attr(&quot;cx&quot;, function(d) &#123; return x(d[p.x]()); &#125;)</div><div class="line">.attr(&quot;cy&quot;, function(d) &#123; return y(d[p.y]()); &#125;)</div><div class="line">.attr(&quot;r&quot;, 4)</div><div class="line">.style(&quot;fill&quot;, function(d) &#123;</div><div class="line">return color(d.species);</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">var brushCell;</div><div class="line"></div><div class="line">// Clear the previously-active brush, if any.</div><div class="line">function brushstart(p) &#123;</div><div class="line">if (brushCell !== this) &#123;</div><div class="line">d3.select(brushCell).call(brush.clear());</div><div class="line">x.domain(domainByTrait[p.x]());</div><div class="line">y.domain(domainByTrait[p.y]());</div><div class="line">brushCell = this;</div><div class="line">&#125;</div><div class="line">d3.select(&apos;#RadViz&apos;).selectAll(&apos;.nodes&apos;)</div><div class="line">.classed(&apos;hidden&apos;,true);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">// Highlight the selected circles.</div><div class="line">function brushmove(p) &#123;</div><div class="line">var e = brush.extent();</div><div class="line">svg.selectAll(&quot;circle&quot;).classed(&quot;hidden&quot;, function(d) &#123;</div><div class="line"></div><div class="line"></div><div class="line">if( e[0]()[0]() \&gt; d[p.x]() || d[p.x]() \&gt; e[1]()[0]()</div><div class="line">|| e[0]()[1]() \&gt; d[p.y]() || d[p.y]() \&gt; e[1]()[1]())&#123;</div><div class="line">return true;</div><div class="line">&#125;else&#123;</div><div class="line">//                    console.log(d);</div><div class="line">d3.select(&apos;#RadViz&apos;).selectAll(&apos;.nodes&apos;)</div><div class="line">.filter(function(dd)&#123;</div><div class="line"></div><div class="line">return d.id==dd[3]();</div><div class="line">&#125;)</div><div class="line">.classed(&apos;hidden&apos;,false);</div><div class="line"></div><div class="line">return false;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">// If the brush is empty, select all circles.</div><div class="line">function brushend() &#123;</div><div class="line">if (brush.empty())</div><div class="line">&#123;</div><div class="line">svg.selectAll(&quot;.hidden&quot;).classed(&quot;hidden&quot;, false);</div><div class="line">d3.select(&apos;#RadViz&apos;).selectAll(&apos;.nodes&apos;)</div><div class="line">.classed(&apos;hidden&apos;,false);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">d3.select(self.frameElement).style(&quot;height&quot;, size \* n + padding + 20 + &quot;px&quot;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">function cross(a, b) &#123;</div><div class="line">var c = [](), n = a.length, m = b.length, i, j;</div><div class="line">for (i = -1; ++i \&lt; n;) for (j = -1; ++j \&lt; m;) c.push(&#123;x: a[i](), i: i, y: b[j](), j: j&#125;);</div><div class="line">return c;</div><div class="line">&#125;</div><div class="line"></div><div class="line">\&lt;/script\&gt;</div><div class="line"></div><div class="line"></div><div class="line">\&lt;/body\&gt;</div><div class="line">\&lt;/html\&gt;</div><div class="line"></div></pre></td></tr></table></figure><p>这次实现的associate brush操作，有下面需要注意和值得总结的地方：</p><ol><li>首先考虑的是，既然需要实现associate，就必须要有将两个view联系起来的东西，可以类比数据库表中的外键，两个表都有这个键，就可以联系起来。</li><li>特别需要注意的是brushed、brushstart和brushend这三个函数，如何判断一个点在brush的区域里面还是外面，以及如何在brush动作完成之后，继续保持brush点的highlight，需要加一句判断if（brush.emtpy()）。</li><li>控制是否高亮，可以给circle加一个class .hidden,这样的话可以方便的给circle加上这个class，也方便后面不要这个class的时候去掉，刚开始实现的时候还加了对原来颜色的判断，很麻烦，而引入了.hidden class后，想加上这个class的时候就一句 .classed(‘hidden’,true)就可以了，不想要的时候，用.classed(‘hidden’,false)就去掉了这个包袱，非常方便。</li><li>关于hidden这个class，还遇到了一个大坑。在前端测试可以通过，但是加入了node.js的后端之后，始终测试无法通过，出现了hidden的类完全消失了的情况，其他地方怎么找也找不到问题，可能是hidden class是node的保留class？将hidden改成hidden1之后问题就解决了，以后这种敏感的词前面还是加上my的好，如myHidden…</li></ol><p>发现一个bug，就是brush之后，如果再次resize brush的框，对应的已经着色了的其他点不会相应的变化，需要修改brushmove函数为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">function brushmove(p) &#123;</div><div class="line">var e = brush.extent();</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">svg.selectAll(&quot;circle&quot;).classed(&quot;hidden&quot;, function(d) &#123;</div><div class="line"></div><div class="line"></div><div class="line">if( e[0]()[0]() \&gt; d[p.x]() || d[p.x]() \&gt; e[1]()[0]()</div><div class="line">|| e[0]()[1]() \&gt; d[p.y]() || d[p.y]() \&gt; e[1]()[1]())&#123;</div><div class="line"></div><div class="line">d3.select(&apos;#RadViz&apos;).selectAll(&apos;.nodes&apos;)</div><div class="line">.filter(function(dd)&#123;</div><div class="line">return d.id==dd[3]()</div><div class="line">&#125;).classed(&apos;hidden&apos;,true);</div><div class="line"></div><div class="line">return true;</div><div class="line">&#125;else&#123;</div><div class="line">//                    console.log(d);</div><div class="line">d3.select(&apos;#RadViz&apos;).selectAll(&apos;.nodes&apos;)</div><div class="line">.filter(function(dd)&#123;</div><div class="line"></div><div class="line">return d.id==dd[3]();</div><div class="line">&#125;)</div><div class="line">.classed(&apos;hidden&apos;,false);</div><div class="line"></div><div class="line"></div><div class="line">return false;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇博客记录了在上一篇博客加入scatterplot matrix的基础上，实现了associate brush的操作，即，从RadViz中brush一块区域，右边16个scatterplot里对应的点都会高亮出来，其他的点将暗淡下去；同样的，从右边16个scatterpl
      
    
    </summary>
    
      <category term="visualization" scheme="http://zhihaozhang.github.io/categories/visualization/"/>
    
    
      <category term="d3" scheme="http://zhihaozhang.github.io/tags/d3/"/>
    
  </entry>
  
  <entry>
    <title>drop and drag in d3</title>
    <link href="http://zhihaozhang.github.io/2014/11/15/drop%20and%20drag%20in%20d3js/"/>
    <id>http://zhihaozhang.github.io/2014/11/15/drop and drag in d3js/</id>
    <published>2014-11-15T05:54:57.000Z</published>
    <updated>2017-09-23T11:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Behavior-in-d3"><a href="#Behavior-in-d3" class="headerlink" title="Behavior in d3"></a>Behavior in d3</h1><p>在d3中，行为被设计成了一种组件，可以创建一系列的事件，并绑定到调用这些行为的元素上。最常见的行为有拖拽与缩放，使用这些行为可以很方便地在拖拽或者缩放的开始、过程中以及结束时达到想要的效果。</p><p>这篇博客中，就以拖拽为例，并借助之前实现的热力图，实现拖拽dimension的label以达到reoder维度的效果。为了使用三个阶段，我们会让开始拖拽的时候，维度名变成红色、字体变大来表示强调的效果；在拖拽过程中，让label紧跟鼠标的位置；并且判断最终的位置，交换两个维度，并重新绘制整个热力图。</p><p>理想情况下，开始移动的时候的，运行情况应该像下面这样。<br><img src="http://i3.piimg.com/20f52681eff4f677.jpg" alt=""></p><h1 id="drag"><a href="#drag" class="headerlink" title="drag"></a>drag</h1><p>创建一个新的拖拽行为非常简单，var drag = d3.behavior.drag()就创建好了。在这个行为上，可以指定拖拽事件类型的监听器，支持的事件类型有三种，<strong>dragstart/drag/dragend</strong>，分别是上面提到的拖动开始时触发的函数，拖动时触发和拖动结束时触发。<br>对应到上面的要求，维度名变成红色、字体变大来表示强调的效果（开始拖拽时），让label紧跟鼠标的位置（拖拽过程中），并且判断最终的位置，交换两个维度，并重新绘制整个热力图（拖拽结束后）。</p><h1 id="实现的细节"><a href="#实现的细节" class="headerlink" title="实现的细节"></a>实现的细节</h1><p>需要注意的有几点，</p><ol><li>由于热力图的实现方式，横着的dimension和竖着的dimension的drag是不同的。但是他们也有可以共用的地方，dragEnd是可以共用的，但是另外两个是不可以的，所以需要建立两个drag的事件。</li><li>重新绘制涉及到了行和列，变换是需要考虑如何实现的。</li><li>如何判断label拖拽之后是到哪里了，是否超出了边界(超过上界认为和第一个换，超过下界认为认为和最后一个换。) 查看辅助函数changeLabelOrder()</li><li>真正意义上的交换，不仅仅是两个label之间的交换，还有相关性的交换。</li><li>Math.ceil()和Math.floor()的区别。</li></ol><p>代码见文末的附录。</p><h1 id="小额资助"><a href="#小额资助" class="headerlink" title="小额资助"></a>小额资助</h1><p>如果本文对您有帮助，请用支付宝扫码小额赞助我，谢谢！<br><img src="http://i13.tietuku.cn/eec06685d2e66e2c.png" alt=""></p><h1 id="附录（代码）"><a href="#附录（代码）" class="headerlink" title="附录（代码）"></a>附录（代码）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  var colorScales = d3.scale.linear()</div><div class="line">.domain([-1,0,1]())</div><div class="line">.range([&quot;#31a354&quot;,&quot;#ffffff&quot;,&quot;#e6550d&quot;]());</div><div class="line"></div><div class="line">var w = element[0]().offsetWidth;</div><div class="line">var h = element[0]().offsetHeight;</div><div class="line">var width = w - options.margin.left - options.margin.right;</div><div class="line">var height = h - options.margin.top - options.margin.bottom;</div><div class="line"></div><div class="line">d3.select(element[0]()).select(&quot;svg&quot;).remove();</div><div class="line"></div><div class="line">var svg = d3.select(element[0]()).append(&quot;svg&quot;)</div><div class="line">.attr(&quot;width&quot;, width*2 + options.margin.left + options.margin.right)</div><div class="line">.attr(&quot;height&quot;, height + options.margin.top + options.margin.bottom)</div><div class="line">.append(&quot;g&quot;)</div><div class="line">.attr(&apos;class&apos;,&apos;heat&apos;)</div><div class="line">.attr(&quot;transform&quot;, &quot;translate(&quot; + options.margin.left + &quot;,&quot; + options.margin.top + &quot;)&quot;)</div><div class="line">//                        .append(&apos;g&apos;)</div><div class="line">//                        .attr(&apos;class&apos;,&apos;rad&apos;);</div><div class="line"></div><div class="line">var xu = &#123;&#125;;</div><div class="line">var x = []();</div><div class="line">var yu = &#123;&#125;;</div><div class="line">var y = []();</div><div class="line"></div><div class="line">var theLabel = 0;</div><div class="line"></div><div class="line">for (var i in scope.data) &#123;</div><div class="line">if (typeof(xu[scope.data\[i]().x]) == &quot;undefined&quot;) &#123;</div><div class="line">x.push(scope.data[i]().x);</div><div class="line">&#125;</div><div class="line">xu[scope.data\[i]().x] = 0;</div><div class="line">if (typeof(yu[scope.data\[i]().y]) == &quot;undefined&quot;) &#123;</div><div class="line">y.push(scope.data[i]().y);</div><div class="line">&#125;</div><div class="line">yu[scope.data\[i]().y] = 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">for (d in scope.data) &#123;</div><div class="line">scope.data[d]().xIndex = x.indexOf(scope.data[d]().x);</div><div class="line">scope.data[d]().yIndex = y.indexOf(scope.data[d]().y);</div><div class="line">&#125;</div><div class="line"></div><div class="line">var drag = d3.behavior.drag()</div><div class="line">.on(&apos;drag&apos;,dragText)</div><div class="line">.on(&apos;dragstart&apos;,dragStart)</div><div class="line">.on(&apos;dragend&apos;,dragEnd);</div><div class="line"></div><div class="line">var dragX = d3.behavior.drag()</div><div class="line">.on(&apos;drag&apos;,dragTextX)</div><div class="line">.on(&apos;dragstart&apos;,dragStartX)</div><div class="line">.on(&apos;dragend&apos;,dragEnd);</div><div class="line"></div><div class="line">function dragStartX () &#123;</div><div class="line">d3.select(this).attr(&apos;fill&apos;, &apos;red&apos;).attr(&apos;font-weight&apos;, &apos;900&apos;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">function dragTextX (d,i)&#123;</div><div class="line">//                        console.log(i);</div><div class="line"></div><div class="line">var y=   d3.event.x-i*xGridSize;</div><div class="line">var x=  -d3.event.y;</div><div class="line">//                        console.log(&quot;d3.event.y:&quot;+d3.event.y);</div><div class="line">//                        console.log(&quot;d3.event.x:&quot;+d3.event.x);</div><div class="line">//                        console.log(xGridSize+&quot;  == &quot;+yGridSize);</div><div class="line"></div><div class="line">//                        var tmp=(d3.event.x-xGridSize/2)/xGridSize;</div><div class="line">var tmp = Math.ceil(d3.event.x/xGridSize)-1;</div><div class="line">//                        console.log(tmp+&quot;  tmp&quot;)</div><div class="line"></div><div class="line">if(tmp\&lt;=0)</div><div class="line">&#123;</div><div class="line">theLabel=0;</div><div class="line">&#125;else if(tmp\&gt;=Math.sqrt(data.length))</div><div class="line">&#123;</div><div class="line">theLabel=Math.sqrt(data.length)-1;</div><div class="line">&#125;else</div><div class="line">&#123;</div><div class="line">theLabel=tmp;</div><div class="line">&#125;</div><div class="line"></div><div class="line">d3.select(this)</div><div class="line">.attr(&apos;transform&apos;,function(d)&#123;</div><div class="line">return &quot;rotate(-90) translate(&quot;+x+&apos;,&apos;+y+&apos;)&apos;;</div><div class="line">&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">function dragStart ()&#123;</div><div class="line">d3.select(this).attr(&apos;fill&apos;,&apos;red&apos;).attr(&apos;font-weight&apos;,&apos;900&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function dragText (d,i)&#123;</div><div class="line">//                        console.log(i);</div><div class="line"></div><div class="line">var x=   d3.event.x;</div><div class="line">var y=  d3.event.y-yGridSize*i;</div><div class="line">//                        console.log(&quot;d3.event.y:&quot;+d3.event.y);</div><div class="line"></div><div class="line">var tmp = cal((y-yGridSize)/yGridSize);</div><div class="line">//                        console.log(tmp+&quot;  tmp&quot;);</div><div class="line"></div><div class="line">if(tmp+i\&gt;=Math.sqrt(data.length))</div><div class="line">&#123;</div><div class="line">theLabel=Math.sqrt(data.length);</div><div class="line">&#125;else if(tmp+i\&lt;=0)&#123;</div><div class="line">theLabel=0;</div><div class="line">&#125;else&#123;</div><div class="line">theLabel=tmp+i;</div><div class="line">&#125;</div><div class="line"></div><div class="line">d3.select(this)</div><div class="line">.attr(&apos;transform&apos;,function(d)&#123;</div><div class="line">return &quot;translate(&quot;+x+&apos;,&apos;+y+&apos;)&apos;;</div><div class="line">&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">function dragEnd(d,i)&#123;</div><div class="line">d3.select(this)</div><div class="line">.attr(&apos;fill&apos;,&apos;black&apos;);</div><div class="line"></div><div class="line">if(theLabel!=i)</div><div class="line">changeLabelOrder(data,theLabel,i);</div><div class="line"></div><div class="line">scope.$apply(order); //very import</div><div class="line"></div><div class="line">//                        console.log(order);</div><div class="line"></div><div class="line">render();</div><div class="line">renderRadViz();</div><div class="line">&#125;</div><div class="line"></div><div class="line">var xGridSize = Math.floor(width / x.length);</div><div class="line">var yGridSize = Math.floor(height / y.length);</div><div class="line">var legendElementWidth = Math.floor(width * options.legendWidth / (options.buckets));</div><div class="line">var legendElementHeight = height / 20;</div><div class="line"></div><div class="line">var yLabels = svg.selectAll(&quot;.yLabel&quot;)</div><div class="line">.data(y)</div><div class="line">.enter().append(&quot;text&quot;)</div><div class="line">.text(function (d) &#123; return d; &#125;)</div><div class="line">.attr(&quot;x&quot;, 0)</div><div class="line">.attr(&quot;y&quot;, function (d, i) &#123; return i * yGridSize; &#125;)</div><div class="line">.style(&quot;text-anchor&quot;, &quot;end&quot;)</div><div class="line">.attr(&quot;transform&quot;, &quot;translate(-6,&quot; + yGridSize / 1.5 + &quot;)&quot;)</div><div class="line">.attr(&quot;class&quot;, function (d, i) &#123; return (&quot;yLabel axis&quot;); &#125;)</div><div class="line">.call(drag);</div><div class="line"></div><div class="line">var xLabels = svg.selectAll(&quot;.xLabel&quot;)</div><div class="line">.data(x)</div><div class="line">.enter().append(&quot;text&quot;)</div><div class="line">.text(function(d) &#123; return d; &#125;)</div><div class="line">.attr(&quot;y&quot;, function(d, i) &#123; return i * xGridSize; &#125;)</div><div class="line">.attr(&quot;x&quot;, 0)</div><div class="line">.style(&quot;text-anchor&quot;, &quot;start&quot;)</div><div class="line">.attr(&quot;transform&quot;, &quot;rotate(-90) translate(10, &quot; + xGridSize / 2 + &quot;)&quot;)</div><div class="line">.attr(&quot;class&quot;, function(d, i) &#123; return (&quot;xLabel axis&quot;); &#125;)</div><div class="line">.call(dragX);</div><div class="line"></div><div class="line">//                    var colorScales = []();</div><div class="line">//                    if (options.breaks != null &amp;&amp; options.breaks.length \&gt; 0) &#123;</div><div class="line">//                        for (b in options.colors) &#123;</div><div class="line">//                            colorScales.push(d3.scale.quantile()</div><div class="line">//                                .domain([0, options.buckets - 1, d3.max(scope.data, function(d) &#123; return d.value; &#125;)]())</div><div class="line">//                                .range(options.colors[b]()));</div><div class="line">//                        &#125;</div><div class="line">//                    &#125; else &#123;</div><div class="line">//                        colorScales.push(d3.scale.quantile()</div><div class="line">//                            .domain([0, options.buckets - 1, d3.max(scope.data, function(d) &#123; return d.value; &#125;)]())</div><div class="line">//                            .range(options.colors));</div><div class="line">//                    &#125;</div><div class="line"></div><div class="line">var cards = svg.selectAll(&quot;.square&quot;)</div><div class="line">.data(scope.data);</div><div class="line"></div><div class="line">//                    console.log(scope.data[0]())</div><div class="line"></div><div class="line">cards.enter().append(&quot;rect&quot;)</div><div class="line">.filter(function(d) &#123; return d.value != null &#125;)</div><div class="line">.attr(&quot;x&quot;, function(d) &#123; return d.xIndex * xGridSize; &#125;)</div><div class="line">.attr(&quot;y&quot;, function(d) &#123; return d.yIndex * yGridSize; &#125;)</div><div class="line">.attr(&quot;class&quot;, &quot;square&quot;)</div><div class="line">.attr(&quot;width&quot;, xGridSize)</div><div class="line">.attr(&quot;height&quot;, yGridSize)</div><div class="line">.on(&quot;click&quot;, function(d) &#123; scope.dispatch.click(d); &#125;)</div><div class="line">.on(&quot;mouseover&quot;, function(d) &#123; scope.dispatch.mouseover(d); &#125;)</div><div class="line">.on(&quot;mouseout&quot;, function(d) &#123; scope.dispatch.mouseout(d); &#125;)</div><div class="line">.on(&quot;mousemove&quot;, function(d) &#123; scope.dispatch.mousemove(d); &#125;)</div><div class="line">.style(&quot;fill&quot;, &quot;#ffffff&quot;);</div><div class="line"></div><div class="line">cards.transition().duration(options.duration).style(&quot;fill&quot;, function(d) &#123;</div><div class="line">if (options.customColors &amp;&amp; options.customColors.hasOwnProperty(d.value)) &#123;</div><div class="line">return options.customColors[d.value]();</div><div class="line">&#125; else if (options.breaks != null &amp;&amp; options.breaks.length \&gt; 0) &#123;</div><div class="line">for (b in options.breaks) &#123;</div><div class="line">if (d.xIndex \&lt; options.breaks[b]()) &#123;</div><div class="line">return colorScales[b]()(d.value);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">return colorScales[options.breaks.length]()(d.value);</div><div class="line">&#125; else &#123;</div><div class="line">return colorScales(d.value);</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">cards.exit().remove();</div><div class="line"></div><div class="line">if (options.legend) &#123;</div><div class="line"></div><div class="line">var lenendData = []();</div><div class="line">for(var i=0;i\&lt;11;i++)</div><div class="line">&#123;</div><div class="line">lenendData.push(i/5-1);</div><div class="line">&#125;</div><div class="line"></div><div class="line">var legend = svg.selectAll(&quot;.legend&quot;)</div><div class="line">.data(lenendData)</div><div class="line"></div><div class="line">legend.enter().append(&quot;g&quot;).attr(&quot;class&quot;, &quot;legend&quot;);</div><div class="line"></div><div class="line">legend.append(&quot;rect&quot;)</div><div class="line">.attr(&quot;x&quot;, function(d, i) &#123; return legendElementWidth * i; &#125;)</div><div class="line">.attr(&quot;y&quot;, height * 1.05)</div><div class="line">.attr(&quot;width&quot;, legendElementWidth)</div><div class="line">.attr(&quot;height&quot;, legendElementHeight)</div><div class="line">.style(&quot;fill&quot;, function(d, i) &#123; return colorScales(lenendData[i]()); &#125;)</div><div class="line">.style(&quot;visibility&quot;, function(d, i) &#123; return(i \&lt; options.buckets ? &quot;visible&quot; : &quot;hidden&quot;) &#125;);</div><div class="line"></div><div class="line">legend.append(&quot;text&quot;)</div><div class="line">.attr(&quot;class&quot;, &quot;legendLabel&quot;)</div><div class="line">.text(function(d,i) &#123; if(i%2==0) return lenendData[i]().toFixed(1); &#125;)</div><div class="line">.attr(&quot;x&quot;, function(d, i) &#123; return legendElementWidth * i; &#125;)</div><div class="line">.attr(&quot;y&quot;, height * 1.15)</div><div class="line">.style(&quot;text-anchor&quot;, &quot;middle&quot;);</div><div class="line"></div><div class="line">legend.exit().remove();</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line">scope.$watch(&quot;data&quot;, debounce(function() &#123;</div><div class="line">render();</div><div class="line">&#125;,true),400);</div><div class="line"></div><div class="line">scope.$watch(&quot;order&quot;, debounce(function() &#123;</div><div class="line">render();</div><div class="line">renderRadViz();</div><div class="line">&#125;,true),400);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">//                d3.select(window).on(&quot;resize&quot;, debounce(function() &#123;</div><div class="line">//                    render();</div><div class="line">//                &#125;, 500));</div><div class="line"></div><div class="line">function cal(x)</div><div class="line">&#123;</div><div class="line">if(x\&gt;0)</div><div class="line">return Math.ceil(x);</div><div class="line">else if (x==0) &#123;</div><div class="line">return 0;</div><div class="line">&#125;else&#123;</div><div class="line">return Math.ceil(x);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">function changeLabelOrder(data,i,j)</div><div class="line">&#123;</div><div class="line">var tmpLabel = order[i]();</div><div class="line">order[i]()=order[j]();</div><div class="line">order[j]()=tmpLabel;</div><div class="line">//                    console.log(order);</div><div class="line"></div><div class="line">var iLabel = &quot;&quot;;</div><div class="line">var jLabel = &quot;&quot;;</div><div class="line">for(var k=0;k\&lt;data.length;k++)</div><div class="line">&#123;</div><div class="line">if(data[k]().xIndex===i) &#123;</div><div class="line">iLabel = data[k]().x;</div><div class="line"></div><div class="line">&#125;</div><div class="line">//                        console.log(iLabel);</div><div class="line">&#125;</div><div class="line">for(var k=0;k\&lt;data.length;k++)</div><div class="line">&#123;</div><div class="line">if(data[k]().yIndex===j) &#123;</div><div class="line">jLabel = data[k]().y;</div><div class="line"></div><div class="line">&#125;</div><div class="line">//                        console.log(jLabel);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">for(var k=0;k\&lt; data.length;k++)</div><div class="line">&#123;</div><div class="line">if(data[k]().xIndex===i)&#123;</div><div class="line">data[k]().xIndex=j;</div><div class="line">data[k]().x=jLabel;</div><div class="line">&#125;else if(data[k]().xIndex===j)</div><div class="line">&#123;</div><div class="line">data[k]().xIndex=i;</div><div class="line">data[k]().x=iLabel;</div><div class="line">&#125;</div><div class="line"></div><div class="line">if(data[k]().yIndex===i)&#123;</div><div class="line">data[k]().yIndex=j;</div><div class="line">data[k]().y=jLabel;</div><div class="line">&#125;else if(data[k]().yIndex===j)</div><div class="line">&#123;</div><div class="line">data[k]().yIndex=i;</div><div class="line">data[k]().y=iLabel;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">var n = Math.sqrt(data.length);</div><div class="line">for(var k=0;k\&lt;n;k++)</div><div class="line">&#123;</div><div class="line"></div><div class="line">tmp = data[i+k*n]().value;</div><div class="line">data[i+k*n]().value=data[j+k*n]().value;</div><div class="line">data[j+k*n]().value=tmp;</div><div class="line">&#125;</div><div class="line">for(var k=0;k\&lt;n;k++)</div><div class="line">&#123;</div><div class="line"></div><div class="line">tmp = data[i*n+k]().value;</div><div class="line">data[i*n+k]().value=data[j*n+k]().value;</div><div class="line">data[k+j*n]().value=tmp;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Behavior-in-d3&quot;&gt;&lt;a href=&quot;#Behavior-in-d3&quot; class=&quot;headerlink&quot; title=&quot;Behavior in d3&quot;&gt;&lt;/a&gt;Behavior in d3&lt;/h1&gt;&lt;p&gt;在d3中，行为被设计成了一种组件，可以创建一
      
    
    </summary>
    
      <category term="visualization" scheme="http://zhihaozhang.github.io/categories/visualization/"/>
    
    
      <category term="d3" scheme="http://zhihaozhang.github.io/tags/d3/"/>
    
  </entry>
  
  <entry>
    <title>D3 on Angular</title>
    <link href="http://zhihaozhang.github.io/2014/11/15/D3%20on%20Angular/"/>
    <id>http://zhihaozhang.github.io/2014/11/15/D3 on Angular/</id>
    <published>2014-11-15T05:54:57.000Z</published>
    <updated>2017-09-24T04:15:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Angular与D3"><a href="#Angular与D3" class="headerlink" title="Angular与D3"></a>Angular与D3</h1><p>前面写了几篇分别介绍AngularJS和D3的博客，他们各司其职，都在各自的一亩三分地里备受好评，那么，他们之间能否完成合作，实现共赢呢？这篇博客就来介绍如何将它们结合起来使用，使得我们的可视化能够更具有<strong>模块化</strong>、<strong>方便复用</strong>、<strong>具有交互性</strong>。</p><h1 id="Why-Angular"><a href="#Why-Angular" class="headerlink" title="Why Angular"></a>Why Angular</h1><p>使用Angular做可视化有很多原因，但其中最主要的原因还是<em>directives(指令)</em>。 指令使得做可复用的可视化更容易，可以使得我们做的可视化的时候就像使用内置的HTML那么简单，比如我需要一个热力图（后面写博客怎么做），那么我仅仅需要用\<heatmap\>\</heatmap\>就可以了，想想这种酸爽的滋味吧。即使你不知道热力图是怎么做的，但是你用directive就可以很容易的使用他。</p><p>另外，还有其他的原因，比如我们就可以使用Angular提供的其他内置的指令来工作了，比如使用ng-switch来使得在特定条件下才展示可视化图；如果我有一个数组，用ng-repeat指令可以绘制很多个图，这些都是Angular可以替你完成的。</p><p>最后一个优势是，AngularJS让建立associate更新更容易的。就像之前的associate brush那篇博客写的那样，没有AngularJS，我不得不找一个id来使得Radviz和scatterplot matrix联系起来，不过有了AngularJS，我们只需要处理好scope里数据的更新即可。</p><p>大部分的web框架建议开发者使用MVC设计模式，在Angular中，大部分情况下，V和M是自动联系起来的，这种双向绑定就发生在scope里。只要改变scope里的变量，它的变化会被自动发送到DOM，因此Angular并不是严格意义上的MVC，而是Model,View,Whatever.</p><h1 id="理解directives"><a href="#理解directives" class="headerlink" title="理解directives"></a>理解directives</h1><p>指令通过给我们权限去建立自己的HTML tags来实现复用。在某种程度上，你已经在用指令了，比如\<input\>\</input\>就是一个指令，他们由几个UI元素的组合而成，不过通过html5展现给你的就是一个简单的API，我们不需要知道他们内部是如何实现的。但是我们可以用它在不同的情况下让用户来输入电子邮件，日期，数值等等。。<br>下面我们来完成一个自己的directive,功能让这个指定说hello world吧。先建立自己的模块myApp,然后在这个模块中建立指令helloWorld。<br>如果你熟悉面向对象编程，应该熟悉构造函数，在指令中，构造函数就是<strong>link函数</strong>，这个函数中包含了这个元素出现在HTML时，所有应该发生的事情。<br>restrict有ACME，这些都是Angular的基础，这里不多介绍了，这里我们使用E。完整的代码如下图所示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//  \&lt;html\&gt;</div><div class="line">//  \&lt;head lang=&quot;en&quot;\&gt;</div><div class="line">//    \&lt;meta charset=&quot;UTF-8&quot;\&gt;</div><div class="line">//    \&lt;script src=&quot;./d3.js&quot;\&gt;\&lt;/script\&gt;</div><div class="line">//    \&lt;script src=&quot;./angular.js&quot;\&gt;\&lt;/script\&gt;</div><div class="line">//    \&lt;script src=&quot;./sc.js&quot;\&gt;</div><div class="line">//      var myApp = angular.module(&apos;myApp&apos;,[]());</div><div class="line">//  </div><div class="line">//      myApp.directive(&apos;helloWorld&apos;,function()&#123;</div><div class="line">//  </div><div class="line">//        function link(scope,element,attr)&#123;</div><div class="line">//          element.text=&apos;hello world!&apos;;</div><div class="line">//        &#125;</div><div class="line">//        return &#123;</div><div class="line">//          link:link,</div><div class="line">//          restrict:&apos;E&apos;</div><div class="line">//        &#125;</div><div class="line">//  </div><div class="line">//      &#125;)</div><div class="line">//  </div><div class="line">//    \&lt;/script\&gt;</div><div class="line">//    \&lt;title\&gt;\&lt;/title\&gt;</div><div class="line">//  \&lt;/head\&gt;</div><div class="line">//  \&lt;body ng-app=&quot;myApp&quot;\&gt;</div><div class="line">//    \&lt;hello-world\&gt;hello world!\&lt;/hello-world\&gt;</div><div class="line">//  </div><div class="line">//  </div><div class="line">//  \&lt;/body\&gt;</div><div class="line">//  \&lt;/html\&gt;</div><div class="line"></div></pre></td></tr></table></figure><h1 id="reusable-visualization-directive"><a href="#reusable-visualization-directive" class="headerlink" title="reusable visualization directive"></a>reusable visualization directive</h1><p>上面展示的例子虽然正确，但是却没什么用，这节就完成一个可复用的donut chart指令。首先用d3绘制一个，代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//    \&lt;script\&gt;</div><div class="line">//      var color = d3.scale.category10();</div><div class="line">//      var data =[10,20,30]();</div><div class="line">//      var width =300;</div><div class="line">//      var height = 300;</div><div class="line">//      var min = Math.min(width,height);</div><div class="line">//      var svg = d3.select(&apos;body&apos;).append(&apos;svg&apos;);</div><div class="line">//      var pie = d3.layout.pie().sort(null);</div><div class="line">//  </div><div class="line">//      var arc = d3.svg.arc().outerRadius(min/2*0.9).innerRadius(min/2*0.5);</div><div class="line">//  </div><div class="line">//      svg.attr(&#123;width:width,height:height&#125;);</div><div class="line">//  </div><div class="line">//      var g = svg.append(&apos;g&apos;)</div><div class="line">//          .attr(&apos;transform&apos;,&apos;translate(&apos;+width/2+&apos;,&apos;+height/2+&apos;)&apos;);</div><div class="line">//  </div><div class="line">//      g.selectAll(&apos;path&apos;).data(pie(data))</div><div class="line">//          .enter().append(&apos;path&apos;)</div><div class="line">//          .style(&apos;stroke&apos;,&apos;white&apos;)</div><div class="line">//          .attr(&apos;d&apos;,arc)</div><div class="line">//          .attr(&apos;fill&apos;,function(d,i)&#123;return color(i)&#125;)</div><div class="line">//  </div><div class="line">//  </div><div class="line">//    \&lt;/script\&gt;</div><div class="line"></div></pre></td></tr></table></figure><p>和上面的hello world一样，我们需要在module里设置新的指令,不同之处是将名字改成了donutChart了。在link函数里，我们将上面的d3代码全部拷贝进去，不过有些地方也得<strong>变一下</strong>，我们需要将d3.select(‘body’)改成d3.select(element<a href="">0</a>),从全局的dom改成了相对的。为什么不直接使用element呢？因为element是一个jQuery的selection，不是一个DOM元素。<br>如果顺利，将会得到下面的结果。<br><img src="http://i13.tietuku.cn/bf49b11d65040556.jpg" alt=""></p><p>成功了，我们完成了可视化图的复用！</p><h1 id="Isolate-scope"><a href="#Isolate-scope" class="headerlink" title="Isolate scope"></a>Isolate scope</h1><p>但是聪明的你很快就发现了问题，我们的可视化图无论何时都是一样的，这可不行！我们希望可以自己传一些数据，比如第一个图是1，2，3，4；第二个图是2，3，4，5；这样才勉强可以。<br>为了达到这样的目的，我们需要用一个叫isolate scope的东西。它允许我们使用attribute传递数据到指令中。告诉Angular我们的指令需要有一个isolate scope的方法很简单，我们只需从指令声明的返回处增加一个scope属性即可。 在restrict下面增加一行scope:{data:’=},在link函数中，我们就可以直接用scope.data了。<br>当我们使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">\&lt;bodyng-app=&quot;myApp&quot;ng-init=&quot;ourSharedData=[8,2,9]()&quot;\&gt; </div><div class="line">\&lt;donut-chart data=&quot;ourSharedData&quot;\&gt;\&lt;/donut-chart\&gt; </div><div class="line">\&lt;donut-chart data=&quot;ourSharedData&quot;\&gt;\&lt;/donut-chart\&gt; </div><div class="line">\&lt;donut-chart data=&quot;ourSharedData&quot;\&gt;\&lt;/donut-chart\&gt; </div><div class="line"></div></pre></td></tr></table></figure><br>时候，确实达到了我们想要的效果。</p><p><strong>未完待续…</strong> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Angular与D3&quot;&gt;&lt;a href=&quot;#Angular与D3&quot; class=&quot;headerlink&quot; title=&quot;Angular与D3&quot;&gt;&lt;/a&gt;Angular与D3&lt;/h1&gt;&lt;p&gt;前面写了几篇分别介绍AngularJS和D3的博客，他们各司其职，都在各自的
      
    
    </summary>
    
      <category term="visualization" scheme="http://zhihaozhang.github.io/categories/visualization/"/>
    
    
      <category term="d3" scheme="http://zhihaozhang.github.io/tags/d3/"/>
    
  </entry>
  
  <entry>
    <title>D3 on Angular(2)</title>
    <link href="http://zhihaozhang.github.io/2014/11/15/D3%20on%20Angular(2)/"/>
    <id>http://zhihaozhang.github.io/2014/11/15/D3 on Angular(2)/</id>
    <published>2014-11-15T05:54:57.000Z</published>
    <updated>2017-09-24T04:15:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="More-Dynamic-visualizations"><a href="#More-Dynamic-visualizations" class="headerlink" title="More Dynamic visualizations"></a>More Dynamic visualizations</h1><p>上一篇博客介绍了如何借助Angular来完成一个指令，达到可复用目的，但是似乎依然不够动态，我们不得不提前输入想要展示的数组。<br>Angular的最大的特点是双向数据绑定，我们能否借助这个特性来完成更动态的可视化图呢？让Angular帮我们盯着数据，一旦数据改变了，就更新DOM元素。这一切都是Angular帮我们完成的，我们唯一需要做的是指定数据和DOM元素之间的关系，不需要写很多的代码。</p><h1 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h1><p>先来用一个简单的例子来展示一下Angular帮我们完成的双向数据绑定，这里用一个简单的例子来展示一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//\&lt;body ng-app\&gt;</div><div class="line">//\&lt;input type=&quot;range&quot; ng-model=&quot;ourRangeValue&quot;\&gt; </div><div class="line">//\&lt;input type=&quot;range&quot; ng-model=&quot;ourRangeValue&quot;\&gt;</div><div class="line">// \&lt;input type=&quot;range&quot; ng-model=&quot;ourRangeValue&quot;\&gt; </div><div class="line">//\&lt;input type=&quot;range&quot; ng-model=&quot;ourRangeValue&quot;\&gt;</div><div class="line">//\&lt;/body\&gt;</div><div class="line"></div></pre></td></tr></table></figure><p>上面的例子展示了四根sliders,当我们任意滑动一个slider，其他的三个也会跟着一起动。<br>这种自动更新发生在叫做scope的变量中，上面的例子中，ng-model指令在scope创建了一个叫ourRangeValue的变量，而且当ourRangeValue改变的时候，会处理\<input\>的更新。如果我们在一个新的DOM元素上创建一个scope，它所有的子DOM元素都可以拿这个scope，最顶层的scope是root scope。最简单的创建scope的方法是创建一个controller（控制器）。</input\></p><h2 id="两种变体"><a href="#两种变体" class="headerlink" title="两种变体"></a>两种变体</h2><p>变体1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//\&lt;body ng-app=&quot;myApp&quot;\&gt;</div><div class="line">//  \&lt;div ng-controller=&quot;HelloController&quot;\&gt;</div><div class="line">//    \&lt;input type=&quot;range&quot; ng-model=&quot;ourRangeValue&quot;\&gt;</div><div class="line">//    \&lt;input type=&quot;range&quot; ng-model=&quot;ourRangeValue&quot;\&gt;</div><div class="line">//  \&lt;/div\&gt;</div><div class="line">//  \&lt;div ng-controller=&quot;HelloController&quot;\&gt;</div><div class="line">//    \&lt;input type=&quot;range&quot; ng-model=&quot;ourRangeValue&quot;\&gt;</div><div class="line">//    \&lt;input type=&quot;range&quot; ng-model=&quot;ourRangeValue&quot;\&gt;</div><div class="line">//  \&lt;/div\&gt;</div><div class="line">//\&lt;/body\&gt;</div><div class="line"></div></pre></td></tr></table></figure><p>变体2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//\&lt;body ng-app=&quot;myApp&quot; ng-init=&quot;foobar = &#123; value: 50 &#125;&quot;\&gt;</div><div class="line">//  \&lt;div ng-controller=&quot;HelloController&quot;\&gt;</div><div class="line">//    \&lt;input type=&quot;range&quot; ng-model=&quot;foobar.value&quot;\&gt;</div><div class="line">//    \&lt;input type=&quot;range&quot; ng-model=&quot;foobar.value&quot;\&gt;</div><div class="line">//  \&lt;/div\&gt;</div><div class="line">//  \&lt;div ng-controller=&quot;HelloController&quot;\&gt;</div><div class="line">//    \&lt;input type=&quot;range&quot; ng-model=&quot;foobar.value&quot;\&gt;</div><div class="line">//    \&lt;input type=&quot;range&quot; ng-model=&quot;foobar.value&quot;\&gt;</div><div class="line">//  \&lt;/div\&gt;</div><div class="line">//    \&lt;/body\&gt;</div><div class="line"></div></pre></td></tr></table></figure><p>这两种变体格各自的结果是什么，这应该是Angular的基础知识，大家可以自己去尝试一下。第一种情况改变第一个HelloController的foobar时候，会创建一个新的scope1.foobar替代rootScope.foobar。而第二种情况，是使用了另一个object包装了一下，这样就可以避免覆盖掉父scope的属性。这样我们并没有指定一个新的值给foobar，所以子scope不需要重新创建新的object。</p><h1 id="Make-visualizations-dynamic-with-watch"><a href="#Make-visualizations-dynamic-with-watch" class="headerlink" title="Make visualizations dynamic with $watch"></a>Make visualizations dynamic with $watch</h1><h2 id="scope-watch"><a href="#scope-watch" class="headerlink" title="$scope.watch"></a>$scope.watch</h2><p>使用Angular内置的指令使得绑定一个值的变化到另一个视图中的变化变得异常简单，不过对于稍微复杂点的可视化元素，我们就需要剪子自己的指令并监听scope内值的变化并且更新他们的内容。Angular里监听的函数是$scope.watch函数。<br>下面展示一个简单的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">\&lt;!-- scope.$watch(&apos;progress&apos;,function(progress)&#123;  </div><div class="line"> rect.attr(&#123;x: 0, y: 0, width: width \* progress / 100, height: height &#125;);  &#125;);  --\&gt;</div><div class="line"></div></pre></td></tr></table></figure><p>每次当slider被拖动，下面的进度条会跟着动，因为此时scope.$watch()函数被触发了。</p><h2 id="一个更复杂的例子"><a href="#一个更复杂的例子" class="headerlink" title="一个更复杂的例子"></a>一个更复杂的例子</h2><p>我们将使用上一篇博客中使用的donut chart的例子。一种错误的做法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//\&lt;body ng-app=&quot;myApp&quot; ng-init=&quot;chart=[10, 20, 30]()&quot;\&gt;</div><div class="line">//  \&lt;input type=&quot;range&quot; ng-model=&quot;chart[0]()&quot;\&gt;</div><div class="line">//  \&lt;br\&gt;</div><div class="line">//  \&lt;input type=&quot;range&quot; ng-model=&quot;chart[1]()&quot;\&gt;</div><div class="line">//  \&lt;br\&gt;</div><div class="line">//  \&lt;input type=&quot;range&quot; ng-model=&quot;chart[2]()&quot;\&gt;</div><div class="line">//  \&lt;br\&gt;</div><div class="line">//  \&lt;donut-chart data=&quot;chart&quot;\&gt;\&lt;/donut-chart\&gt;</div><div class="line"></div></pre></td></tr></table></figure><p>好像没有按照我们预想的去做，因为没有watchdata scope变量的变化，正确的做法是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">\&lt;!--  scope.$watch(&apos;data&apos;,function(data)&#123;</div><div class="line">   console.log(&quot;an element within `data` changed!&quot;);</div><div class="line">   console.log(data);</div><div class="line"> &#125;,true);</div><div class="line"> --\&gt;</div><div class="line"></div></pre></td></tr></table></figure><p>一个很大的不同是我们$watch函数的第三个参数是true，true告诉了watch函数，如果数组里面的值发生了改变也会触发，false不会触发，因为数组还是3个值，它从某种意义上来说并没变。<br>完整的代码为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//\&lt;!DOCTYPE html\&gt;</div><div class="line">//\&lt;html\&gt;</div><div class="line">//\&lt;head\&gt;</div><div class="line">//  \&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.2.10/angular.min.js&quot;\&gt;\&lt;/script\&gt;</div><div class="line">//  \&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot; charset=&quot;utf-8&quot;\&gt;\&lt;/script\&gt;</div><div class="line">//\&lt;/head\&gt;</div><div class="line">//\&lt;body ng-app=&quot;myApp&quot; ng-init=&quot;chart=[10, 20, 30]()&quot;\&gt;</div><div class="line">//  \&lt;input type=&quot;range&quot; ng-model=&quot;chart[0]()&quot;\&gt;</div><div class="line">//  \&lt;br\&gt;</div><div class="line">//  \&lt;input type=&quot;range&quot; ng-model=&quot;chart[1]()&quot;\&gt;</div><div class="line">//  \&lt;br\&gt;</div><div class="line">//  \&lt;input type=&quot;range&quot; ng-model=&quot;chart[2]()&quot;\&gt;</div><div class="line">//  \&lt;br\&gt;</div><div class="line">//  \&lt;donut-chart data=&quot;chart&quot;\&gt;\&lt;/donut-chart\&gt;</div><div class="line">//  \&lt;script\&gt;</div><div class="line">//    var myApp = angular.module(&apos;myApp&apos;, []());</div><div class="line">//    myApp.directive(&apos;donutChart&apos;, function()&#123;</div><div class="line">//      function link(scope, el, attr)&#123;</div><div class="line">//        var color = d3.scale.category10();</div><div class="line">//        var data = scope.data;</div><div class="line">//        var width = 300;</div><div class="line">//        var height = 300;</div><div class="line">//        var min = Math.min(width, height);</div><div class="line">//        var svg = d3.select(el[0]()).append(&apos;svg&apos;);</div><div class="line">//        var pie = d3.layout.pie().sort(null);</div><div class="line">//        var arc = d3.svg.arc()</div><div class="line">//          .outerRadius(min / 2 \* 0.9)</div><div class="line">//          .innerRadius(min / 2 \* 0.5);</div><div class="line">//  </div><div class="line">//        svg.attr(&#123;width: width, height: height&#125;);</div><div class="line">//        var g = svg.append(&apos;g&apos;)</div><div class="line">//          // center the donut chart</div><div class="line">//          .attr(&apos;transform&apos;, &apos;translate(&apos; + width / 2 + &apos;,&apos; + height / 2 + &apos;)&apos;);</div><div class="line">//  </div><div class="line">//        // add the \&lt;path\&gt;s for each arc slice</div><div class="line">//        var arcs = g.selectAll(&apos;path&apos;).data(pie(data))</div><div class="line">//          .enter().append(&apos;path&apos;)</div><div class="line">//            .style(&apos;stroke&apos;, &apos;white&apos;)</div><div class="line">//            .attr(&apos;fill&apos;, function(d, i)&#123; return color(i) &#125;);</div><div class="line">//</div><div class="line">//        scope.$watch(&apos;data&apos;, function()&#123;</div><div class="line">//          arcs.data(pie(data)).attr(&apos;d&apos;, arc);</div><div class="line">//        &#125;, true);</div><div class="line">//      &#125;</div><div class="line">//      return &#123;</div><div class="line">//        link: link,</div><div class="line">//        restrict: &apos;E&apos;,</div><div class="line">//        scope: &#123; data: &apos;=&apos; &#125;</div><div class="line">//      &#125;;</div><div class="line">//    &#125;);</div><div class="line">//  \&lt;/script\&gt;</div><div class="line">//\&lt;/body\&gt;</div><div class="line">//\&lt;/html\&gt;</div><div class="line"></div></pre></td></tr></table></figure><p>我们的Donut chart看起来不错，会随着slider的变化而发生变化了，但是一直只有三个slider，这稍微有点不爽。下面我们就增加两个按钮，一个是增加一个变量，一个是减少一个变量。其实呢，就是给chart数组里push一个数或者pop出一个数。而为了让slider的数目也随着数组的变化而变化，这就需要借助ng-repeat指令。<br>\<inputtype="range" ng-model="slice" ng-repeat="slice in chart" \=""><br>至此我们完成了所有的任务,完整代码如下。</inputtype="range"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//\&lt;!DOCTYPE html\&gt;</div><div class="line">//\&lt;html\&gt;</div><div class="line">//\&lt;head\&gt;</div><div class="line">//  \&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.2.10/angular.js&quot;\&gt;\&lt;/script\&gt;</div><div class="line">//  \&lt;script src=&quot;http://d3js.org/d3.v3.js&quot; charset=&quot;utf-8&quot;\&gt;\&lt;/script\&gt;</div><div class="line">//\&lt;/head\&gt;</div><div class="line">//\&lt;body ng-app=&quot;myApp&quot; ng-init=&quot;chart=[&#123;value: 10&#125;, &#123;value: 20&#125;, &#123;value: 30&#125;]()&quot;\&gt;</div><div class="line">//  \&lt;donut-chart data=&quot;chart&quot; style=&quot;float:right&quot;\&gt;\&lt;/donut-chart\&gt;</div><div class="line">//  \&lt;button ng-click=&quot;chart.push(&#123;value: 10&#125;)&quot;\&gt;add slice\&lt;/button\&gt;</div><div class="line">//  \&lt;button ng-click=&quot;chart.pop()&quot;\&gt;remove slice\&lt;/button\&gt;</div><div class="line">//  \&lt;input type=&quot;range&quot; ng-model=&quot;slice.value&quot; ng-repeat=&quot;slice in chart track by $index&quot;\&gt;</div><div class="line">//  \&lt;script\&gt;</div><div class="line">//    var myApp = angular.module(&apos;myApp&apos;, []());</div><div class="line">//    myApp.directive(&apos;donutChart&apos;, function()&#123;</div><div class="line">//      function link(scope, el, attr)&#123;</div><div class="line">//        var color = d3.scale.category10();</div><div class="line">//        var width = 200;</div><div class="line">//        var height = 200;</div><div class="line">//        var min = Math.min(width, height);</div><div class="line">//        var svg = d3.select(el[0]()).append(&apos;svg&apos;);</div><div class="line">//        var pie = d3.layout.pie().sort(null);</div><div class="line">//        var arc = d3.svg.arc()</div><div class="line">//          .outerRadius(min / 2 \* 0.9)</div><div class="line">//          .innerRadius(min / 2 \* 0.5);</div><div class="line">//</div><div class="line">//        pie.value(function(d)&#123; return d.value; &#125;);</div><div class="line">//  </div><div class="line">//        svg.attr(&#123;width: width, height: height&#125;);</div><div class="line">//        var g = svg.append(&apos;g&apos;)</div><div class="line">//          // center the donut chart</div><div class="line">//          .attr(&apos;transform&apos;, &apos;translate(&apos; + width / 2 + &apos;,&apos; + height / 2 + &apos;)&apos;);</div><div class="line">//  </div><div class="line">//        // add the \&lt;path\&gt;s for each arc slice</div><div class="line">//        var arcs = g.selectAll(&apos;path&apos;);</div><div class="line">//</div><div class="line">//        scope.$watch(&apos;data&apos;, function(data)&#123;</div><div class="line">//          arcs = arcs.data(pie(data));</div><div class="line">//          arcs.enter().append(&apos;path&apos;)</div><div class="line">//            .style(&apos;stroke&apos;, &apos;white&apos;)</div><div class="line">//            .attr(&apos;fill&apos;, function(d, i)&#123; return color(i) &#125;);</div><div class="line">//          arcs.exit().remove();</div><div class="line">//          arcs.attr(&apos;d&apos;, arc);</div><div class="line">//        &#125;, true);</div><div class="line">//      &#125;</div><div class="line">//      return &#123;</div><div class="line">//        link: link,</div><div class="line">//        restrict: &apos;E&apos;,</div><div class="line">//        scope: &#123; data: &apos;=&apos; &#125;</div><div class="line">//      &#125;;</div><div class="line">//    &#125;);</div><div class="line">//  \&lt;/script\&gt;</div><div class="line">//\&lt;/body\&gt;</div><div class="line">//\&lt;/html\&gt;</div><div class="line"></div></pre></td></tr></table></figure><p>基础知识就介绍到这里，下面会介绍一个稍微难一些的例子。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;More-Dynamic-visualizations&quot;&gt;&lt;a href=&quot;#More-Dynamic-visualizations&quot; class=&quot;headerlink&quot; title=&quot;More Dynamic visualizations&quot;&gt;&lt;/a&gt;More 
      
    
    </summary>
    
      <category term="visualization" scheme="http://zhihaozhang.github.io/categories/visualization/"/>
    
    
      <category term="d3" scheme="http://zhihaozhang.github.io/tags/d3/"/>
    
  </entry>
  
  <entry>
    <title>冷门但实用的d3.js内置函数</title>
    <link href="http://zhihaozhang.github.io/2014/11/15/%E5%86%B7%E9%97%A8%E4%BD%86%E5%AE%9E%E7%94%A8%E7%9A%84d3.js%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"/>
    <id>http://zhihaozhang.github.io/2014/11/15/冷门但实用的d3.js内置函数/</id>
    <published>2014-11-15T05:54:57.000Z</published>
    <updated>2016-06-07T03:12:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在d3.js的API文档中，提供了很多内置的函数，但是有些很有用的内置函数却被无情的忽略了，这篇博客就来整理整理这些被遗忘却很实用的函数。希望整理过后，他们不再被遗忘。</p><h1 id="selection-classed-name-【value】"><a href="#selection-classed-name-【value】" class="headerlink" title="selection.classed(name,【value】)"></a>selection.classed(name,【value】)</h1><p>value参数可选，如果没有指定，则返回与name参数匹配的第一个非空元素是否绑定了指定的CSS类，true表示绑定，false表示未绑定。如果value指定了的话，就是为selection添加/删除CSS类。<br>这点与selection.attr(name,【value】)非常类似，但是相比而言，就冷门的多，恐怕没有多少人不知道selection.attr(name,【value】)，但是有很多人真的不知道selection.classed(name,【value】)。<br>这个函数很实用，比如鼠标进入某些点，让这些点高亮以表示强调，但是移出去之后，让他们回复原来的样式就可以用这个函数，免去了重新设置样式的麻烦，甚至有时候恢复原来样式的时候，还需要判断，就更麻烦了。</p><h1 id="transition-filter-selector"><a href="#transition-filter-selector" class="headerlink" title="transition.filter(selector)"></a>transition.filter(selector)</h1><p>过滤也有过渡，这点可能很多人都忽略了，比如设置动画结束时，索引为奇数的元素旋转30度。甚至可以自己定义规则，如第5、10、15个元素改变，其他的不变。</p><h1 id="d3-interpolate-a-b"><a href="#d3-interpolate-a-b" class="headerlink" title="d3.interpolate(a,b)"></a>d3.interpolate(a,b)</h1><p>返回一个介于a,b之间的默认插值器，插值器的类型取决于b的类型。<br>1）如果b是颜色类型，那么返回的是interpolateRgb插值器<br>2）如果是字符串类型，则返回interpolateString插值器<br>3）如果是数组类型，则返回interpolateArray插值器<br>4）如果是对象类型，且不能强制转换成字符串类型，则返回interpolateObject插值器<br>5）否则，返回interpolateNumber插值器</p><h1 id="数组相关API"><a href="#数组相关API" class="headerlink" title="数组相关API"></a>数组相关API</h1><p>使用d3时，会有大量的数组操作，如果能合理运用d3提供的数组相关的函数，将会使得工作效率大大提高。</p><h2 id="d3-ascending-a-b"><a href="#d3-ascending-a-b" class="headerlink" title="d3.ascending(a,b)"></a>d3.ascending(a,b)</h2><p>如果a\<b,返回-1，a\>b，返回1，如果a=b,返回0.<br>在可视化元素需要有序的时候，这个函数很有用，可以帮助我们排好序。</b,返回-1，a\></p><h2 id="d3-min-d3-max-d3-extent"><a href="#d3-min-d3-max-d3-extent" class="headerlink" title="d3.min(),d3.max(),d3.extent()"></a>d3.min(),d3.max(),d3.extent()</h2><p>前两个函数知道的人应该不少，但是最后一个却相对冷门，它可以直接返回数组自然排序的最小值和最大值，省的同时调用前面两个函数了。</p><h2 id="d3-sum-d3-mean-d3-median-d3-quantile"><a href="#d3-sum-d3-mean-d3-median-d3-quantile" class="headerlink" title="d3.sum(),d3.mean(),d3.median(),d3.quantile()"></a>d3.sum(),d3.mean(),d3.median(),d3.quantile()</h2><p>基本的求和、平均数、中位数、p分位数，都帮你实现好了，之前还傻乎乎的自己去实现了，虽然不难，但是代码会很难看。</p><h2 id="d3-shuffle-array"><a href="#d3-shuffle-array" class="headerlink" title="d3.shuffle(array)"></a>d3.shuffle(array)</h2><p>用Fisher-Yates shuffle算法把传入的数组随机排序。这样想得到乱序的时候会不会比较高大上呢？嘿嘿。</p><h2 id="d3-keys-object-d3-values-object"><a href="#d3-keys-object-d3-values-object" class="headerlink" title="d3.keys(object),d3.values(object)"></a>d3.keys(object),d3.values(object)</h2><p>keys返回一个包含指定对象(关联数组)中所有属性名称的数组。这点很有用，比如用d3.csv()读文件的时候，想要滤掉一些无关的dimension，比如id等等，用这个函数就很有用。</p><h2 id="d3-map-d3-set"><a href="#d3-map-d3-set" class="headerlink" title="d3.map(),d3.set()"></a>d3.map(),d3.set()</h2><p>映射与集合是很常见的数据结构，但是不是所有js版本中都有默认的实现的，但是d3提供了。昨天在做项目的时候就遇到了这个问题，最后是借用了d3提供的map与set解决了。</p><h2 id="d3-merge（arrays）"><a href="#d3-merge（arrays）" class="headerlink" title="d3.merge（arrays）"></a>d3.merge（arrays）</h2><p>合并指定参数arrays为一个数组，与内置的concat类似，不过处理二维数组的时候，它会更方便。</p><h2 id="d3-zip-arrays-，d3-pairs-arrays"><a href="#d3-zip-arrays-，d3-pairs-arrays" class="headerlink" title="d3.zip(arrays)，d3.pairs(arrays)"></a>d3.zip(arrays)，d3.pairs(arrays)</h2><p>d3.zip(【1，2】，【3，4，5】)返回【【1，3】，【2，4】】有啥用自己体会。<br>d3.pairs(【1，2，3，4】)返回【【1，2】，【2，3】，【3，4】】</p><h2 id="d3-transpose-matrix"><a href="#d3-transpose-matrix" class="headerlink" title="d3.transpose(matrix)"></a>d3.transpose(matrix)</h2><p>转置二维矩阵用的。</p><h1 id="brush"><a href="#brush" class="headerlink" title="brush"></a>brush</h1><p>作为一个可视化系统，怎么能没有brush！实现brush的功能非常简单，构造刷子之前，需要制定x/y比例尺和空的范围。绘制的刷子可以重新调整大小和位置。<br>关于brush的使用，请看前面的博客（associate brush）。</p><h1 id="时间的计数"><a href="#时间的计数" class="headerlink" title="时间的计数"></a>时间的计数</h1><p>d3.time.dayOfYear(date) 返回参数date是一年里的第几天，1月1日是第0天。<br>weekOfYear….等等函数也是有的，需要用的时候可以查查API，省的写闰年的判断，嘿嘿。</p><h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><p>Stack(layers【,index】),让我记忆最深，之前做一个项目的时候，就不知道有这东西存在，愣是自己实现了一遍，麻烦不说,对不对可能还一定.</p><h1 id="地理"><a href="#地理" class="headerlink" title="地理"></a>地理</h1><p>地理的API这块我很陌生,没有什么机会做这方面的项目,所以用的很少,后面有机会再来补充.</p><h1 id="几何"><a href="#几何" class="headerlink" title="几何"></a>几何</h1><p>同样陌生的还有几何这部分的内容,比如四叉树/凸包/多边形/泰森多边形,记住这部分有就可以了,后面用过之后再来补充.</p><h1 id="行为"><a href="#行为" class="headerlink" title="行为"></a>行为</h1><p>由zoom和drag两部分组成，很重要却很简单的内容，希望好好掌握。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在d3.js的API文档中，提供了很多内置的函数，但是有些很有用的内置函数却被无情的忽略了，这篇博客就来整理整理这些被遗忘却很实用的函数。希
      
    
    </summary>
    
      <category term="visualization" scheme="http://zhihaozhang.github.io/categories/visualization/"/>
    
    
      <category term="d3" scheme="http://zhihaozhang.github.io/tags/d3/"/>
    
  </entry>
  
  <entry>
    <title>浅谈d3.js中强制异步文件读取同步的四种方法</title>
    <link href="http://zhihaozhang.github.io/2014/11/15/%E6%B5%85%E8%B0%88d3.js%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E7%9A%84%E5%A4%84%E7%90%86/"/>
    <id>http://zhihaozhang.github.io/2014/11/15/浅谈d3.js中的异步文件读取的处理/</id>
    <published>2014-11-15T05:54:57.000Z</published>
    <updated>2017-09-24T04:14:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h1><p>在使用d3.js时，我们经常会使用d3.csv()或者d3.json()函数来从文件中读取出数据，不幸的是，偶尔代码的结果并不是我们预料的那样。习惯了过程式编程的我开始的时候也是这样，最让人头疼的是javascript并不会告诉你问题出在哪里了。我第一次遇到这个问题的时候，找了半天bug，确定代码主体部分没有问题之后，我只能开始使用console.log()将变量一个一个的输出到控制台里。<br>第一次遇到这个问题时的图片是这样的：<br><img src="http://i13.tietuku.cn/b620500d4f1d6bb2.jpg" alt=""><br>问题出在第72行和第75行，中间几行完全没有对ordertxt进行操作，但是最后的结果就是和预想的输出不吻合，后来找了个其他方法把这个问题给解决了，今天又遇到了类似的这个问题，就下决心来拔掉这根刺。</p><h1 id="试验"><a href="#试验" class="headerlink" title="试验"></a>试验</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">\&lt;script\&gt;</div><div class="line"></div><div class="line">console.log(&quot;before csv1 &quot;);</div><div class="line">d3.csv(&quot;flowers.csv&quot;, function(data) &#123;console.log(data)&#125;);</div><div class="line">console.log(&quot;before csv2&quot;);</div><div class="line">d3.csv(&quot;flowers.csv&quot;,function(error,data2) &#123;console.log(error, data2)&#125;);</div><div class="line"></div><div class="line">\&lt;/script\&gt;</div><div class="line"></div></pre></td></tr></table></figure><p>believe it or not,上面的代码将产生下面图中的输出结果，因为javascript的<strong>异步特性</strong>。说到异步，大部分时候是让人开心的，但偶尔也会令人头疼，至少在这里，就是令人头疼。</p><p><img src="http://i12.tietuku.cn/1b8435a64150532d.jpg" alt=""></p><h1 id="解决方法1"><a href="#解决方法1" class="headerlink" title="解决方法1"></a>解决方法1</h1><p>第一次遇到这个问题的时候，我巧妙的绕开了这个问题，使用的方法是：我把数据的处理放在了d3.csv(“flowers.csv”,function(data){dealWithData()…})回调函数里面，这样数据的处理就和d3的读文件操作变成了绑在一根绳上的蚂蚱了，要么一起执行完，要么都不执行。<br>貌似世界和平了，但是今天下午又遇到了这个问题，而且数据的变化是随时随地的，可不是和上一次遇到的那样，所有会发生的变化都可以预先写成代码的。于是我开始了对解决方法的苦苦追寻。</p><h1 id="解决方法2"><a href="#解决方法2" class="headerlink" title="解决方法2"></a>解决方法2</h1><p>第二种方法是借助一些helper类库(queue.js)来强制数据在加载完成之后才去触发相应的操作。这种方法是我在网上看到的，并没有去亲自试过，也许会成功，但是对于我们会变化的数据，不能提前将处理逻辑写出代码，这种方法还是不合格的。</p><h1 id="解决方法3"><a href="#解决方法3" class="headerlink" title="解决方法3"></a>解决方法3</h1><p>第三种方法是在stack overflow里查到的，试了一下是可以的，他这里用的是d3.text()函数，将文件先load进来，然后再使用d3.csv.parse或者d3.csv.parseRows，这样就会是同步的了。参考文末的Reference 3的实现。</p><h1 id="解决方法4"><a href="#解决方法4" class="headerlink" title="解决方法4"></a>解决方法4</h1><p>方法4是我自己想出来的，最近几天一直在做angular和d3结合在一起的工作，我就在想能否借助angular来帮助我们完成呢？万幸，Angular中确实有这么一个函数，似乎就是为这个问题量身定做的，且解决了前面的方法都没有解决的数据后期动态变化的问题。这个函数就是<strong>$watch</strong>函数。</p><h2 id="watch列表"><a href="#watch列表" class="headerlink" title="$watch列表"></a>$watch列表</h2><p>每当我们在视图中追踪一个事件时，会给它注册一个回调函数，然后希望在页面中触发该事件时调用这个回调函数。比如AngularJS中最令人印象深刻的双向绑定，在input中输入一个字母，有着相同ng-model的变量就会跟着input的输入而发生改变。<br>发生这一变化的原因是我们把UI中的输入字段绑定给了$scope.name属性，为了更新这个视图，Angular需要<strong>追踪变化</strong>，是通过给$watch列表添加一个监控函数做到这一点的。</p><h2 id="脏检查"><a href="#脏检查" class="headerlink" title="脏检查"></a>脏检查</h2><p>脏检查是一个简单的过程，可归结为一个非常基础的概念：检查值是否发生了变化，而整个应用还没同步该变化。<br>Angular会遍历$watch列表，只要有任何的值发生比变化，应用将会退回到$watch循环中，直到检测到不在发生任何变化。</p><h2 id="watch"><a href="#watch" class="headerlink" title="$watch"></a>$watch</h2><p>$scope对象上的$watch方法会给Angular事件循环内的每个$digest调用装配一个脏检查，如果在检测到变化，Angular总是会返回$digest循环。<br>$watch函数本身接受两个必要参数和一个可选的参数，第一个参数是watch的对象，第二个参数是<strong>回调函数</strong>，一旦watch的对象变了的时候触发；可选的参数是一个bool值，告诉Angular是否检查<strong>严格相等</strong>。<br>关于回调函数和严格相等，还有一些想说的。</p><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>我一直是这么理解回调函数的，研究生的导师会分配给每个研究生活去干，而他自己也有自己的事情，如果给某个研究生安排的活他做好了，就过来给他说一声，导师负责汇总，将活写成论文发表出去。这其实就是回调函数工作的原理。<br>当然导师不可能在这边等着研究生干活，自己什么都不干；或者自己什么都干了，也没研究生什么事了。</p><h3 id="严格相等"><a href="#严格相等" class="headerlink" title="严格相等"></a>严格相等</h3><p>比如有一个数组，a=【1，2，3】，后面修改了a【0】=2,在AngularJS看来，这个数组并没有发生变化，因为还是3个变量，而如果从严格意义上来说，它已经发生了变化，这就是严格相等和相等的不同，在javascript中，也有==和===的区别。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>写到这里，大家应该知道该怎么做了，即调用$watch函数来观测我们需要关注的data，每当发生变化的时候，就根据新的data，重新绘制图标。因此，我们最好将render的过程抽象成一个函数，方便我们后期调用。<br>比如，我们想要观测data数组的变化，并且根据它的变化来重新绘制图片。那么我们的代码实现就应该像下面这样。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> scope.$watch(&quot;data&quot;, function() &#123;</div><div class="line">render();</div><div class="line">//render函数是绘制的过程，换成自己的即可。</div><div class="line">&#125;,true);</div><div class="line"></div></pre></td></tr></table></figure></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li>D3.js加载csv和json数据 <a href="http://www.bubuko.com/infodetail-942138.html" target="_blank" rel="external">http://www.bubuko.com/infodetail-942138.html</a></li><li>d3: make the d3.csv function syncronous <a href="http://stackoverflow.com/questions/19899005/d3-make-the-d3-csv-function-syncronous" target="_blank" rel="external">http://stackoverflow.com/questions/19899005/d3-make-the-d3-csv-function-syncronous</a></li><li>read csv/tsv with no header line in D3 <a href="http://stackoverflow.com/questions/13870265/read-csv-tsv-with-no-header-line-in-d3" target="_blank" rel="external">http://stackoverflow.com/questions/13870265/read-csv-tsv-with-no-header-line-in-d3</a></li><li>《AngularJS权威教程》</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题提出&quot;&gt;&lt;a href=&quot;#问题提出&quot; class=&quot;headerlink&quot; title=&quot;问题提出&quot;&gt;&lt;/a&gt;问题提出&lt;/h1&gt;&lt;p&gt;在使用d3.js时，我们经常会使用d3.csv()或者d3.json()函数来从文件中读取出数据，不幸的是，偶尔代码的结果并
      
    
    </summary>
    
      <category term="visualization" scheme="http://zhihaozhang.github.io/categories/visualization/"/>
    
    
      <category term="d3" scheme="http://zhihaozhang.github.io/tags/d3/"/>
    
  </entry>
  
  <entry>
    <title>Build reusable visualization using d3.js and AngularJS</title>
    <link href="http://zhihaozhang.github.io/2014/11/15/Build%20reuseable%20visualization%20using%20d3.js%20and%20AngularJS/"/>
    <id>http://zhihaozhang.github.io/2014/11/15/Build reuseable visualization using d3.js and AngularJS/</id>
    <published>2014-11-15T05:54:57.000Z</published>
    <updated>2017-09-24T04:15:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>前面两篇博客介绍了如何借助angular，让我们的可视化图能够更有<strong>模块化</strong>、<strong>方便复用</strong>、<strong>具有交互性</strong>，不过前面的博客只介绍了基本的原理以及最简单的图，在这篇博客中，我们来一起绘制一个相对复杂一些的热力图，最终的效果如下图。<br><img src="http://i13.tietuku.cn/5b566b315d0593c2.jpg" alt=""><br>这个热力图主要是用来展现维度与维度之间的相关性的，而相关性在0-1之间。千万不要小看这个热力图，图中的每一个元素，甚至每一个字都是绘制出来的，完成这个看似简单的热力图大概需要<strong>350行代码</strong>。</p><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>我们想要用热力图的时候呢，希望能像内置的html DOM元素一样使用，比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">\&lt;heatmap\&gt;\&lt;/heatmap\&gt;</div><div class="line"></div><div class="line">//如果我们能指定一些属性就更好了，比如下面。</div><div class="line"></div><div class="line">\&lt;heatmap class=&quot;chart&quot; data=&quot;data&quot; dispatch=&quot;dispatch&quot; options=&quot;options&quot;\&gt;\&lt;/heatmap\&gt;</div></pre></td></tr></table></figure><br>不要着急我们一步一步来完成。</p><h2 id="create-directive-using-Angular"><a href="#create-directive-using-Angular" class="headerlink" title="create directive using Angular"></a>create directive using Angular</h2><p>前面的博客里已经介绍过了如何使用Angular来构造指令了，主要是借助angular.directive(‘heatmap’,function(){…})来完成的，主体框架如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">angular.module(&quot;heatmap&quot;, []()).directive(&quot;heatmap&quot;,</div><div class="line">function() &#123;</div><div class="line">return &#123;</div><div class="line">restrict: &quot;E&quot;,</div><div class="line">replace: true,</div><div class="line">scope: &#123;</div><div class="line">data: &quot;=&quot;,</div><div class="line">options: &quot;=?&quot;,</div><div class="line">dispatch: &quot;=?&quot;</div><div class="line">&#125;,</div><div class="line">transclude: false,</div><div class="line">template: &quot;\&lt;div\&gt;\&lt;/div\&gt;&quot;,</div><div class="line">link: function(scope, element) &#123;</div><div class="line">…</div><div class="line">//暂时先不贴出来，后面详解。</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;）</div><div class="line"></div></pre></td></tr></table></figure></p><h2 id="link-function"><a href="#link-function" class="headerlink" title="link function"></a>link function</h2><p>前面已经提过了，link function类似于面向对象编程中的构造(constructor)函数,在个函数里，我们需要用d3.js来绘制所需的所有视觉元素。首先我们需要一些数据。</p><h3 id="data"><a href="#data" class="headerlink" title="data"></a>data</h3><p>数据是维度与维度之间的相关性，因此，对于每一个数据，我们需要知道的有：维度1，维度2，维度1与维度2之间的相关性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">\&lt;script\&gt;</div><div class="line"></div><div class="line">var s =[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;,&quot;g&quot;,&quot;h&quot;,&quot;i&quot;,&apos;j&apos;,&apos;k&apos;,&apos;l&apos;]();</div><div class="line">var data = []();</div><div class="line">for(var i=0;i\&lt; s.length;i++)</div><div class="line">for(var j=0;j\&lt; s.length;j++)</div><div class="line">&#123;</div><div class="line">data.push(&#123;&apos;y&apos;:s[j](),&apos;x&apos;:s[i](),&quot;value&quot;:Math.random()&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">\&lt;/script\&gt;</div><div class="line"></div></pre></td></tr></table></figure><br>这样我们得到的数据将会是这样的结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">data = [</div><div class="line">]()&#123;</div><div class="line">&quot;y&quot;: &quot;a&quot;,</div><div class="line">&quot;x&quot;: “a”,</div><div class="line">&quot;value&quot;: 1.0</div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line">&quot;y&quot;: &quot;a&quot;,</div><div class="line">&quot;x&quot;: “b”,</div><div class="line">&quot;value&quot;: 0.73</div><div class="line">&#125;，…]</div></pre></td></tr></table></figure></p><h3 id="options"><a href="#options" class="headerlink" title="options"></a>options</h3><p>为了实现options的可配置，我们需要预先提供一些已经定好的option。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  var options = &#123;</div><div class="line">legend: true,</div><div class="line">margin: &#123; top: 50, right: 0, bottom: 100, left: 50 &#125;,</div><div class="line">buckets: 9,</div><div class="line">colors: [&quot;#ffffd9&quot;, &quot;#edf8b1&quot;, &quot;#c7e9b4&quot;, &quot;#7fcdbb&quot;, &quot;#41b6c4&quot;, &quot;#1d91c0&quot;, &quot;#225ea8&quot;, &quot;#253494&quot;, &quot;#081d58&quot;](),</div><div class="line">duration: 1000,</div><div class="line">legendWidth: 0.3,</div><div class="line">breaks: null</div><div class="line">&#125;;</div><div class="line"></div></pre></td></tr></table></figure><br>为了使得可以添加或者替换默认的options，我们借助angular.extend()函数将scope里传进来的options和默认的options进行合并，作为新的options。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> if (scope.options) &#123;</div><div class="line">options = angular.extend(options, scope.options);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="dispatch"><a href="#dispatch" class="headerlink" title="dispatch"></a>dispatch</h3><p>通过dispatch预先定义一些操作，比如click,mouseover,mouse out,mouse move，在特定的情况下可以触发他们。代码这样写起来会比较优雅，显得非常的有条理。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">scope.dispatch = d3.dispatch(&quot;click&quot;, &quot;mouseover&quot;, &quot;mouseout&quot;, &quot;mousemove&quot;);</div><div class="line"></div><div class="line"> $scope.$watch(&quot;dispatch&quot;, function() &#123;</div><div class="line">if ($scope.dispatch) &#123;</div><div class="line">$scope.dispatch.on(&quot;click&quot;, function(e) &#123;</div><div class="line">console.log(e);</div><div class="line">&#125;);</div><div class="line">$scope.dispatch.on(&quot;mouseover&quot;, function(e) &#123;</div><div class="line">return tooltip.text(e.y + &quot;: &quot; + e.x + &quot; (&quot; + e.value + &quot;)&quot;).style(&quot;visibility&quot;, &quot;visible&quot;);</div><div class="line">&#125;)</div><div class="line">$scope.dispatch.on(&quot;mousemove&quot;, function(e) &#123;</div><div class="line">return tooltip.style(&quot;top&quot;, (d3.event.pageY - 10) + &quot;px&quot;).style(&quot;left&quot;, (d3.event.pageX + 10) + &quot;px&quot;);</div><div class="line">&#125;)</div><div class="line">$scope.dispatch.on(&quot;mouseout&quot;, function(e) &#123;</div><div class="line">return tooltip.style(&quot;visibility&quot;, &quot;hidden&quot;);</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line">&#125;, true);</div><div class="line"></div></pre></td></tr></table></figure></p><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><p>前期的准备工作做得差不多了，接下来到了最重要的环节，<strong>绘制</strong>。说重要也重要，但其实这应该是d3.js的基本功了。无非就是控制每个元素的各种属性。值得注意的是，这里定义的svg不再是d3.select(‘body’)了，而是select(element【0】)。<br>相关代码以及注释如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  var render = function() &#123;</div><div class="line"></div><div class="line">var w = element[0]().offsetWidth;</div><div class="line">var h = element[0]().offsetHeight;</div><div class="line">var width = w - options.margin.left - options.margin.right;</div><div class="line">var height = h - options.margin.top - options.margin.bottom;</div><div class="line">//先要移除之前的记录</div><div class="line">d3.select(element[0]()).select(&quot;svg&quot;).remove();</div><div class="line">//svg的位置、大小</div><div class="line">var svg = d3.select(element[0]()).append(&quot;svg&quot;)</div><div class="line">.attr(&quot;width&quot;, width + options.margin.left + options.margin.right)</div><div class="line">.attr(&quot;height&quot;, height + options.margin.top + options.margin.bottom)</div><div class="line">.append(&quot;g&quot;)</div><div class="line">.attr(&quot;transform&quot;, &quot;translate(&quot; + options.margin.left + &quot;,&quot; + options.margin.top + &quot;)&quot;);</div><div class="line">//找到data中每一个维度的坐标，方便绘制</div><div class="line">var xu = &#123;&#125;;</div><div class="line">var x = []();</div><div class="line">var yu = &#123;&#125;;</div><div class="line">var y = []();</div><div class="line"></div><div class="line">for (var i in scope.data) &#123;</div><div class="line">if (typeof(xu[scope.data[i]().x]) == &quot;undefined&quot;) &#123;</div><div class="line">x.push(scope.data[i]().x);</div><div class="line">&#125;</div><div class="line">xu[scope.data[i]().x] = 0;</div><div class="line">if (typeof(yu[scope.data[i]().y]) == &quot;undefined&quot;) &#123;</div><div class="line">y.push(scope.data[i]().y);</div><div class="line">&#125;</div><div class="line">yu[scope.data[i]().y] = 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">for (d in scope.data) &#123;</div><div class="line">scope.data[d]().xIndex = x.indexOf(scope.data[d]().x);</div><div class="line">scope.data[d]().yIndex = y.indexOf(scope.data[d]().y);</div><div class="line">&#125;</div><div class="line">//根据维度来决定热力图每一块的长宽，更dynamic</div><div class="line">var xGridSize = Math.floor(width / x.length);</div><div class="line">var yGridSize = Math.floor(height / y.length);</div><div class="line">var legendElementWidth = Math.floor(width \* options.legendWidth / (options.buckets));</div><div class="line">var legendElementHeight = height / 20;</div><div class="line">// 绘制y轴旁的元素名</div><div class="line">var yLabels = svg.selectAll(&quot;.yLabel&quot;)</div><div class="line">.data(y)</div><div class="line">.enter().append(&quot;text&quot;)</div><div class="line">.text(function (d) &#123; return d; &#125;)</div><div class="line">.attr(&quot;x&quot;, 0)</div><div class="line">.attr(&quot;y&quot;, function (d, i) &#123; return i \* yGridSize; &#125;)</div><div class="line">.style(&quot;text-anchor&quot;, &quot;end&quot;)</div><div class="line">.attr(&quot;transform&quot;, &quot;translate(-6,&quot; + yGridSize / 1.5 + &quot;)&quot;)</div><div class="line">.attr(&quot;class&quot;, function (d, i) &#123; return (&quot;yLabel axis&quot;); &#125;);</div><div class="line">// 绘制x轴旁的元素名</div><div class="line">var xLabels = svg.selectAll(&quot;.xLabel&quot;)</div><div class="line">.data(x)</div><div class="line">.enter().append(&quot;text&quot;)</div><div class="line">.text(function(d) &#123; return d; &#125;)</div><div class="line">.attr(&quot;y&quot;, function(d, i) &#123; return i \* xGridSize; &#125;)</div><div class="line">.attr(&quot;x&quot;, 0)</div><div class="line">.style(&quot;text-anchor&quot;, &quot;start&quot;)</div><div class="line">.attr(&quot;transform&quot;, &quot;rotate(-90) translate(10, &quot; + xGridSize / 2 + &quot;)&quot;)</div><div class="line">.attr(&quot;class&quot;, function(d, i) &#123; return (&quot;xLabel axis&quot;); &#125;);</div><div class="line"></div><div class="line">var colorScales = []();</div><div class="line">if (options.breaks != null &amp;&amp; options.breaks.length \&gt; 0) &#123;</div><div class="line">for (b in options.colors) &#123;</div><div class="line">colorScales.push(d3.scale.quantile()</div><div class="line">.domain([0, options.buckets - 1, d3.max(scope.data, function(d) &#123; return d.value; &#125;)]())</div><div class="line">.range(options.colors[b]()));</div><div class="line">&#125;</div><div class="line">&#125; else &#123;</div><div class="line">colorScales.push(d3.scale.quantile()</div><div class="line">.domain([0, options.buckets - 1, d3.max(scope.data, function(d) &#123; return d.value; &#125;)]())</div><div class="line">.range(options.colors));</div><div class="line">&#125;</div><div class="line">//绘制热力图中的最小cell单位，并制定颜色，动作</div><div class="line">var cards = svg.selectAll(&quot;.square&quot;)</div><div class="line">.data(scope.data);</div><div class="line"></div><div class="line">cards.enter().append(&quot;rect&quot;)</div><div class="line">.filter(function(d) &#123; return d.value != null &#125;)</div><div class="line">.attr(&quot;x&quot;, function(d) &#123; return d.xIndex \* xGridSize; &#125;)</div><div class="line">.attr(&quot;y&quot;, function(d) &#123; return d.yIndex \* yGridSize; &#125;)</div><div class="line">.attr(&quot;class&quot;, &quot;square&quot;)</div><div class="line">.attr(&quot;width&quot;, xGridSize)</div><div class="line">.attr(&quot;height&quot;, yGridSize)</div><div class="line">.on(&quot;click&quot;, function(d) &#123; scope.dispatch.click(d); &#125;)</div><div class="line">.on(&quot;mouseover&quot;, function(d) &#123; scope.dispatch.mouseover(d); &#125;)</div><div class="line">.on(&quot;mouseout&quot;, function(d) &#123; scope.dispatch.mouseout(d); &#125;)</div><div class="line">.on(&quot;mousemove&quot;, function(d) &#123; scope.dispatch.mousemove(d); &#125;)</div><div class="line">.style(&quot;fill&quot;, &quot;#ffffff&quot;);</div><div class="line"></div><div class="line">//增加动画效果                cards.transition().duration(options.duration).style(&quot;fill&quot;, function(d) &#123;</div><div class="line">if (options.customColors &amp;&amp; options.customColors.hasOwnProperty(d.value)) &#123;</div><div class="line">return options.customColors[d.value]();</div><div class="line">&#125; else if (options.breaks != null &amp;&amp; options.breaks.length \&gt; 0) &#123;</div><div class="line">for (b in options.breaks) &#123;</div><div class="line">if (d.xIndex \&lt; options.breaks[b]()) &#123;</div><div class="line">return colorScales[b]()(d.value);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">return colorScales[options.breaks.length]()(d.value);</div><div class="line">&#125; else &#123;</div><div class="line">return colorScales[0]()(d.value);</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">cards.exit().remove();</div><div class="line"></div><div class="line">if (options.legend) &#123;</div><div class="line"></div><div class="line">var legend = svg.selectAll(&quot;.legend&quot;)</div><div class="line">.data([0]().concat(colorScales[0]().quantiles()).concat(d3.max(scope.data, function (d) &#123; return d.value; &#125;)), function(d) &#123; return d; &#125;);</div><div class="line"></div><div class="line">legend.enter().append(&quot;g&quot;).attr(&quot;class&quot;, &quot;legend&quot;);</div><div class="line">//下面的参考数值对应的颜色</div><div class="line">legend.append(&quot;rect&quot;)</div><div class="line">.attr(&quot;x&quot;, function(d, i) &#123; return legendElementWidth \* i; &#125;)</div><div class="line">.attr(&quot;y&quot;, height \* 1.05)</div><div class="line">.attr(&quot;width&quot;, legendElementWidth)</div><div class="line">.attr(&quot;height&quot;, legendElementHeight)</div><div class="line">.style(&quot;fill&quot;, function(d, i) &#123; return options.colors[i](); &#125;)</div><div class="line">.style(&quot;visibility&quot;, function(d, i) &#123; return(i \&lt; options.buckets ? &quot;visible&quot; : &quot;hidden&quot;) &#125;);</div><div class="line">//参考数值</div><div class="line">legend.append(&quot;text&quot;)</div><div class="line">.attr(&quot;class&quot;, &quot;legendLabel&quot;)</div><div class="line">.text(function(d,i) &#123; return (0.1\*i+0.1).toFixed(1); &#125;)</div><div class="line">.attr(&quot;x&quot;, function(d, i) &#123; return legendElementWidth \* i; &#125;)</div><div class="line">.attr(&quot;y&quot;, height \* 1.15)</div><div class="line">.style(&quot;text-anchor&quot;, &quot;middle&quot;);</div><div class="line"></div><div class="line">legend.exit().remove();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div></pre></td></tr></table></figure></p><h3 id="增加响应"><a href="#增加响应" class="headerlink" title="增加响应"></a>增加响应</h3><p>当数据变化，或webpage的窗口大小发生改变时，希望能够重新绘制热力图，这也是为什么我们上面将render函数定义为一个变量的原因。<br>监控数据的变化，可以借助angular的$watch函数来完成。为了有延时的效果，需要一个辅助函数，代码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//数据变化了</div><div class="line">scope.$watch(&quot;data&quot;, function() &#123;</div><div class="line">render();</div><div class="line">&#125;, true);</div><div class="line">//窗口大小改变</div><div class="line">d3.select(window).on(&quot;resize&quot;, debounce(function() &#123;</div><div class="line">render();</div><div class="line">&#125;, 500));</div><div class="line"></div><div class="line">//辅助函数，控制延时</div><div class="line">var debounce = function(f, timeout) &#123;</div><div class="line">var id = -1;</div><div class="line">return function() &#123;</div><div class="line">if (id \&gt; -1) &#123;</div><div class="line">window.clearTimeout(id);</div><div class="line">&#125;</div><div class="line">id = window.setTimeout(f, timeout);</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"></div></pre></td></tr></table></figure><h3 id="CSS样式表"><a href="#CSS样式表" class="headerlink" title="CSS样式表"></a>CSS样式表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">\&lt;style\&gt;</div><div class="line">.xLabel, .yLabel, .legendLabel &#123;</div><div class="line">font-size: 9px;</div><div class="line">font-family: Verdana;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.tooltip &#123;</div><div class="line">font-size: 9px;</div><div class="line">font-family: Verdana;</div><div class="line">background-color: #333333;</div><div class="line">padding: 5px;</div><div class="line">color: #ffffff;</div><div class="line">border-radius: 3px;</div><div class="line">opacity: 0.7;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.chart &#123;</div><div class="line">width: 50%;</div><div class="line">height: 600px;</div><div class="line">background-color: #ffffff;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.square &#123;</div><div class="line">cursor: pointer;</div><div class="line">&#125;</div><div class="line"></div><div class="line">\&lt;/style\&gt;</div></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li>《D3 on AngularJS》 <a href="https://leanpub.com/d3angularjs" target="_blank" rel="external">https://leanpub.com/d3angularjs</a></li><li>《Build custom directives with AngularJS》 <a href="http://ngnewsletter.wpengine.com/?p=218" target="_blank" rel="external">http://ngnewsletter.wpengine.com/?p=218</a></li><li>《AngularJS &amp; D3: Directives for Visualizations》 <a href="https://www.youtube.com/watch?v=aqHBLS_6gF8" target="_blank" rel="external">https://www.youtube.com/watch?v=aqHBLS_6gF8</a></li><li>pieterprovoost’s github <a href="https://github.com/pieterprovoost/heatmap" target="_blank" rel="external">https://github.com/pieterprovoost/heatmap</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;前面两篇博客介绍了如何借助angular，让我们的可视化图能够更有&lt;strong&gt;模块化&lt;/strong&gt;、&lt;strong&gt;方便复用&lt;/st
      
    
    </summary>
    
      <category term="visualization" scheme="http://zhihaozhang.github.io/categories/visualization/"/>
    
    
      <category term="d3" scheme="http://zhihaozhang.github.io/tags/d3/"/>
    
  </entry>
  
  <entry>
    <title>数据可视化之散点图</title>
    <link href="http://zhihaozhang.github.io/2014/11/15/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E4%B9%8B%E6%95%A3%E7%82%B9%E5%9B%BE/"/>
    <id>http://zhihaozhang.github.io/2014/11/15/数据可视化之散点图/</id>
    <published>2014-11-15T05:54:57.000Z</published>
    <updated>2017-09-24T04:14:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>D3.js是当下最火的可视化库之一，这篇博客记录了如何实现一个最基本的散点图，并用三角形表示数据点。</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">\&lt;!DOCTYPE html\&gt;</div><div class="line">\&lt;html\&gt;</div><div class="line">\&lt;head lang=&quot;en&quot;\&gt;</div><div class="line">\&lt;meta charset=&quot;UTF-8&quot;\&gt;</div><div class="line">\&lt;title\&gt;\&lt;/title\&gt;</div><div class="line">\&lt;script type=&quot;text/javascript&quot; src=&quot;script/d3.v3.js&quot;\&gt; \&lt;/script\&gt;</div><div class="line">\&lt;/head\&gt;</div><div class="line">\&lt;style\&gt;</div><div class="line">body &#123;</div><div class="line">font: 10px sans-serif;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.axis path,</div><div class="line">.axis line &#123;</div><div class="line">fill: none;</div><div class="line">stroke: #000;</div><div class="line">shape-rendering: crispEdges;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.point &#123;</div><div class="line">fill: steelblue;</div><div class="line">stroke: #000;</div><div class="line">&#125;</div><div class="line"></div><div class="line">\&lt;/style\&gt;</div><div class="line">\&lt;body\&gt;</div><div class="line"></div><div class="line">\&lt;script\&gt;</div><div class="line"></div><div class="line">var margin = &#123;top:20,right:20,bottom:30,left:40&#125;,</div><div class="line">width = 960-margin.left-margin.right,</div><div class="line">height = 500-margin.top-margin.bottom;</div><div class="line"></div><div class="line">var x = d3.scale.linear().range([0,width]());</div><div class="line">var y = d3.scale.linear().range([height,0]());</div><div class="line"></div><div class="line">var svg = d3.select(&apos;body&apos;).append(&apos;svg&apos;).attr(&apos;width&apos;,width+margin.left+margin.right)</div><div class="line">.attr(&apos;height&apos;,height+margin.top+margin.bottom)</div><div class="line">.append(&apos;g&apos;)</div><div class="line">.attr(&apos;transform&apos;,&quot;translate(&quot;+margin.left+&quot;,&quot;+margin.top+&apos;)&apos;);</div><div class="line"></div><div class="line">d3.csv(&apos;tmp.csv&apos;,function(error,data)&#123;</div><div class="line">if(error) throw error;</div><div class="line"></div><div class="line">data.forEach(function(d)&#123;</div><div class="line">d.x=+d.x;</div><div class="line">d.y=+d.y;</div><div class="line">&#125;)</div><div class="line">//        console.log(data);</div><div class="line"></div><div class="line">x.domain(d3.extent(data,function(d)&#123;return d.x&#125;)).nice();</div><div class="line">y.domain(d3.extent(data,function(d)&#123;return d.y&#125;)).nice();</div><div class="line"></div><div class="line">svg.append(&apos;g&apos;)</div><div class="line">.attr(&apos;class&apos;,&apos;x axis&apos;)</div><div class="line">.attr(&apos;transform&apos;,&apos;translate(0,&apos;+height+&quot;)&quot;)</div><div class="line">.call(d3.svg.axis().scale(x).orient(&apos;bottom&apos;));</div><div class="line"></div><div class="line">svg.append(&apos;g&apos;)</div><div class="line">.attr(&apos;class&apos;,&apos;y axis&apos;)</div><div class="line">.call(d3.svg.axis().scale(y).orient(&apos;left&apos;));</div><div class="line"></div><div class="line">svg.selectAll(&apos;.point&apos;)</div><div class="line">.data(data).enter()</div><div class="line">.append(&apos;path&apos;)</div><div class="line">.attr(&apos;class&apos;,&apos;point&apos;)</div><div class="line">.attr(&apos;d&apos;,d3.svg.symbol().type(&apos;triangle-up&apos;))</div><div class="line">.attr(&apos;transform&apos;,function(d)&#123;return &quot;translate(&quot;+x(d.x)+&quot;,&quot;+y(d.y)+&quot;)&quot;&#125;);</div><div class="line"></div><div class="line"></div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">\&lt;/script\&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">\&lt;/body\&gt;</div><div class="line">\&lt;/html\&gt;</div><div class="line"></div></pre></td></tr></table></figure><p>代码本身是很基本的，不过代码里面有一些可以学习的好习惯，比如：</p><ol><li><p>使用var margin = {top:20,right:20,bottom:30,left:40}变量来表示距离上下左右的距离，这样统一管理，只有一个变量。</p></li><li><p>data.forEach(function(d){<br> d.x=+d.x;<br> d.y=+d.y;<br> })<br>使用这种方式直接转换成数值型的变量，免去了使用其他函数的麻烦。</p></li><li>.nice()函数的使用，可以适当扩大extent的范围，这样最大最小值在坐标轴上看起来不会在极端的位置上。</li><li>.attr(‘d’,d3.svg.symbol().type(‘triangle-up’)) 使用不局限于circle的图形来表示一个点</li><li>svg.append(‘g’).attr(‘class’,’y axis’).call(d3.svg.axis().scale(y).orient(‘left’));<br>  一句话里指定要绘制坐标轴需要的所有东西。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;D3.js是当下最火的可视化库之一，这篇博客记录了如何实现一个最基本的散点图，并用三角形表示数据点。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;d
      
    
    </summary>
    
      <category term="visualization" scheme="http://zhihaozhang.github.io/categories/visualization/"/>
    
    
      <category term="d3" scheme="http://zhihaozhang.github.io/tags/d3/"/>
    
  </entry>
  
  <entry>
    <title>polybrush in d3</title>
    <link href="http://zhihaozhang.github.io/2014/11/15/polybrush%20in%20d3/"/>
    <id>http://zhihaozhang.github.io/2014/11/15/polybrush in d3/</id>
    <published>2014-11-15T05:54:57.000Z</published>
    <updated>2017-09-25T07:02:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i3.piimg.com/0e2d18cf43f9f605.png" alt=""></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>你是否也像我一样，厌倦了d3默认的矩形的brush，或者你发现矩形的brush已经不能满足你的需要了;又或者你只是单纯的被上面的图片所吸引。不管怎样，我们将介绍一下polybrush。</p><p>这篇博客的名字叫polybrush in d3，现在想来，好像有点错误，因为polybrush并不是d3内置的，它是由Geoffrey T. Bell在2012年开发的d3插件，因其方便、好用，所以广受好评。</p><p>但无奈目前中文的相关资料和博客几乎没有，因此我来试着写一下如何使用它，以及它的原理，还会包含源码粗略解读，polybrush.js的github参考项目下载地址是：<a href="https://gist.github.com/GerHobbelt/3732612" target="_blank" rel="external">https://gist.github.com/GerHobbelt/3732612</a></p><p>学习一个东西，大抵有三层境界，第一，会使用它，第二，知道他的原理，第三，知其然也知其所以然。这也是本文接下来三章的组织方式，首先，介绍最基本的如何使用，再去试着解释原理，最后深入到代码级。</p><h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><h2 id="与brush相同的地方"><a href="#与brush相同的地方" class="headerlink" title="与brush相同的地方"></a>与brush相同的地方</h2><p>使用polybrush，几乎和使用d3内置的brush一样方便，仅需一行就可以建立一个polybrush的选择集：var brush = d3.svg.polybrush();  这和brush几乎是一样的；<br>同样相同的还有brush的三个过程：brush(),brushStart(),burshFinished() ，在这三个过程中添加相应的处理逻辑的代码，完成指定的action。不熟悉的可以去看我之前写的brush的博客。</p><h2 id="与brush不同的地方"><a href="#与brush不同的地方" class="headerlink" title="与brush不同的地方"></a>与brush不同的地方</h2><p>与brush不同的地方也很显然，就是如何判定一个元素在还是不在选择集合中。之前的brush出来的形状是一个矩形，矩形的四个角的坐标都有，判断可以用下面的代码来完成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  var extent = brush.extent();</div><div class="line">var xmin = extent[0]()[0]();</div><div class="line">var xmax = extent[1]()[0]();</div><div class="line">var ymin = extent[0]()[1]();</div><div class="line">var ymax = extent[1]()[1]();</div><div class="line"></div><div class="line"> if(d[0]()\&gt;=xmin &amp;&amp; d[0]()\&lt;=xmax &amp;&amp; d[1]()\&gt;=ymin &amp;&amp; d[1]()\&lt;=ymax)&#123;</div><div class="line">//在brush的区域内</div><div class="line">&#125;else&#123;</div><div class="line">//不在brush的区域内</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure><br>那现在我们brush出来的那个奇怪的形状该如何来判定呢？还好，Geoffrey T. Bell替你完成了这部分的判定，你只需要调用if(brush.isWithinExtent(x,y))就可以了！至此，你达到了polybrush的第一层境界，即学会了使用它。很显然，我们接下来需要介绍的是如何判断点在还是不在polybrush选中的那块区域里面。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>我这实现了一个使用polybrush的最简单的例子，在前面博客中写到的散点图的基础上加上了polybrush的操作。</p><blockquote><p>需要特别注意的是判断是否在brush的区域内，传入的参数不是d【0】和d【1】, 而是坐标，x(d.x),y(d.y),因为传入的d.x d.y已经经过了变换了。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">\&lt;!DOCTYPE html\&gt;</div><div class="line">\&lt;html\&gt;</div><div class="line">\&lt;head lang=&quot;en&quot;\&gt;</div><div class="line">\&lt;meta charset=&quot;UTF-8&quot;\&gt;</div><div class="line">\&lt;script type=&quot;text/javascript&quot; src=&quot;script/d3.v3.js&quot;\&gt; \&lt;/script\&gt;</div><div class="line">\&lt;script src=&quot;polybrush.js&quot;\&gt;\&lt;/script\&gt;</div><div class="line">\&lt;title\&gt;\&lt;/title\&gt;</div><div class="line">\&lt;style type=&quot;text/css&quot;\&gt;</div><div class="line"></div><div class="line">.brush .extent &#123;</div><div class="line">stroke: #000;</div><div class="line">stroke-width: 1.5px;</div><div class="line">fill: #000;</div><div class="line">fill-opacity: 0.3;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.point.selected &#123;</div><div class="line">fill: red;</div><div class="line">stroke: darkred;</div><div class="line">stroke-width: 2;</div><div class="line">&#125;</div><div class="line">.point &#123;</div><div class="line">fill: steelblue;</div><div class="line">/*stroke: #000;*/</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">.axis path,</div><div class="line">.axis line &#123;</div><div class="line">fill: none;</div><div class="line">stroke: #000;</div><div class="line">shape-rendering: crispEdges;</div><div class="line">&#125;</div><div class="line"></div><div class="line">\&lt;/style\&gt;</div><div class="line">\&lt;/head\&gt;</div><div class="line">\&lt;body\&gt;</div><div class="line"></div><div class="line">\&lt;script\&gt;</div><div class="line"></div><div class="line">var margin = &#123;top:20,right:20,bottom:20,left:20&#125;;</div><div class="line">var width= 960-margin.left-margin.right;</div><div class="line">var height = 500-margin.top-margin.bottom;</div><div class="line"></div><div class="line">var x = d3.scale.linear().range([0,width]());</div><div class="line">var y = d3.scale.linear().range([height,0]());</div><div class="line"></div><div class="line">var svg = d3.select(&apos;body&apos;).append(&apos;svg&apos;).attr(&apos;width&apos;,width+margin.left+margin.right).attr(&apos;height&apos;,height+margin.top+margin.bottom)</div><div class="line">.append(&apos;g&apos;)</div><div class="line">.attr(&apos;transform&apos;,&quot;translate(&quot;+margin.left+&quot;,&quot;+margin.top+&quot;)&quot;);</div><div class="line"></div><div class="line">d3.csv(&apos;tmp.csv&apos;,function(error,data)&#123;</div><div class="line"></div><div class="line">if(error) throw  error;</div><div class="line"></div><div class="line">data.forEach(function(d)&#123;</div><div class="line">d.x=+d.x;</div><div class="line">d.y=+d.y;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">x.domain(d3.extent(data,function(d)&#123;return d.x&#125;)).nice();</div><div class="line">y.domain(d3.extent(data,function(d)&#123;return d.y&#125;)).nice();</div><div class="line"></div><div class="line">svg.append(&apos;g&apos;)</div><div class="line">.attr(&apos;class&apos;,&apos;x axis&apos;)</div><div class="line">.attr(&apos;transform&apos;,&apos;translate(0,&apos;+height+&quot;)&quot;)</div><div class="line">.call(d3.svg.axis().scale(x).orient(&apos;bottom&apos;));</div><div class="line"></div><div class="line">svg.append(&apos;g&apos;)</div><div class="line">.attr(&quot;class&quot;,&apos;y axis&apos;)</div><div class="line">.call(d3.svg.axis().scale(y).orient(&apos;left&apos;));</div><div class="line"></div><div class="line">svg.selectAll(&apos;.point&apos;)</div><div class="line">.data(data).enter()</div><div class="line">.append(&apos;circle&apos;)</div><div class="line">.attr(&apos;class&apos;,&apos;point&apos;)</div><div class="line">//                .attr(&apos;d&apos;,d3.svg.symbol().type(&apos;triangle-up&apos;))</div><div class="line">.attr(&apos;cx&apos;, function(d) &#123; return d[0](); &#125;)</div><div class="line">.attr(&apos;cy&apos;, function(d) &#123; return d[1](); &#125;)</div><div class="line">.attr(&apos;r&apos;, 15)</div><div class="line">.attr(&apos;transform&apos;,function(d)&#123;return &quot;translate(&quot; +</div><div class="line">&quot;&quot;+x(d.x)+&quot;,&quot;+y(d.y)+&quot;)&quot;&#125;);</div><div class="line"></div><div class="line"></div><div class="line">var brush = d3.svg.polybrush()</div><div class="line">.x(d3.scale.linear().range([0,width]()))</div><div class="line">.y(d3.scale.linear().range([0,height]()))</div><div class="line">.on(&apos;brushstart&apos;,function()&#123;</div><div class="line">svg.selectAll(&apos;.point&apos;).classed(&apos;selected&apos;,false);</div><div class="line">&#125;)</div><div class="line">.on(&apos;brush&apos;,function()&#123;</div><div class="line">svg.selectAll(&apos;.point&apos;).classed(&apos;selected&apos;,function(d)&#123;</div><div class="line">console.log(d);</div><div class="line">if(brush.isWithinExtent(x(d.x), y(d.y)))</div><div class="line">&#123;</div><div class="line">console.log(&apos;helo&apos;)</div><div class="line">return true;</div><div class="line">&#125;else&#123;</div><div class="line">console.log(&apos;no&apos;)</div><div class="line">return false;</div><div class="line">&#125;</div><div class="line">&#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line">svg.append(&apos;svg:g&apos;)</div><div class="line">.attr(&apos;class&apos;,&apos;brush&apos;)</div><div class="line">.call(brush);</div><div class="line"></div><div class="line"></div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line">\&lt;/script\&gt;</div><div class="line"></div><div class="line">\&lt;/body\&gt;</div><div class="line">\&lt;/html\&gt;</div><div class="line"></div></pre></td></tr></table></figure><h1 id="Ray-casting-algorithm"><a href="#Ray-casting-algorithm" class="headerlink" title="Ray casting algorithm"></a>Ray casting algorithm</h1><p>判断某个点在还是不在polybrush选中的区域中，用的是图形学中的Ray casting算法。它的思想很简单，作一条以点为起点，且平行于x轴的线，数与brush产生的凹多边形边相交的次数n，根据n的奇偶性来判断点是在里面还是在外面。如果在里面，n是奇数，反之则为偶数。<br>可以借助下面的这幅图来很好的理解这个算法：<br><img src="http://i2.piimg.com/d26d48e5812578c8.png" alt=""></p><h1 id="深入源码"><a href="#深入源码" class="headerlink" title="深入源码"></a>深入源码</h1><p>终于到第三层境界，也是最难啃的一块硬骨头了。首先，作为一个d3的插件，需要用如下的代码来包住整个的代码块，这是js种的立即函数，引入代码段之后会立即执行，并return 相应的结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">(function(d3) &#123;</div><div class="line">  d3.svg.polybrush = function() &#123;</div><div class="line">…</div><div class="line">&#125;)(d3)</div><div class="line"></div></pre></td></tr></table></figure></p><p>接下来定义了一个类似广播的dispatch，定义了三种类似brush中可以监听的行为，brush start,brush,brushed,这样就可以用.on(“brush”,function(){})来进行监听并提供处理的函数了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> var dispatch = d3.dispatch(&quot;brushstart&quot;, &quot;brush&quot;, &quot;brushend&quot;),</div><div class="line">x = null,</div><div class="line">y = null,</div><div class="line">extent = [](),</div><div class="line">firstClick = true,</div><div class="line">firstTime = true,</div><div class="line">wasDragged = false,</div><div class="line">origin = null,</div><div class="line">line = d3.svg.line()</div><div class="line">  .x(function(d) &#123;</div><div class="line">return d[0]();</div><div class="line">  &#125;)</div><div class="line">  .y(function(d) &#123;</div><div class="line">return d[1]();</div><div class="line">  &#125;);</div><div class="line"></div><div class="line"> d3.rebind(brush, dispatch, &quot;on&quot;);</div><div class="line"></div></pre></td></tr></table></figure><p>还定义了一些变量，x,y,extent,等，这些变量都是为了配合下面的操作设立的，从名字就可以看出一些变量的作用。<br>line是由起点和终点组成的，而特定点的x，y坐标在这段代码中被分别指定好。</p><p>brush函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">var brush = function(g) &#123;</div><div class="line">  g.each(function() &#123;</div><div class="line">var bg, e, fg;</div><div class="line">g = d3.select(this);</div><div class="line">bg = g.selectAll(&quot;.background&quot;).data([0]());</div><div class="line">fg = g.selectAll(&quot;.extent&quot;).data([extent]());</div><div class="line">g.style(&quot;pointer-events&quot;, &quot;all&quot;).on(&quot;click.brush&quot;, addAnchor);</div><div class="line">bg.enter().append(&quot;rect&quot;).attr(&quot;class&quot;, &quot;background&quot;).style(&quot;visibility&quot;, &quot;hidden&quot;).style(&quot;cursor&quot;, &quot;crosshair&quot;);</div><div class="line">fg.enter().append(&quot;path&quot;).attr(&quot;class&quot;, &quot;extent&quot;).style(&quot;cursor&quot;, &quot;move&quot;);</div><div class="line">if (x) &#123;</div><div class="line">  e = scaleExtent(x.range());</div><div class="line">  bg.attr(&quot;x&quot;, e[0]()).attr(&quot;width&quot;, e[1]() - e[0]());</div><div class="line">&#125;</div><div class="line">if (y) &#123;</div><div class="line">  e = scaleExtent(y.range());</div><div class="line">  bg.attr(&quot;y&quot;, e[0]()).attr(&quot;height&quot;, e[1]() - e[0]());</div><div class="line">&#125;</div><div class="line">  &#125;);</div><div class="line">&#125;;</div><div class="line"></div></pre></td></tr></table></figure><br>选出前景背景，并添加对应的class，使得前景和背景区分开。还添加了对前景背景移动时的重新判断。<br>监听brush过程中的点击事件，进行添加锚点addAnchor的操作。<br>接下来是两个函数，第一个是绘制已有的路径，第二个是将domain的start和stop按照从小到大的顺序排好。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">var drawPath = function() &#123;</div><div class="line">  return d3.selectAll(&quot;g.brush path&quot;).attr(&quot;d&quot;, function(d) &#123;</div><div class="line"></div><div class="line">return line(d) + &quot;Z&quot;;</div><div class="line">  &#125;);</div><div class="line">&#125;;</div><div class="line">var scaleExtent = function(domain) &#123;</div><div class="line">  var start, stop;</div><div class="line">  start = domain[0]();</div><div class="line">  stop = domain[domain.length - 1]();</div><div class="line">  if (start \&lt; stop) &#123;</div><div class="line">return [start, stop]();</div><div class="line">  &#125; else &#123;</div><div class="line">return [stop, start]();</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div></pre></td></tr></table></figure></p><p>下面还有一些辅助函数，从函数的名字上就可以很清楚的知道函数的作用，这里不多做解释了，没有太多值得说的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">var withinBounds = function(point) &#123;</div><div class="line">  var rangeX, rangeY, \_x, \_y;</div><div class="line">  rangeX = scaleExtent(x.range());</div><div class="line">  rangeY = scaleExtent(y.range());</div><div class="line">  \_x = Math.max(rangeX[0](), Math.min(rangeX[1](), point[0]()));</div><div class="line">  \_y = Math.max(rangeY[0](), Math.min(rangeY[1](), point[1]()));</div><div class="line">  return point[0]() === \_x &amp;&amp; point[1]() === \_y;</div><div class="line">&#125;;</div><div class="line">var moveAnchor = function(target) &#123;</div><div class="line">  var moved, point;</div><div class="line">  point = d3.mouse(target);</div><div class="line">  if (firstTime) &#123;</div><div class="line">extent.push(point);</div><div class="line">firstTime = false;</div><div class="line">  &#125; else &#123;</div><div class="line">if (withinBounds(point)) &#123;</div><div class="line">  extent.splice(extent.length - 1, 1, point);</div><div class="line">&#125;</div><div class="line">drawPath();</div><div class="line">dispatch.brush();</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">var closePath = function() &#123;</div><div class="line">  var w;</div><div class="line">  w = d3.select(window);</div><div class="line">  w.on(&quot;dblclick.brush&quot;, null).on(&quot;mousemove.brush&quot;, null);</div><div class="line">  firstClick = true;</div><div class="line">  if (extent.length === 2 &amp;&amp; extent[0]()[0]() === extent[1]()[0]() &amp;&amp; extent[0]()[1]() === extent[1]()[1]()) &#123;</div><div class="line">extent.splice(0, extent.length);</div><div class="line">  &#125;</div><div class="line">  d3.select(&quot;.extent&quot;).on(&quot;mousedown.brush&quot;, moveExtent);</div><div class="line">  return dispatch.brushend();</div><div class="line">&#125;;</div><div class="line">var addAnchor = function() &#123;</div><div class="line">  var g, w,</div><div class="line">\_this = this;</div><div class="line">  g = d3.select(this);</div><div class="line">  w = d3.select(window);</div><div class="line">  firstTime = true;</div><div class="line">  if (wasDragged) &#123;</div><div class="line">wasDragged = false;</div><div class="line">return;</div><div class="line">  &#125;</div><div class="line">  if (firstClick) &#123;</div><div class="line">extent.splice(0, extent.length);</div><div class="line">firstClick = false;</div><div class="line">d3.select(&quot;.extent&quot;).on(&quot;mousedown.brush&quot;, null);</div><div class="line">w.on(&quot;mousemove.brush&quot;, function() &#123;</div><div class="line">  return moveAnchor(\_this);</div><div class="line">&#125;).on(&quot;dblclick.brush&quot;, closePath);</div><div class="line">dispatch.brushstart();</div><div class="line">  &#125;</div><div class="line">  if (extent.length \&gt; 1) &#123;</div><div class="line">extent.pop();</div><div class="line">  &#125;</div><div class="line">  extent.push(d3.mouse(this));</div><div class="line">  return drawPath();</div><div class="line">&#125;;</div><div class="line">var dragExtent = function(target) &#123;</div><div class="line">  var checkBounds, fail, p, point, scaleX, scaleY, updateExtentPoint, \_i, \_j, \_len, \_len1;</div><div class="line">  point = d3.mouse(target);</div><div class="line">  scaleX = point[0]() - origin[0]();</div><div class="line">  scaleY = point[1]() - origin[1]();</div><div class="line">  fail = false;</div><div class="line">  origin = point;</div><div class="line">  updateExtentPoint = function(p) &#123;</div><div class="line">p[0]() += scaleX;</div><div class="line">p[1]() += scaleY;</div><div class="line">  &#125;;</div><div class="line">  for (\_i = 0, \_len = extent.length; \_i \&lt; \_len; \_i++) &#123;</div><div class="line">p = extent[\_i]();</div><div class="line">updateExtentPoint(p);</div><div class="line">  &#125;</div><div class="line">  checkBounds = function(p) &#123;</div><div class="line">if (!withinBounds(p)) &#123;</div><div class="line">  fail = true;</div><div class="line">&#125;</div><div class="line">return fail;</div><div class="line">  &#125;;</div><div class="line">  for (\_j = 0, \_len1 = extent.length; \_j \&lt; \_len1; \_j++) &#123;</div><div class="line">p = extent[\_j]();</div><div class="line">checkBounds(p);</div><div class="line">  &#125;</div><div class="line">  if (fail) &#123;</div><div class="line">return;</div><div class="line">  &#125;</div><div class="line">  drawPath();</div><div class="line">  return dispatch.brush(&#123;</div><div class="line">mode: &quot;move&quot;</div><div class="line">  &#125;);</div><div class="line">&#125;;</div><div class="line">var dragStop = function() &#123;</div><div class="line">  var w;</div><div class="line">  w = d3.select(window);</div><div class="line">  w.on(&quot;mousemove.brush&quot;, null).on(&quot;mouseup.brush&quot;, null);</div><div class="line">  wasDragged = true;</div><div class="line">  return dispatch.brushend();</div><div class="line">&#125;;</div><div class="line">var moveExtent = function() &#123;</div><div class="line">  var \_this = this;</div><div class="line">  d3.event.stopPropagation();</div><div class="line">  d3.event.preventDefault();</div><div class="line">  if (firstClick &amp;&amp; !brush.empty()) &#123;</div><div class="line">d3.select(window).on(&quot;mousemove.brush&quot;, function() &#123;</div><div class="line">  return dragExtent(\_this);</div><div class="line">&#125;).on(&quot;mouseup.brush&quot;, dragStop);</div><div class="line">origin = d3.mouse(this);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div></pre></td></tr></table></figure></p><p>最后需要说一下的是isWithinExtent函数，应该可以算作是上一章节中提到的ray casting算法的一个js版本的实现。其中，数奇偶是由ret来完成的。只不过实现中，他是用取反操作!来完成的，没有用自增++操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">brush.clear = function() &#123;</div><div class="line">  extent.splice(0, extent.length);</div><div class="line">  return brush;</div><div class="line">&#125;;</div><div class="line">brush.empty = function() &#123;</div><div class="line">  return extent.length === 0;</div><div class="line">&#125;;</div><div class="line"></div></pre></td></tr></table></figure><p>clear函数是用来清空brush的区域的，empty是用来判断是否有区域被brush了。和上面的那些没有特别说明的函数一样，这些是辅助完成polybrush操作的函数，可以认为是辅助函数。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>至此，算是粗略的完成了polybrush相关的介绍，从开始的如何使用，到它与brush的异同点，到最后的源代码的泛读。希望本文能对读者有所帮助，那会是我最大的欣慰。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://i3.piimg.com/0e2d18cf43f9f605.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;你是否
      
    
    </summary>
    
      <category term="visualization" scheme="http://zhihaozhang.github.io/categories/visualization/"/>
    
    
      <category term="d3" scheme="http://zhihaozhang.github.io/tags/d3/"/>
    
  </entry>
  
  <entry>
    <title>用Java生成Json文件</title>
    <link href="http://zhihaozhang.github.io/2014/04/24/%E7%94%A8Java%E7%94%9F%E6%88%90Json%E6%96%87%E4%BB%B6/"/>
    <id>http://zhihaozhang.github.io/2014/04/24/用Java生成Json文件/</id>
    <published>2014-04-24T12:55:00.000Z</published>
    <updated>2017-09-24T04:15:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h1><h2 id="Json是什么"><a href="#Json是什么" class="headerlink" title="Json是什么"></a>Json是什么</h2><blockquote><p>  【百度百科】JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。它基于ECMAScript的一个子集。 JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C、C++、C#、Java、JavaScript、Perl、Python等）。这些特性使JSON成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成(网络传输速率)。</p></blockquote><h2 id="Json语法规则"><a href="#Json语法规则" class="headerlink" title="Json语法规则"></a>Json语法规则</h2><p>JSON 语法是 JavaScript 对象表示语法的子集。<br>1.数据在键值对中<br>2.数据由逗号分隔<br>3.花括号保存对象<br>4.方括号保存数组<br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&#123;</div><div class="line">&quot;people&quot;:[</div><div class="line">    &#123;&quot;firstName&quot;:&quot;Brett&quot;,&quot;lastName&quot;:&quot;McLaughlin&quot;,&quot;email&quot;:&quot;aaaa&quot;&#125;,</div><div class="line">    &#123;&quot;firstName&quot;:&quot;Jason&quot;,&quot;lastName&quot;:&quot;Hunter&quot;,&quot;email&quot;:&quot;bbbb&quot;&#125;,</div><div class="line">    &#123;&quot;firstName&quot;:&quot;Elliotte&quot;,&quot;lastName&quot;:&quot;Harold&quot;,&quot;email&quot;:&quot;cccc&quot;&#125;</div><div class="line">]</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure></p><h1 id="Java写入Json格式数据到-json格式文件"><a href="#Java写入Json格式数据到-json格式文件" class="headerlink" title="Java写入Json格式数据到.json格式文件"></a>Java写入Json格式数据到.json格式文件</h1><p>用Java生成json格式的文件分成两步，第一步是<strong>生成json格式数据</strong>，第二步是<strong>将json格式的数据写入文件</strong>。</p><h2 id="生成json格式数据"><a href="#生成json格式数据" class="headerlink" title="生成json格式数据"></a>生成json格式数据</h2><p>生成json格式的数据是借助json-lib所需的全部jar包做到的，可以到<a href="http://download.csdn.net/detail/u014481096/8493539" target="_blank" rel="external">这里</a>免费下载全部所需的jar包。下载完成后，导入到项目中。<br>这些jar包可以将List、Map、Bean、数组等转成json格式的数据，非常方便。下面的代码示例中，给出了一部分的例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">List&lt;String&gt; list = new ArrayList&lt;String&gt;();</div><div class="line">list.add(&quot;hello&quot;);</div><div class="line">list.add(&quot;world&quot;);</div><div class="line"></div><div class="line">HashMap&lt;String,String&gt; map = new HashMap&lt;String,String&gt;();</div><div class="line">map.put(&quot;name&quot;, &quot;attribute a&quot;);</div><div class="line">map.put(&quot;id&quot;,&quot;dingdangmao&quot;);</div><div class="line"></div><div class="line">people p1 = new people(&quot;zhangsan&quot;,&quot;310504&quot;,&quot;552339&quot;,259034);</div><div class="line">people p2 = new people(&quot;zhangsi&quot;,&quot;52083&quot;,&quot;85640&quot;,42153);</div><div class="line">people p3 = new people(&quot;zhangwu&quot;,&quot;515910&quot;,&quot;828669&quot;,362642);</div><div class="line">people p4 = new people(&quot;zhangliu&quot;,&quot;315910&quot;,&quot;728669&quot;,562642);</div><div class="line">people p5 = new people(&quot;zhangqi&quot;,&quot;415910&quot;,&quot;928669&quot;,162642);</div><div class="line"></div><div class="line">ArrayList&lt;String&gt; m = new ArrayList&lt;String&gt;();</div><div class="line">m.add(new String(p1.toString()));</div><div class="line">m.add(new String(p2.toString()));</div><div class="line">m.add(new String(p3.toString()));</div><div class="line">m.add(new String(p4.toString()));</div><div class="line">m.add(new String(p5.toString()));</div><div class="line"></div><div class="line">JSONArray j = JSONArray.fromObject(m);</div><div class="line">System.out.println(j);</div><div class="line"></div><div class="line">net.sf.json.JSONArray jsonArray = net.sf.json.JSONArray.fromObject(map);</div><div class="line"></div><div class="line">boolean[] boolArray = new boolean[]&#123;true,false,true&#125;;      </div><div class="line">JSONArray jsonArray1 = JSONArray.fromObject( boolArray );      </div><div class="line">System.out.println( jsonArray1 );      </div><div class="line">System.out.println(jsonArray.toString());</div><div class="line"></div></pre></td></tr></table></figure><h2 id="将json格式的数据写入文件"><a href="#将json格式的数据写入文件" class="headerlink" title="将json格式的数据写入文件"></a>将json格式的数据写入文件</h2><p>将已有的json格式文件写入文件和其他的Java写文件并没有太大的区别，但为了做到有格式的将json对象写出到文件中，是需要参考数据结构中的括号匹配问题的。这里参考了<a href="http://blog.csdn.net/gemuandyou/article/details/46737879" target="_blank" rel="external">CSDN的博客</a>，感谢作者。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public void writeToJson(String filePath,JSONArray object) throws IOException</div><div class="line">&#123;</div><div class="line">    File file = new File(filePath);</div><div class="line">    char [] stack = new char[1024];</div><div class="line">    int top=-1;</div><div class="line"></div><div class="line">    String string = object.toString();</div><div class="line"></div><div class="line">    StringBuffer sb = new StringBuffer();</div><div class="line">    char [] charArray = string.toCharArray();</div><div class="line">    for(int i=0;i&lt;charArray.length;i++)&#123;</div><div class="line">        char c= charArray[i];</div><div class="line">        if (&apos;&#123;&apos; == c || &apos;[&apos; == c) &#123;  </div><div class="line">            stack[++top] = c; </div><div class="line">            sb.append(&quot;\n&quot;+charArray[i] + &quot;\n&quot;);  </div><div class="line">            for (int j = 0; j &lt;= top; j++) &#123;  </div><div class="line">                sb.append(&quot;\t&quot;);  </div><div class="line">            &#125;  </div><div class="line">            continue;  </div><div class="line">        &#125;</div><div class="line">         if ((i + 1) &lt;= (charArray.length - 1)) &#123;  </div><div class="line">                char d = charArray[i+1];  </div><div class="line">                if (&apos;&#125;&apos; == d || &apos;]&apos; == d) &#123;  </div><div class="line">                    top--; </div><div class="line">                    sb.append(charArray[i] + &quot;\n&quot;);  </div><div class="line">                    for (int j = 0; j &lt;= top; j++) &#123;  </div><div class="line">                        sb.append(&quot;\t&quot;);  </div><div class="line">                    &#125;  </div><div class="line">                    continue;  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">            if (&apos;,&apos; == c) &#123;  </div><div class="line">                sb.append(charArray[i] + &quot;&quot;);  </div><div class="line">                for (int j = 0; j &lt;= top; j++) &#123;  </div><div class="line">                    sb.append(&quot;&quot;);  </div><div class="line">                &#125;  </div><div class="line">                continue;  </div><div class="line">            &#125;  </div><div class="line">            sb.append(c);  </div><div class="line">        &#125;  </div><div class="line">        Writer write = new FileWriter(file);  </div><div class="line">        write.write(sb.toString());  </div><div class="line">        write.flush();  </div><div class="line">        write.close();  </div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure><h1 id="one-more-thing"><a href="#one-more-thing" class="headerlink" title="one more thing"></a>one more thing</h1><p>在将json格式的数据写出到文件的时候，可能需要写出”号来，在控制台输出的时候，很多人都知道使用转意符，即System.out.println(“/“”); ，不过在尝试写入到文件的时候，发现这么搞行不通，输出到文件的时候还是会有/，这该怎么办呢？<br>突发奇想，在需要输出的String的基础上再包一层new String(string)<strong>消化</strong>掉转意符。真的成功了！有时候，真的需要一点灵感~<br><img src="http://ww2.sinaimg.cn/large/aa2320a8gw1evvieprj07j214c0qqn3r.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Json&quot;&gt;&lt;a href=&quot;#Json&quot; class=&quot;headerlink&quot; title=&quot;Json&quot;&gt;&lt;/a&gt;Json&lt;/h1&gt;&lt;h2 id=&quot;Json是什么&quot;&gt;&lt;a href=&quot;#Json是什么&quot; class=&quot;headerlink&quot; title=&quot;Jso
      
    
    </summary>
    
      <category term="Java" scheme="http://zhihaozhang.github.io/categories/Java/"/>
    
    
      <category term="Json" scheme="http://zhihaozhang.github.io/tags/Json/"/>
    
  </entry>
  
</feed>
