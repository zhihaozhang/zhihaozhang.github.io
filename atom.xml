<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chih-Hao&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/ee6c42acd9e6fdf6da073aabf58a2ad9</icon>
  <subtitle>骨灰级果粉</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhihaozhang.github.io/"/>
  <updated>2018-05-20T11:30:46.225Z</updated>
  <id>http://zhihaozhang.github.io/</id>
  
  <author>
    <name>Chih-Hao</name>
    <email>zhihaozhang@me.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面向协议编程初探</title>
    <link href="http://zhihaozhang.github.io/2018/05/20/ProtocolOP/"/>
    <id>http://zhihaozhang.github.io/2018/05/20/ProtocolOP/</id>
    <published>2018-05-20T09:06:16.024Z</published>
    <updated>2018-05-20T11:30:46.225Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从编程范式讲起"><a href="#从编程范式讲起" class="headerlink" title="从编程范式讲起"></a>从编程范式讲起</h1><p>或许你经常听到诸如面向对象编程、面向过程编程、面向协议编程、函数式编程这些词，心中也不免疑惑，这些词都是些啥？</p><h2 id="wiki这样解释编程范式"><a href="#wiki这样解释编程范式" class="headerlink" title="wiki这样解释编程范式"></a>wiki这样解释编程范式</h2><p>相比于本文要介绍的面向协议编程，面向对象编程的名声似乎更响。面向对象由于<em>C++</em>和<em>java</em>的流行，成为近二十年来最为流行的<strong><a href="https://zh.wikipedia.org/wiki/编程范型" target="_blank" rel="external">编程范式</a></strong>。其他编程范式还有比面向对象更早的<strong>面向过程编程</strong>、<strong>指令编程</strong>，以及新兴的以<em>Haskell</em>为代表的<em>*函数式</em>编程和苹果提出的<em>面向协议</em>编程。</p><pre><code>&gt; 编程范式是一类典型的**编程风格**，是指从事软件工程的一类典型的风格（可以对照方法学）。编程范型提供了（同时决定了）程序员对程序执行的看法。             ——wiki</code></pre><h2 id="我理解的编程范式"><a href="#我理解的编程范式" class="headerlink" title="我理解的编程范式"></a>我理解的编程范式</h2><p>说说我的理解，我认为编程范式<strong>反应了某种编程语言的设计者希望程序员在使用他设计的语言时，用什么样的方式去思考问题。</strong>因此不同的编程范式各有自身的长处，也难免有不足之处，在应对各种问题的时候，某种编程范式可能会更适合一些，选择得当，程序员的工作量会减少很多。</p><p>一种语言，可能支持多种编程范式，例如Swift，既支持面向协议编程，又支持面向对象编程、面向协议编程和函数式编程。只是在解决不同任务时，某些范式更合适。</p><h3 id="Swift-amp-面向对象编程"><a href="#Swift-amp-面向对象编程" class="headerlink" title="Swift &amp; 面向对象编程"></a>Swift &amp; 面向对象编程</h3><p>举个例子，由于历史原因，在开发Cocoa和cocoa touch程序时，还是广泛使用了UIkit、Foundation框架和控制器视图(ViewController)，他们使用的是OC时代的面向对象编程的方式，从<strong>继承</strong>的角度去考虑问题的。</p><p><img src="http://img.my.csdn.net/uploads/201210/18/1350528267_1570.jpg" alt=""></p><blockquote><p>UIkit框架类组织架构图</p></blockquote><h3 id="Swift-amp-面向过程编程"><a href="#Swift-amp-面向过程编程" class="headerlink" title="Swift &amp; 面向过程编程"></a>Swift &amp; 面向过程编程</h3><p>在解决<strong>动画</strong>、<strong>渲染</strong>、<strong>数据可视化</strong>等问题时，还是以古老的面向过程式的思维方式进行编程。因为在画图时，先绘制的东西会被后绘制的东西盖住，形成<strong>层(Layer)</strong>的概念。如果不能保证代码是同步一条条执行，那很可能每次渲染出来的图形是不同的。</p><h3 id="Swift-amp-函数式编程"><a href="#Swift-amp-函数式编程" class="headerlink" title="Swift &amp; 函数式编程"></a>Swift &amp; 函数式编程</h3><p><a href="https://objccn.io/products/functional-swift/" target="_blank" rel="external">函数式编程</a>本身是一个很大的课题，精髓是避免使用程序状态和可变对象，从而降低程序复杂度。函数式编程强调执行的结果，而非执行的过程。我们先构建一系列简单却具有一定功能的小函数，然后再将这些函数进行组装以实现完整的逻辑和复杂的运算，这是函数式编程的基本思想。</p><p>Swift在函数式编程方面表现虽不如Haskell来的纯粹，但是作为一个比Haskell流行的多的语言，和很多已有的函数式编程语言，Swift在语法上更加优雅灵活，语言本身也遵循了函数式的设计模式，是大部分程序员接触函数式编程的第一门语言。以后有机会单独介绍一下函数式编程，有兴趣的读者也可以先看chase Zhang的这篇<a href="https://io-meter.com/2017/05/29/A-Brief-Intro-to-Functional-Programming/" target="_blank" rel="external">blog</a>。</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1frhyb0vzaaj30q80er0t2.jpg" alt=""></p><h1 id="面向协议编程出现的历史"><a href="#面向协议编程出现的历史" class="headerlink" title="面向协议编程出现的历史"></a>面向协议编程出现的历史</h1><p>回到今天的主角，面向协议编程。面向协议编程是由面向对象编程演变来的，协议在诸如c++和java等面向对象的语言中有一个别名，<strong>接口</strong>。(别骂街、别关网页，好戏在后头)</p><h2 id="面向对象编程的好处"><a href="#面向对象编程的好处" class="headerlink" title="面向对象编程的好处"></a>面向对象编程的好处</h2><p>面向对象编程这些年能够风光无限，主要是由于它有的很多优点，例如：</p><ol><li>数据封装</li><li>访问控制</li><li>类型抽象为类</li><li>继承关系，更符合人类思维</li><li>代码以逻辑关系组织到一起，方便阅读</li><li>由于继承、多态的特性，自然设计出高内聚、低耦合的系统结构，使得系统更灵活、更容易扩展，而且成本较低</li><li>在设计时，可重用现有的，在以前的项目的领域中已被测试过的类使系统满足业务需求并具有较高的质量</li></ol><p>这么多优点，不可能一下全抛弃，所以也注定了面向协议编程不是一种革命性的编程范式，而是对面向对象编程的改良和演变。</p><h2 id="Who-is-Crusty-at-Apple"><a href="#Who-is-Crusty-at-Apple" class="headerlink" title="Who is Crusty at Apple"></a>Who is Crusty at Apple</h2><p>长久以来，大家似乎默认了面向对象编程的好处都是由class带来的，但在苹果公司内部，有个叫Crusty的老兄<strong>think different</strong>了，他认为这一切是抽象类型带来的，而不是class带来的。我们知道，在面向对象编程中，接口和类都是对数据类型的抽取，类只是抽象类型众多实现的手段之一。在很多编程语言中，Struct和枚举同样可以做到对数据类型的抽取。</p><blockquote><p>It’s Type, not Classes.                           ————Crusty</p></blockquote><p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1frhz1ha9i8j30jg0d6dg6.jpg" alt=""></p><p>Crusty认为，较好的抽象类型应该：</p><ol><li>更多地支持值类型，同时也支持引用类型</li><li>更多地支持静态类型关联（编译期），同时也支持动态派发（runtime）</li><li>结构不庞大不复杂</li><li>模型可扩展</li><li>不给模型强制添加数据</li><li>不给模型增加初始化任务的负担</li><li>清楚哪些方法该实现哪些方法不需实现</li></ol><p>经过改良的接口，达到了上面的要求，并改名为协议。至此，苹果决定将面向对象中的继承父类发展为服从协议，面向协议编程出现了。</p><h1 id="面向协议编程的好处"><a href="#面向协议编程的好处" class="headerlink" title="面向协议编程的好处"></a>面向协议编程的好处</h1><p>前面提到了，经过Apple改良的接口达到了上节提出的较好抽象类型的目标。Swift的面向协议编程相比于OC的面向对象编程的好处主要体现在两点：1.<strong>动态派发的安全性</strong>、2.<strong>横切关注点</strong>。</p><h2 id="动态派发的安全性"><a href="#动态派发的安全性" class="headerlink" title="动态派发的安全性"></a>动态派发的安全性</h2><p>OC有强大的Runtime，在OC中，message与方法是在执行阶段绑定的，而不是编译阶段。简单的说 [a someFunc] 这样一个调用，在编译阶段，编译器并不知道someFunc要执行哪段代码。这个时候[a someFunc]会被转换为 objc_msgSend(a, “someFunc”)，字面的意思也很容易理解，就是给a这个instance，发“someFunc”这个消息，以selector的形式。在运行阶段，执行到上述的objc_msgSend这个函数时。函数内部会到a对应的内存地址，寻找someFunc这个方法的地址，并执行。如果找不到，就会抛一个“unknown selector sent to instance”的异常。（比如.h中声明了方法，但.m中没有实现，就可以重现这个错误）</p><p>下面举的例子来自于喵神在MDCC 16上的演讲<a href="https://blog.csdn.net/it_zhaoxiaowei/article/details/53436851" target="_blank" rel="external">《面向协议编程与 Cocoa 的邂逅》</a>中的ppt：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="type">ViewController</span> *v1 = ...</div><div class="line">[v1 myMethod];</div><div class="line"><span class="type">AnotherViewController</span> *v2 = ...</div><div class="line">[v2 myMethod];</div><div class="line"><span class="type">NSObject</span> *v3 = [<span class="type">NSObject</span> new] <span class="comment">// v3  `myMethod`</span></div><div class="line"><span class="type">NSArray</span> *array = @[v1, v2, v3];</div><div class="line"><span class="keyword">for</span> (id obj <span class="keyword">in</span> array) &#123;</div><div class="line">    [obj myMethod];</div><div class="line">&#125;</div><div class="line"><span class="comment">// Runtime error:</span></div><div class="line"><span class="comment">// unrecognized selector sent to instance blabla</span></div></pre></td></tr></table></figure><p>上面的代码是可以编译过的，但是在运行时程序会崩溃。有了<strong>协议</strong>(<strong>protocol</strong>),可以申明数组的每个对象都是遵从某个协议的，如果塞进去了不遵从该协议的对象，就会报错，通不过编译。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Greetable</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">greet</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cat</span>: <span class="title">Greetable</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> name: <span class="type">String</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">greet</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"meow~ <span class="subst">\(name)</span>"</span>)</div><div class="line">&#125; &#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> array: [<span class="type">Greetable</span>] = [</div><div class="line">        <span class="type">Person</span>(name: <span class="string">"Wei Wang"</span>),</div><div class="line">        <span class="type">Cat</span>(name: <span class="string">"onevcat"</span>)]</div><div class="line"><span class="keyword">for</span> obj <span class="keyword">in</span> array &#123;</div><div class="line">    obj.greet()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Bug</span>: <span class="title">Greetable</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> name: <span class="type">String</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// Compiler Error:</span></div><div class="line"><span class="comment">// 'Bug' does not conform to protocol 'Greetable'</span></div><div class="line"><span class="comment">// protocol requires function 'greet()'</span></div></pre></td></tr></table></figure><h2 id="横切关注点-Cross-Cutting-Concerns"><a href="#横切关注点-Cross-Cutting-Concerns" class="headerlink" title="横切关注点(Cross-Cutting Concerns)"></a>横切关注点(Cross-Cutting Concerns)</h2><p>由于大部分面向对象的编程语言都是单继承的，导致了某些功能是不同类之间都需要的，但是由于改类已经继承了其他类，或者无法将不同类之间抽取出更多共性(或者说对于某一个小功能点来这样做代价太大)，成为他们的父类，这样不得不在每个类里面重复一遍代码，使得代码很冗长。这样的小功能就可以称为横切关注点。</p><p>还是直接拿喵神的例子，假设我们有一个 ViewController，它继承自UIViewController，我们向其中添加一个 myMethod，如果这时候我们又有一个继承自 UITableViewController 的 AnotherViewController，我们也想向其中添加同样的 myMethod，这时，我们迎来了 OOP 的一大困境，那就是我们很难在不同继承关系的类里共用代码。这里的问题用“行话”来说叫做“横切关注点” (Cross-Cutting Concerns)。我们的关注点 myMethod 位于两条继承链 (UIViewController -&gt; ViewCotroller 和 UIViewController -&gt; UITableViewController -&gt; AnotherViewController) 的横切面上。面向对象是一种不错的抽象方式，但是肯定不是最好的方式。它无法描述两个不同事物具有某个相同特性这一点。在这里，特性的组合要比继承更贴切事物的本质。</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fri12dytq6j30c3079dfs.jpg" alt=""></p><p>在swift中很容易抽取出协议，并用<strong>extension</strong>关键字提供协议的默认实现，从而避免的代码的重复。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>1.<a href="https://blog.csdn.net/it_zhaoxiaowei/article/details/53436851" target="_blank" rel="external">《面向协议编程与 Cocoa 的邂逅》</a><br>2.<a href="https://zh.wikipedia.org/wiki/编程范型" target="_blank" rel="external">wiki:编程范式</a><br>3.<a href="https://io-meter.com/2017/05/29/A-Brief-Intro-to-Functional-Programming/" target="_blank" rel="external">A Brief Intro to Functional Programming</a><br>4.<a href="https://www.zhihu.com/question/39844612" target="_blank" rel="external">Objective-C 的消息机制如何理解</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;从编程范式讲起&quot;&gt;&lt;a href=&quot;#从编程范式讲起&quot; class=&quot;headerlink&quot; title=&quot;从编程范式讲起&quot;&gt;&lt;/a&gt;从编程范式讲起&lt;/h1&gt;&lt;p&gt;或许你经常听到诸如面向对象编程、面向过程编程、面向协议编程、函数式编程这些词，心中也不免疑惑，这些词
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="swift" scheme="http://zhihaozhang.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift5 新特性了解一下？</title>
    <link href="http://zhihaozhang.github.io/2018/05/09/swift5/"/>
    <id>http://zhihaozhang.github.io/2018/05/09/swift5/</id>
    <published>2018-05-09T13:08:29.803Z</published>
    <updated>2018-05-11T14:49:21.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>话说这两天好像是Google IO召开的日子，借机蹭一波热度，唱个反调，浅析一下Swift5可能会出现的新特性，也算是为下个月即将举办的<strong>WWDC</strong>预热预热吧。</p><h1 id="ABI稳定性"><a href="#ABI稳定性" class="headerlink" title="ABI稳定性"></a>ABI稳定性</h1><p>ABI稳定性这个话题是一个历史遗留任务，最初是Swift3的目标，苹果的拖延症一直拖到了Swift5，还不一定可以实现。这也是国内很多公司不敢全面拥抱Swift的<strong>重要原因之一</strong>。</p><h2 id="ABI是啥"><a href="#ABI是啥" class="headerlink" title="ABI是啥"></a>ABI是啥</h2><p>ABI是Application Binary Interfaces（应用二进制接口）的缩写，它描述了应用程序和操作系统或其他应用程序的低级接口。</p><p>在应用程序运行时，Swift二进制需要和其他库或组件通过ABI进行接触，因此ABI定义了非常底层的细节。比如：如何调用一个函数，数据在内存中是如何存储的、元数据在哪以及如何获取到。</p><p>由于现在ABI是不稳定的，因此每一个APP都不得不绑定特定版本的Swift动态库。这样从外面看起来，Swift与App的关联比ios系统要更紧密。</p><p>举个例子来说，app1使用的是Swift 4.0，因此它绑定的是包含4.0 ABI的Swift 4.0动态库，而app2使用的是Swift 4.1，它绑定的就是包含4.1 ABI的Swift 4.1动态库。如果ABI变得稳定了，那么ABI就可以抽出来，集成到ios系统中，因为它可以跟Swift的任一版本兼容。</p><h2 id="ABI的重要性"><a href="#ABI的重要性" class="headerlink" title="ABI的重要性"></a>ABI的重要性</h2><p>通过上面的描述，应该不难看出ABI的重要性了，总结一下ABI稳定性带来的好处吧：</p><ul><li>App所占的大小会减小</li><li>Swift变化也没现在这么频繁</li><li>版本变化时，更少的改动</li><li>因为不需要绑定特定版本的swift，开发者可以做出预编译的框架</li></ul><p>但凡事都有两面性，由于带上了ABI这个脚链，不可避免的也会引入一些缺点：</p><ul><li>限制了接口的变动</li><li>Swift的发展和演化需要考虑的东西也渐渐多了起来</li></ul><h1 id="Async-Await-模式"><a href="#Async-Await-模式" class="headerlink" title="Async/Await 模式"></a>Async/Await 模式</h1><p>熟悉javascript的朋友应该对这个模式不陌生，在ES7中，也加入了这个模式应对异步编程。这个好用的特性，即将引入Swift5！</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>之前，例如错误处理、回调之类的异步API用起来挺麻烦的，组合调用时很容易产生出复杂的控制流，用Swift的guard let语法糖在闭包调用中看起来重重嵌套，开发者很难知道当前所处的上下文。</p><p>举个例子：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadWebResource</span><span class="params">(<span class="number">_</span> path: String, completionBlock: <span class="params">(result: Resource)</span></span></span> -&gt; <span class="type">Void</span>) &#123; ... &#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">decodeImage</span><span class="params">(<span class="number">_</span> r1: Resource, <span class="number">_</span> r2: Resource, completionBlock: <span class="params">(result: Image)</span></span></span> -&gt; <span class="type">Void</span>)</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">dewarpAndCleanupImage</span><span class="params">(<span class="number">_</span> i : Image, completionBlock: <span class="params">(result: Image)</span></span></span> -&gt; <span class="type">Void</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">processImageData1</span><span class="params">(completionBlock: <span class="params">(result: Image)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</div><div class="line">   loadWebResource(<span class="string">"dataprofile.txt"</span>) &#123; dataResource <span class="keyword">in</span></div><div class="line">      loadWebResource(<span class="string">"imagedata.dat"</span>) &#123; imageResource <span class="keyword">in</span></div><div class="line">         decodeImage(dataResource, imageResource) &#123; imageTmp <span class="keyword">in</span></div><div class="line">            dewarpAndCleanupImage(imageTmp) &#123; imageResult <span class="keyword">in</span></div><div class="line">               completionBlock(imageResult)</div><div class="line">             &#125;</div><div class="line">          &#125;</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>引入Async/Await模式后，现在的代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadWebResource</span><span class="params">(<span class="number">_</span> path: String)</span></span> async -&gt; <span class="type">Resource</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">decodeImage</span><span class="params">(<span class="number">_</span> r1: Resource, <span class="number">_</span> r2: Resource)</span></span> async -&gt; <span class="type">Image</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">dewarpAndCleanupImage</span><span class="params">(<span class="number">_</span> i : Image)</span></span> async -&gt; <span class="type">Image</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">processImageData1</span><span class="params">()</span></span> async -&gt; <span class="type">Image</span> &#123;</div><div class="line">    <span class="keyword">let</span> dataResource = await loadWebResource(<span class="string">"dataprofile.txt"</span>)</div><div class="line">    <span class="keyword">let</span> imageResource = await loadWebResource(<span class="string">"imagedata.dat"</span>)</div><div class="line">    <span class="keyword">let</span> imageTmp = await decodeImage(dataResource, imageResource)</div><div class="line">    <span class="keyword">let</span> imageResult = await dewarpAndCleanupImage(imageTmp)</div><div class="line">    <span class="keyword">return</span> imageResult</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>此处应有掌声</p></blockquote><h1 id="Actors"><a href="#Actors" class="headerlink" title="Actors"></a>Actors</h1><ul><li>Actors是一个新概念，它表示现实世界中的一些概念，比如“一个文档”、“一台设备”、“一次网络请求”等。</li><li>它是调度队列、可运行在该队列上并受该队列保护的数据的组合</li><li>可以认为是类似于class和protocol的一种新类型</li><li>允许开发者在其中定义内部变量/函数从而管理数据、进行相关操作</li><li>不能返回值、抛出异常、没有inout参数</li><li>开发者可以与之异步通信，Actor可以保证它所保护的数据只被运行于其上的代码接触到</li><li>UIKit和AppKit可以将主线程建模成MainActor</li><li>和class、protocol一样，开发者可以用extension关键字扩展MainActor</li><li>当引用数变为0时，Actor生命周期完成</li></ul><p>举个例子，假设正在开发一个tableview的应用，内容是一个string数组(受保护数据)，代码看起来应该是这样:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">actor <span class="type">TableModel</span> &#123;</div><div class="line">    <span class="keyword">let</span> mainActor : <span class="type">TheMainActor</span></div><div class="line">    <span class="keyword">var</span> theList : [<span class="type">String</span>] = [] &#123;</div><div class="line">        <span class="keyword">didSet</span> &#123;</div><div class="line">            mainActor.updateTableView(theList)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">init</span>(mainActor: <span class="type">TheMainActor</span>) &#123; </div><div class="line">        <span class="keyword">self</span>.mainActor = mainActor </div><div class="line">    &#125;</div><div class="line">    actor <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(entry: String)</span></span> &#123;</div><div class="line">      theList.append(entry)</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><h1 id="其他提升"><a href="#其他提升" class="headerlink" title="其他提升"></a>其他提升</h1><ul><li>String:对正则表达式<strong>Language级别</strong>的支持、性能提升。</li><li>标准库的改进</li><li>改进Foundation</li><li>增加了新语法</li></ul><p>让我们一起静待WWDC2018的到来！</p><p>参考</p><ol><li><a href="https://www.developerinsider.in/what-will-be-new-in-swift-5/" target="_blank" rel="external">本文主要翻译自：DeveloperInsider</a>.</li><li><a href="https://www.jianshu.com/p/5860f5542f21" target="_blank" rel="external">Swift库二进制接口(ABI)兼容性研究</a></li><li><a href="https://imtx.me/archives/2370.html" target="_blank" rel="external">Swift 5 的蓝图：ABI 稳定</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;话说这两天好像是Google IO召开的日子，借机蹭一波热度，唱个反调，浅析一下Swift5可能会出现的新特性，也算是为下个月即将举办的&lt;s
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="swift" scheme="http://zhihaozhang.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>GoBACKSPACE————致敬Go2Shell的Finder插件</title>
    <link href="http://zhihaozhang.github.io/2018/04/17/GoBACKSPACE/"/>
    <id>http://zhihaozhang.github.io/2018/04/17/GoBACKSPACE/</id>
    <published>2018-04-17T12:52:36.290Z</published>
    <updated>2018-04-18T02:55:39.971Z</updated>
    
    <content type="html"><![CDATA[<p>仅以此项目<strong>向Go2Shell致敬</strong>、也庆祝Github10周年生日快乐，整个项目开源于<a href="https://github.com/zhihaozhang/GoBACKSPACE" target="_blank" rel="external">Github</a>，直接想用的朋友可以去<a href="https://pan.baidu.com/s/1EhGCUSVwVk1oXUCwbMfa5w" target="_blank" rel="external">百度网盘</a>下载。</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在macOS系统中，<strong>Finder</strong>(中文被官方译为访达)扮演着文件管理器的角色。在大多数场景下，Finder还是挺好用的，但是有一点让我很抓狂，那就是我在Finder视图中发现了一个文件或文件夹，想去它的父级目录时比较麻烦，因为Finder工具栏左边的&lt; &gt;按钮经常是灰色的，而且也只是能记录着你之前访问过的文件路径历史，有点类似于safari里访问过网页的历史。</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fqfyhfema8j3096050wei.jpg" alt=""></p><blockquote><p>Finder(访达)的工具栏截图 (&lt; &gt;为灰色)，蓝色指南针为GoBACKSPACE</p></blockquote><p>macOS的Finder只帮你记录了按时间先后访问过的文件地址，<strong>这意味着按&lt;键并不一定意味着去父级文件夹，它只表示是你之前访问过的文件夹。</strong> 更多情况下，&lt;和&gt;按键是灰色的，不让按的状态。</p><p>而GoBACKSPACE的出现将彻底改变这一现状，GoBACKSPACE可以做到的就是让你在文件的<strong>绝对</strong>路径关系之间浏览文件。主要需要解决的绝对路径去父文件夹的功能，因为去子文件夹只需要靠双击操作即可。我觉得<strong>绝对</strong>路径关系是更符合我思考的一种方式。去父文件夹这件事还是经常发生的，比如你在一个项目视图下，想去父目录将整个项目删除或AirDrop分享给其他人；搜索到了一张照片，想将该目录下所有照片打包等…</p><p>由于GoBACKSPACE和Finder之间的关系紧密，把它做成一个类似Go2Shell那样的插件是更好的选择；考虑到GoBACKSPACE的开发初衷是帮助用户更好的在不同文件夹间切换，因此这里选用了一个指南针作为logo，乍一看跟safari的图标好像，估计上架时会被苹果喷。看着旁边的Go2Shell，竟毫无违和感。</p><p>希望至此，读者已经明白了我<strong>为什么</strong>要开发GoBACKSPACE。</p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>首先要下载这个软件，我将安装文件打包上传到了<a href="https://pan.baidu.com/s/1EhGCUSVwVk1oXUCwbMfa5w" target="_blank" rel="external">百度网盘</a>，无需密码即可下载。</p><p>为了帮助读者将GoBACKSPACE添加到Finder工具栏，我做了一个Gif如下。</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fqfwji6347g30go0dekjm.gif" alt=""></p><blockquote><p>将GoBACKSPACE添加到Finder工具栏的方法</p></blockquote><p>一次添加即可，无需重复添加，使用它的时候，需要两个步骤：</p><ul><li>步骤1：点击icon</li><li>步骤2：<strong>没有步骤2!!</strong></li></ul><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fqfxcspvfig30go09lqv5.gif" alt="App icon"></p><blockquote><p>插件的最终效果demo</p></blockquote><h1 id="核心功能的实现"><a href="#核心功能的实现" class="headerlink" title="核心功能的实现"></a>核心功能的实现</h1><p>本项目的需求是我个人的真实需求，实现的时候参考了PathToGo这个项目，该项目返回上层使用了<strong>AppleScript</strong>，苹果自己的脚本语言，并使用Swift与之进行交互，返回脚本执行成功与否；并根据脚本的执行情况给用户弹toast，以免在最顶层目录时，不能继续往父级目录前进给用户带来困扰。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">tell</span> <span class="built_in">application</span> <span class="string">"Finder"</span></div><div class="line"><span class="keyword">set</span> currentPath <span class="keyword">to</span> <span class="keyword">POSIX path</span> <span class="keyword">of</span> (target <span class="keyword">of</span> window <span class="number">1</span> <span class="keyword">as</span> <span class="built_in">alias</span>)</div><div class="line"><span class="keyword">set</span> myArray <span class="keyword">to</span> <span class="keyword">my</span> theSplit(currentPath, <span class="string">"/"</span>)</div><div class="line"><span class="keyword">set</span> lengthOfArray <span class="keyword">to</span> <span class="keyword">the</span> <span class="built_in">length</span> <span class="keyword">of</span> myArray</div><div class="line"><span class="keyword">set</span> the_path <span class="keyword">to</span> <span class="string">""</span> <span class="keyword">as</span> <span class="built_in">string</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> lengthOfArray ≤ <span class="number">3</span> <span class="keyword">then</span></div><div class="line"><span class="built_in">return</span> <span class="string">"fail"</span></div><div class="line"><span class="keyword">else</span></div><div class="line"><span class="keyword">set</span> lengthOfNewArray <span class="keyword">to</span> (lengthOfArray - <span class="number">2</span>)</div><div class="line"><span class="keyword">set</span> parentPath <span class="keyword">to</span> items <span class="number">2</span> <span class="keyword">through</span> lengthOfNewArray <span class="keyword">of</span> myArray</div><div class="line"></div><div class="line"><span class="keyword">repeat</span> <span class="keyword">with</span> anItem <span class="keyword">in</span> parentPath</div><div class="line"><span class="keyword">set</span> the_path <span class="keyword">to</span> the_path &amp; <span class="string">"/"</span> &amp; anItem</div><div class="line"><span class="keyword">end</span> <span class="keyword">repeat</span></div><div class="line"><span class="keyword">set</span> the_path <span class="keyword">to</span> the_path &amp; <span class="string">"/"</span></div><div class="line"><span class="comment">-- go2Parent(the_path)</span></div><div class="line"><span class="keyword">set</span> the_folder <span class="keyword">to</span> (<span class="keyword">POSIX file</span> the_path) <span class="keyword">as</span> <span class="built_in">alias</span></div><div class="line"><span class="keyword">tell</span> <span class="built_in">application</span> <span class="string">"Finder"</span></div><div class="line"><span class="built_in">activate</span></div><div class="line"><span class="keyword">if</span> window <span class="number">1</span> exists <span class="keyword">then</span></div><div class="line"><span class="keyword">set</span> target <span class="keyword">of</span> window <span class="number">1</span> <span class="keyword">to</span> the_folder</div><div class="line"><span class="keyword">else</span></div><div class="line">reveal the_folder</div><div class="line"><span class="keyword">end</span> <span class="keyword">if</span></div><div class="line"><span class="keyword">end</span> <span class="keyword">tell</span></div><div class="line"></div><div class="line"><span class="built_in">return</span> <span class="string">"OK"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">end</span> <span class="keyword">if</span></div><div class="line"></div><div class="line"><span class="built_in">return</span> myArray</div><div class="line"><span class="keyword">end</span> <span class="keyword">tell</span></div><div class="line"></div><div class="line"><span class="keyword">on</span> theSplit(theString, theDelimiter)</div><div class="line"><span class="comment">-- save delimiters to restore old settings</span></div><div class="line"><span class="keyword">set</span> oldDelimiters <span class="keyword">to</span> <span class="literal">AppleScript</span>'s <span class="literal">text item delimiters</span></div><div class="line"><span class="comment">-- set delimiters to delimiter to be used</span></div><div class="line"><span class="keyword">set</span> <span class="literal">AppleScript</span>'s <span class="literal">text item delimiters</span> <span class="keyword">to</span> theDelimiter</div><div class="line"><span class="comment">-- create the array</span></div><div class="line"><span class="keyword">set</span> theArray <span class="keyword">to</span> <span class="keyword">every</span> <span class="built_in">text</span> <span class="built_in">item</span> <span class="keyword">of</span> theString</div><div class="line"><span class="comment">-- restore the old setting</span></div><div class="line"><span class="keyword">set</span> <span class="literal">AppleScript</span>'s <span class="literal">text item delimiters</span> <span class="keyword">to</span> oldDelimiters</div><div class="line"><span class="comment">-- return the result</span></div><div class="line"><span class="built_in">return</span> theArray</div><div class="line"><span class="keyword">end</span> theSplit</div></pre></td></tr></table></figure><p>AppleScript的逻辑是将当前Finder视图的路径返回，然后将这个路径以”/”进行分割，并根据返回数组的长度，去掉最后两个元素，形成新的路径，让AppleScript控制Finder将当前页面替换为新的文件夹路径，由于AppleScript的原生性，体验还是非常顺滑的。</p><p>Toast的出现和消除添加了动画，且动画的时间都是可以设置的，实现于ToastWindowController.swift文件中，感兴趣的读者可以去将项目clone下来看看，我觉得这个部分可以单独抽出去成为一个小轮子，也来源于PathToGO。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://github.com/HansonStudio/PathToGo" target="_blank" rel="external">PathToGO</a></li><li><a href="https://www.flaticon.com" target="_blank" rel="external">flaticon</a></li><li><a href="https://segmentfault.com/a/1190000011273388" target="_blank" rel="external">AppleScript教程1</a></li><li><a href="http://erikslab.com/2007/08/31/applescript-how-to-split-a-string/" target="_blank" rel="external">Erik’s Lab</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;仅以此项目&lt;strong&gt;向Go2Shell致敬&lt;/strong&gt;、也庆祝Github10周年生日快乐，整个项目开源于&lt;a href=&quot;https://github.com/zhihaozhang/GoBACKSPACE&quot; target=&quot;_blank&quot; rel=&quot;exte
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="macOS开发" scheme="http://zhihaozhang.github.io/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>极客编程日历桌面版开发笔记</title>
    <link href="http://zhihaozhang.github.io/2018/02/10/turingCal/"/>
    <id>http://zhihaozhang.github.io/2018/02/10/turingCal/</id>
    <published>2018-02-10T01:46:12.634Z</published>
    <updated>2018-02-10T01:49:11.880Z</updated>
    
    <content type="html"><![CDATA[<p>#背景介绍<br>图灵教育推出的<a href="http://www.ituring.com.cn/book/details/2625" target="_blank" rel="external"><strong>限量款编程日历2018</strong></a>，因为简约大气的设计和每周一个编程语言的介绍，在程序员中广受欢迎。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1foaaqel4dwj30u011i448.jpg" alt=""></p><blockquote><p>图灵教育推出的编程日历实体版</p></blockquote><p>不幸的是由于限量1000款，除去赠品的300多套，真正在售的只有600多套，很快就被抢购一空。值得欣慰的是，前天下午作者将pdf版本的日历公开<a href="http://www.ituring.com.cn/book/download/43507086-33c3-40e9-9115-d610e1333bca" target="_blank" rel="external">下载</a>。</p><p>在简书中也无意间看到有人用python片段将壁纸与当周的日历进行了融合，这个想法让我受到了启发，从该文章下面的评论看到很多用户(特别是mac用户)反映在 macOS 下，Wand 库有点小问题，GitHub 有人提到了这个 <a href="https://github.com/dahlia/wand/issues/324" target="_blank" rel="external">issue</a>。</p><p>我一直在使用的一款软件Blotter，吸附在桌面上的日历和待办事项，于是就萌生了一个将该pdf吸附在桌面上，并根据当前日期展示相应日期的应用，于是我花半天做了TuringCalendar这款应用,<a href="https://github.com/zhihaozhang/TuringCalendar" target="_blank" rel="external">开源地址</a>。欢迎有能力的开发者改进这款应用。</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1foabaeu23ij30m80dw77m.jpg" alt=""></p><blockquote><p>Blotter截图</p></blockquote><h1 id="TuringCalendar的现状"><a href="#TuringCalendar的现状" class="headerlink" title="TuringCalendar的现状"></a>TuringCalendar的现状</h1><p>由于时间仓促，这款软件有一些缺点需要后续解决。</p><ul><li>现在的默认将日历页放置在右上角，因为左上角被Blotter占了，后面需要做成可配置的。</li><li>现在是白底的，在浅色背景的桌面上会比较美观，在深色背景中就不那么美观了。关于这点我在简书上问过python代码的作者，他告诉我用<strong>通道混合</strong>来解决，目前尚在研究中。</li></ul><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fo9z6yw8fuj31dm1hkx6p.jpg" alt=""></p><blockquote><p>TuringCalendar截图</p></blockquote><h1 id="TuringCalendar开发过程"><a href="#TuringCalendar开发过程" class="headerlink" title="TuringCalendar开发过程"></a>TuringCalendar开发过程</h1><h2 id="将窗口固定在桌面上"><a href="#将窗口固定在桌面上" class="headerlink" title="将窗口固定在桌面上"></a>将窗口固定在桌面上</h2><p>macOS管理窗口的类是NSWindow，将窗口固定在桌面上是通过继承该类，并override 其中的某些方法做到的。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="keyword">init</span>(contentRect: <span class="type">NSRect</span>, styleMask style: <span class="type">NSWindow</span>.<span class="type">StyleMask</span>, backing backingStoreType: <span class="type">NSWindow</span>.<span class="type">BackingStoreType</span>, <span class="keyword">defer</span> flag: <span class="type">Bool</span>) &#123;</div><div class="line">      </div><div class="line">      <span class="keyword">super</span>.<span class="keyword">init</span>(contentRect: contentRect, styleMask: style, backing: backingStoreType, <span class="keyword">defer</span>: flag)</div><div class="line">      </div><div class="line">      <span class="keyword">self</span>.level = <span class="type">NSWindow</span>.<span class="type">Level</span>(rawValue: <span class="type">NSWindow</span>.<span class="type">Level</span>.<span class="type">RawValue</span>(<span class="type">CGWindowLevelForKey</span>(<span class="type">CGWindowLevelKey</span>.desktopWindow) - <span class="number">1</span>))</div><div class="line">      </div><div class="line">      <span class="keyword">self</span>.collectionBehavior = (<span class="type">NSWindow</span>.<span class="type">CollectionBehavior</span>(rawValue: <span class="type">NSWindow</span>.<span class="type">CollectionBehavior</span>.<span class="type">RawValue</span>(<span class="type">UInt8</span>(<span class="type">NSWindow</span>.<span class="type">CollectionBehavior</span>.canJoinAllSpaces.rawValue) |</div><div class="line">          <span class="type">UInt8</span>(<span class="type">NSWindow</span>.<span class="type">CollectionBehavior</span>.stationary.rawValue) |</div><div class="line">          <span class="type">UInt8</span>(<span class="type">NSWindow</span>.<span class="type">CollectionBehavior</span>.ignoresCycle.rawValue)))</div><div class="line">      )</div><div class="line">      </div><div class="line">      <span class="keyword">self</span>.backgroundColor = <span class="type">NSColor</span>.clear</div><div class="line">      <span class="keyword">self</span>.isOpaque = <span class="literal">false</span></div><div class="line">      </div><div class="line">      </div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="keyword">var</span> canBecomeMain: <span class="type">Bool</span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="keyword">var</span> canBecomeKey: <span class="type">Bool</span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>init方法中，指定了窗口的层级为desktopWindow-1，并且指定了窗口的背景色和一些操作的影响，主要是<strong>expose</strong>操作的时候，该窗口不应该和其他普通窗口一样，收缩起来。同时override相应方法，让该窗口不可以成为Main窗口和Key窗口。</p><h2 id="读取pdf"><a href="#读取pdf" class="headerlink" title="读取pdf"></a>读取pdf</h2><p>读取pdf是通过PDFView完成的，需要导入<strong>Quartz</strong>库。在StoryBoard中也有相关的组件，可以查到日历每页的宽高，在StoryBoard中指定为固定宽高即可。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@IBOutlet</span> <span class="keyword">var</span> calendarViewer: <span class="type">PDFView</span>!</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidLoad()</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> url = <span class="type">Bundle</span>.main.url(forResource: <span class="string">"calendar"</span>, withExtension: <span class="string">"pdf"</span>)</div><div class="line">    <span class="keyword">let</span> pdf = <span class="type">PDFDocument</span>(url: url!)</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> today = <span class="type">GetWeekByDate</span>(date: <span class="type">Date</span>())</div><div class="line">    </div><div class="line">    calendarViewer.document = pdf</div><div class="line">    calendarViewer.go(to: (pdf?.page(at: today-<span class="number">1</span>))!)</div><div class="line">    </div><div class="line">    <span class="comment">// Do any additional setup after loading the view.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里发现一个坑，PDFView是会响应鼠标事件的，上下滑会在页与页之间切换，由于PDFView是NSView的子类，因此可以override hitTest方法，让PDFView不响应相关事件，使用了extension关键字。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">PDFView</span></span>&#123;</div><div class="line">    <span class="keyword">open</span> <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">hitTest</span><span class="params">(<span class="number">_</span> point: NSPoint)</span></span> -&gt; <span class="type">NSView</span>? &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="得到今天是今年的第几周"><a href="#得到今天是今年的第几周" class="headerlink" title="得到今天是今年的第几周"></a>得到今天是今年的第几周</h2><p>我将原作者提供的pdf文件进行了截取，只保留了我们需要的53个周的数据。通过下面的方法获取到当天是2018年的第几周，然后让PDFView跳到相应的页面。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetWeekByDate</span><span class="params">(date:Date)</span></span> -&gt;<span class="type">Int</span>&#123;</div><div class="line">     <span class="keyword">guard</span> <span class="keyword">let</span> calendar = <span class="type">NSCalendar</span>(identifier: <span class="type">NSCalendar</span>.<span class="type">Identifier</span>.gregorian) <span class="keyword">else</span> &#123;</div><div class="line">         <span class="keyword">return</span> <span class="number">0</span></div><div class="line">     &#125;</div><div class="line">     <span class="keyword">let</span> components = calendar.components([.weekOfYear,.weekOfMonth,.weekday,.weekdayOrdinal], from: date)</div><div class="line">    </div><div class="line">     <span class="keyword">return</span> components.weekOfYear!;</div><div class="line"> &#125;</div></pre></td></tr></table></figure><h2 id="将窗口固定在右上角"><a href="#将窗口固定在右上角" class="headerlink" title="将窗口固定在右上角"></a>将窗口固定在右上角</h2><p>控制窗口这件事是由windowController完成的，获取到相应的window，并调用setFrameOrigin方法指定窗口的初始x,y坐标即可。需要注意的是屏幕的坐标左下角是（0，0）。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">windowDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.windowDidLoad()</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> window = window, <span class="keyword">let</span> screen = window.screen &#123;</div><div class="line">        <span class="keyword">let</span> screenRect = screen.visibleFrame</div><div class="line">        <span class="keyword">let</span> offsetFromLeft = <span class="type">CGFloat</span>(screenRect.maxX - window.frame.width)</div><div class="line">        <span class="keyword">let</span> offsetFromTop = <span class="type">CGFloat</span>(<span class="number">0</span>)</div><div class="line">        <span class="keyword">let</span> offsetFromBottom = screenRect.maxY - window.frame.height - offsetFromTop</div><div class="line">        window.setFrameOrigin(<span class="type">NSPoint</span>(x: offsetFromLeft, y: offsetFromBottom))</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="与Python版本相比的优点"><a href="#与Python版本相比的优点" class="headerlink" title="与Python版本相比的优点"></a>与Python版本相比的优点</h2><p>相比于python版，<strong>TuringCalendar</strong>也有自己的优势，那就是不需要手动的去生成壁纸，而且每周要定时更换；环境的配置可能有一些坑，很多人都在评论里说配置没有成功。</p><p>最后，欢迎有能力的开发者改进<a href="https://github.com/zhihaozhang/TuringCalendar" target="_blank" rel="external">这款应用</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#背景介绍&lt;br&gt;图灵教育推出的&lt;a href=&quot;http://www.ituring.com.cn/book/details/2625&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;限量款编程日历2018&lt;/strong&gt;&lt;/a&gt;，因为简
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="macOS开发" scheme="http://zhihaozhang.github.io/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>更优雅的文件添加方式Drag &amp; Drop</title>
    <link href="http://zhihaozhang.github.io/2018/01/24/DragAndDrop/"/>
    <id>http://zhihaozhang.github.io/2018/01/24/DragAndDrop/</id>
    <published>2018-01-24T07:50:29.000Z</published>
    <updated>2018-01-24T07:50:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面基本完成了<strong>FileHider</strong>主要功能的开发工作，<a href="https://github.com/zhihaozhang/FileHider-for-mac" target="_blank" rel="external">开源地址</a>，该软件在百度网盘下载次数近100次，获得了一些人的认可，但也有一些人提出了不同的意见。感谢认可这款软件价值的人，同时也需要虚心听取不同意见。</p><p>不同意见主要集中在三点:</p><ul><li>FileHider实现的功能完全可以由命令行代替。关于这点，我不想否认，但是话说回来，并不是每个人都是程序员，都会使用terminal，顶级的程序员甚至可以不用GUI界面在terminal里完成所有的工作，但是有GUI界面大部分情况下还是能够提升<strong>普通人</strong>的工作效率的。况且，假设你今天隐藏了一个文件，也许你明天还记得，后天还记得，但是一个星期后呢？一个月后呢？</li><li>FileHider没有加密功能。关于这点，我在软件设计的初衷里已经说了，FileHider的定位是将某些文件对从你身边走过，可以看到你屏幕的人进行的隐藏，而不是可以操作你电脑的人。</li><li>某个文件不想隐藏了，想将其删掉，可以将remove file换成简单的-，跟左边的+也对应。这确实是一个好的建议，在最新版本的FileHider中采纳了该建议，感谢。</li></ul><p>关于建议部分，有个网友跟我的想法不谋而合，那就是每次添加文件都需要从文件选择器里从根路径一层一层找到想要隐藏的文件，这很麻烦；更多时候，那些文件就在Finder中，如果可以直接从Finder窗口中拖拽到FileHider中，那就太<strong>Mac Native</strong>了。于是，我就将这一功能实现了。</p><p><img src="https://ws1.sinaimg.cn/large/aa2320a8ly1fnpohtbv10g21ls1ukb1l" alt=""></p><blockquote><p>Drag &amp; drop in FileHider</p></blockquote><h1 id="Drag-amp-drop"><a href="#Drag-amp-drop" class="headerlink" title="Drag &amp; drop"></a>Drag &amp; drop</h1><h2 id="Drag-amp-drop-in-D3JS"><a href="#Drag-amp-drop-in-D3JS" class="headerlink" title="Drag &amp; drop in D3JS"></a>Drag &amp; drop in D3JS</h2><p>其实我对Drag &amp; drop并不陌生，在之前开发网页可视化组件时，就多次使用这一特性。支持这一操作，确实会增加可视化组件的可交互性。在D3JS中，Drag被分为了三个阶段，即dragstart、drag、dragend,分别对应于drag时间的<strong>开始</strong>、<strong>进行中</strong>、<strong>结束</strong>，类似于NSView的一个<strong>生命周期</strong>，在不同的阶段，实现不同的回调函数即可对Drag事件的全过程进行完整的控制。</p><h2 id="Drag-amp-drop-在其他地方的应用"><a href="#Drag-amp-drop-在其他地方的应用" class="headerlink" title="Drag &amp; drop 在其他地方的应用"></a>Drag &amp; drop 在其他地方的应用</h2><p>在ios11中，得益于iPad Pro的大屏幕，也有了Drag &amp; drop功能，虽然没仔细研究过，但应该是和macOS里的非常类似。</p><p>另外，锤子科技引以为傲的一步(oneStep)也实现了数据在不同应用间使用手势传递的功能。由于没有使用过，就不妄加评论了，但不难看出Drag &amp; drop是现阶段人机交互的趋势，因为它真的很自然，借用王自如的一句话,虽然用在这里可能并不是很合适。</p><blockquote><p>真正的科技，就是让你感受不到科技的存在。</p></blockquote><h2 id="Drag-amp-drop-in-FileHider"><a href="#Drag-amp-drop-in-FileHider" class="headerlink" title="Drag &amp; drop in FileHider"></a>Drag &amp; drop in FileHider</h2><p>FileHider只需要实现Drag &amp; drop的一半，因为它只需要接收外部拖拽进来的文件，并获取文件路径，将文件添加到隐藏文件列表中即可。</p><p>通过研究Drag &amp; drop的API文档发现它的设计和D3JS的设计有类似之处，都提供了对动作完整生命周期进行控制的<strong>钩子</strong>。但是似乎macOS中提供了更多的钩子，比如监控拖拽东西进来没有释放便移出去的情况(draggingExited)。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">draggingExited</span><span class="params">(<span class="number">_</span> sender: NSDraggingInfo?)</span></span> &#123;</div><div class="line">  isReceivingDrag = <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>相对应的，有刚进来时的钩子(draggingEntered)。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">draggingEntered</span><span class="params">(<span class="number">_</span> sender: NSDraggingInfo)</span></span> -&gt; <span class="type">NSDragOperation</span> &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>对于FileHider来说，我们需要指定TableView为Drag &amp; drop事件的终点，并指定可接受的文件类型，并在drag结束后，获取文件的完整路径，添加到tableView的datasource对应的数组中。</p><p>具体实现如下：首先生成DragDestinationView类，继承自NSView子类。由于NSView天然地实现了<strong>NSDraggingDestination</strong>协议，因此直接override相应的方法即可。然后在stroyboard页面指定Drag &amp; drop事件的终点对应的NSView为DragDestinationView。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">FileDragDelegate</span> : <span class="title">class</span></span>&#123;</div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">didFinishDrag</span><span class="params">(<span class="number">_</span> filePath:String)</span></span></div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DragDestinationView</span>: <span class="title">NSView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> delegate: <span class="type">FileDragDelegate</span>?</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">awakeFromNib</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.awakeFromNib()</div><div class="line">        <span class="comment">//注册可接受文件类型</span></div><div class="line">        <span class="keyword">self</span>.register(forDraggedTypes: [<span class="type">NSFilenamesPboardType</span>])</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//文件进入NSView</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">draggingEntered</span><span class="params">(<span class="number">_</span> sender: NSDraggingInfo)</span></span> -&gt; <span class="type">NSDragOperation</span> &#123;</div><div class="line">        <span class="keyword">let</span> sourceDragMask = sender.draggingSourceOperationMask()</div><div class="line">        <span class="keyword">let</span> pboard = sender.draggingPasteboard()</div><div class="line">        <span class="keyword">let</span> dragTypes = pboard.types! <span class="keyword">as</span> <span class="type">NSArray</span></div><div class="line">        <span class="keyword">if</span> dragTypes.<span class="built_in">contains</span>(<span class="type">NSFilenamesPboardType</span>) &#123;</div><div class="line">            <span class="keyword">if</span> sourceDragMask.<span class="built_in">contains</span>([.link]) &#123;</div><div class="line">                <span class="keyword">return</span> .link</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> sourceDragMask.<span class="built_in">contains</span>([.copy]) &#123;</div><div class="line">                <span class="keyword">return</span> .copy</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> .generic</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="comment">//获取数据，触发代理事件的方法</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">performDragOperation</span><span class="params">(<span class="number">_</span> sender: NSDraggingInfo?)</span></span>-&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">let</span> pboard = sender?.draggingPasteboard()</div><div class="line">        <span class="keyword">let</span> dragTypes = pboard!.types! <span class="keyword">as</span> <span class="type">NSArray</span></div><div class="line">        <span class="keyword">if</span> dragTypes.<span class="built_in">contains</span>(<span class="type">NSFilenamesPboardType</span>) &#123;</div><div class="line">            <span class="keyword">let</span> files = (pboard?.propertyList(forType: <span class="type">NSFilenamesPboardType</span>))! <span class="keyword">as</span>!  <span class="type">Array</span>&lt;<span class="type">String</span>&gt;</div><div class="line">            <span class="keyword">let</span> numberOfFiles = files.<span class="built_in">count</span></div><div class="line">            <span class="keyword">if</span> numberOfFiles &gt; <span class="number">0</span> &#123;</div><div class="line">                <span class="keyword">let</span> filePath = files[<span class="number">0</span>] <span class="keyword">as</span> <span class="type">String</span></div><div class="line">                <span class="keyword">if</span> <span class="keyword">let</span> delegate = <span class="keyword">self</span>.delegate &#123;</div><div class="line">                    <span class="type">NSLog</span>(<span class="string">"filePath <span class="subst">\(filePath)</span>"</span>)</div><div class="line">                    delegate.didFinishDrag(filePath)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在主ViewController中生成该NSView对应的Outlet，并实现FileDragDelegate协议，实现协议中的方法，即Drag &amp; drop事件完成后需执行的逻辑即可。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">FileDragDelegate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">didFinishDrag</span><span class="params">(<span class="number">_</span> filePath:String)</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> url = <span class="type">NSURL</span>(fileURLWithPath: filePath)</div><div class="line">        </div><div class="line">        filesList.append(url <span class="keyword">as</span> <span class="type">URL</span>)</div><div class="line">        <span class="built_in">print</span>(url)</div><div class="line">        tableview.reloadData()</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="其他Drag-amp-drop教程"><a href="#其他Drag-amp-drop教程" class="headerlink" title="其他Drag &amp; drop教程"></a>其他Drag &amp; drop教程</h1><p>Ray家出过Drag &amp; drop更系统、完整的介绍，这里贴出<a href="https://github.com/DeveloperLx/macOS_Development_Tutorials_translation/blob/master/Drag%20and%20Drop%20Tutorial%20for%20macOS.md" target="_blank" rel="external">链接</a>，供感兴趣，并想进一步学习的各位参考。</p><p><img src="https://ws1.sinaimg.cn/large/aa2320a8ly1fnrqw07njuj21bk0wygwc" alt=""></p><blockquote><p>完整的Drag &amp; drop session</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前面基本完成了&lt;strong&gt;FileHider&lt;/strong&gt;主要功能的开发工作，&lt;a href=&quot;https://github.com
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="macOS开发" scheme="http://zhihaozhang.github.io/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>AVHider for macOS开发笔记</title>
    <link href="http://zhihaozhang.github.io/2018/01/16/FileHider/"/>
    <id>http://zhihaozhang.github.io/2018/01/16/FileHider/</id>
    <published>2018-01-16T13:08:22.000Z</published>
    <updated>2018-01-16T13:25:33.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h1><p><del>AVHider （oh NO）</del> FileHider是一款将你的文件夹或文件隐藏起来的效率软件，适用于<strong>macOS X 10.10及以后的macOS版本</strong>。<a href="https://pan.baidu.com/s/1dGccUbB" target="_blank" rel="external">百度网盘下载地址</a>,欢迎大家试用，并提出改进建议！有开发能力的朋友也可以去<a href="https://github.com/zhihaozhang/FileHider-for-mac" target="_blank" rel="external">Github</a>将项目fork后contribute您的code。</p><p><img src="https://ws1.sinaimg.cn/large/aa2320a8ly1fnhgwuj4h0j208y08wgls" alt=""></p><blockquote><p>Specially thanks to <del>un</del>famous Designer <strong>Joseph</strong>, who designed the exquisite logo for this Application!</p></blockquote><p>软件的使用也非常简单，基本可以实现文件/文件夹的可见/不可见一键切换，录了一个gif动画。</p><p><img src="https://ws1.sinaimg.cn/large/aa2320a8ly1fnhbezm45wg20hs0dc7q5" alt=""></p><blockquote><p>软件使用demo</p></blockquote><h1 id="开发初衷"><a href="#开发初衷" class="headerlink" title="开发初衷"></a>开发初衷</h1><p>开发这款软件的<strong>初衷</strong>是<del>将xxx.mp4/xxx.avi/xxx.mkv在白天藏起来，免得被其他人发现。</del> 在Apple store上发现了一款类似的软件，售价163元，而且卖的不错。作为一个工程师，我是不愿意掏这份冤枉钱的，因为我觉得这东西一天内可以搞出来，于是就花了一晚上做出了功能类似的软件FileHider(认真脸)。</p><p><img src="https://ws1.sinaimg.cn/large/aa2320a8ly1fnhba8qhjfj20tz13pq71" alt=""></p><blockquote><p>在Mac App Store定价为163元的Secret Folder</p></blockquote><p>与Secret Folder不同的地方在于它的TableView中有两列，而我认为显示当前文件可见/不可见的列跟右边的NSSegmentedControl信息重复了，因此我就除去了该列。</p><p>还有一点不同是Secret Folder设置了Require Password这个选项，这个我觉得可以不加，因为如果一个人在用户不在的时候能够进入到系统中，那么user的密码也是多余的，FileHider的目的是对有机会看到你电脑屏幕却没有机会操作你电脑的人隐藏文件。</p><p>起初我还想在用户切换文件可见性的时候发送一个Notification，但是觉得过度设计了，因为这些通知如果不手动删除，将会在通知中心保留下来，这显然会增加别人知道有文件隐藏起来的可能性。</p><h1 id="开发过程"><a href="#开发过程" class="headerlink" title="开发过程"></a>开发过程</h1><h2 id="界面部分"><a href="#界面部分" class="headerlink" title="界面部分"></a>界面部分</h2><p>界面部分完全模仿了Secret Folder的布局，是一个single-Page的应用，依然采用了StoryBoard构造界面。</p><p><img src="https://ws1.sinaimg.cn/large/aa2320a8ly1fniorm8ub3j21gk1z0423" alt=""></p><blockquote><p>项目storyboard截图</p></blockquote><p>左右分为垂直的两栏，使用了<strong>NSSplitView</strong>，并调整左右两栏的大小比例，左边显示文件列表和对列表的增加/删除按钮；右边是文件的详细信息与文件隐藏/可见之间切换的<strong>NSSegmentedControl</strong>。对各个组件定好布局，确保在窗口resize后依然保持着相对较好的样式。</p><h2 id="TableView部分"><a href="#TableView部分" class="headerlink" title="TableView部分"></a>TableView部分</h2><p>文件列表是放到TableView中进行显示的，它也是本应用的核心部分。默认的TableView Cell高度只有17px，每个Cell要塞进去一个文件缩略图icon和文件名，显然过于小了，因此需要定制Cell。在本项目中，我将Cell设置为了30px，其中文件缩略图为24 X 24 px,我觉得大小是比较合适的。</p><p><img src="https://ws1.sinaimg.cn/large/aa2320a8ly1fnipejzy5xj20gy0880te" alt=""></p><p>一个TableView要想成功显示需要知道两件事：<strong>1.显示几行、2.每行显示什么。</strong>和其他应用一样，驱动这个TableView的是一个数组，filesList : [<strong>URL</strong>]。请注意这里是一个URL的数组，文件路径的URL都是定义为file://+文件路径这种格式的。URL在Swift中有相当多的方法，方便拿到文件名、路径名、根据完整路径拿到对应文件的缩略图、文件的detail信息等等。具体的使用可以参考<a href="https://developer.apple.com/documentation/foundation/url" target="_blank" rel="external">官方API文档</a>。</p><h2 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h2><p>对于本应用，用户对某个文件的操作并不是一次性隐藏就完事了的，它需要保留恢复为可见的权力，显然让用户记住哪些文件被隐藏、甚至隐藏在哪个路径下是很不现实的，因此需要数据持久化，保证用户下次打开应用的时候可以知道哪些文件是有过隐藏历史的。因为有过<strong>前科</strong>的文件很可能需要二次隐藏。</p><p>数据持久化的选择很多，最典型的有比较重的<strong>core data</strong>和比较轻量级的<strong>userDefaults</strong>。由于文件列表的路径通常不会很长，因此我选用了相对轻量级的userDefaults。</p><p>在使用userDefaults存储前面提到的URL类型的filesList数组的时候，我发现会报一个错误，<strong>Attempt to set a non-property-list object as an NSUserDefaults</strong>。 后面在网上发现了一些solution，主要的原因是NSUserDefaults只支持NSArray, NSDictionary, NSString, NSData, NSNumber, 和 NSDate的数据类型，对于URL这种类型，网上大多数的solution都是建议将数组编码为NSData，然后进行存储。我考虑到URL和String之间的互转比较方便，因此我将其转换为了string类型的数组进行存储。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// String -&gt; URL</span></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">let</span> defaults = <span class="type">UserDefaults</span>.standard</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> filesListFromUserDefaults = defaults.array(forKey: <span class="string">"filesPath"</span>)&#123;</div><div class="line">            <span class="keyword">var</span> tmpFilePath : [<span class="type">String</span>] = filesListFromUserDefaults <span class="keyword">as</span>! [<span class="type">String</span>]</div><div class="line">            <span class="keyword">for</span> str <span class="keyword">in</span> tmpFilePath&#123;</div><div class="line">                <span class="keyword">self</span>.filesList.append(<span class="type">URL</span>(string: str)!)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">        </div><div class="line"><span class="comment">// URL -&gt; String</span></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillDisappear</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> defaults = <span class="type">UserDefaults</span>.standard</div><div class="line">        <span class="keyword">var</span> array : [<span class="type">String</span>] = []</div><div class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> filesList&#123;</div><div class="line">            array.append(url.absoluteString)</div><div class="line">        &#125;</div><div class="line">        defaults.<span class="keyword">set</span>(array, forKey: <span class="string">"filesPath"</span>)</div><div class="line">    &#125;</div></pre></td></tr></table></figure><blockquote><p>URL与String数组之间的互转</p></blockquote><p>转换的时机很重要，这会提高应用的性能。String-&gt;URL这个方向仅在应用打开时，view加载完毕后进行；而URL-&gt;String这个方向是在应用关闭后，view消失的时候触发一次。</p><h2 id="文件列表的增加"><a href="#文件列表的增加" class="headerlink" title="文件列表的增加"></a>文件列表的增加</h2><p>文件的增加目前是靠比较简单的NSOpenPanel来实现的，显然这很不<strong>Mac</strong>，后面需要做的是<strong>drag-and-drop</strong>，一种更为<strong>优雅</strong>的solution。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">selectFile</span><span class="params">(<span class="number">_</span> sender: Any)</span></span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> openPanel = <span class="type">NSOpenPanel</span>()</div><div class="line">        </div><div class="line">        openPanel.message = <span class="string">"Please select file to Hide"</span></div><div class="line">        openPanel.canChooseDirectories = <span class="literal">true</span></div><div class="line">        <span class="comment">//    openPanel.allowsMultipleSelection = true</span></div><div class="line">        </div><div class="line">        openPanel.beginSheetModal(<span class="keyword">for</span>: view.window!, completionHandler: &#123;(result) <span class="keyword">in</span></div><div class="line">            <span class="keyword">if</span> result == <span class="type">NSModalResponseOK</span>&#123;</div><div class="line">                <span class="keyword">self</span>.selectedFolder = openPanel.url!</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div></pre></td></tr></table></figure><h2 id="文件列表的删除"><a href="#文件列表的删除" class="headerlink" title="文件列表的删除"></a>文件列表的删除</h2><p>文件列表的删除依然是对上文提到的filesList进行操作，通过tableviewDelegate中的tableViewSelectionDidChange方法得到需要删除的元素index。<strong>需要注意的是，</strong>需要增加判断，确保当前有元素被选中。<strong>(如果没有元素被选中，index值会是-1，这很可能引起应用的崩溃)</strong></p><p>无论是文件列表的增加还是删除，都需要调用tableview.reloadData()方法对视图进行更新。</p><h2 id="隐藏和非隐藏的实现"><a href="#隐藏和非隐藏的实现" class="headerlink" title="隐藏和非隐藏的实现"></a>隐藏和非隐藏的实现</h2><p>Unix系统中实现一个文件隐藏的方法很多，甚至可以给该文件进行加密。我能想到的最简单的方法是在原文件前面加一个.，并用mv xxx.mp4 .xxx.mp4将该文件就地在原路径下进行隐藏。这也符合了本软件的设计初衷，将文件从有机会从你电脑边路过，但却没有机会真正操作你电脑的人隐藏。</p><p>模拟console执行命令，是通过Process()来完成的。这里有一些坑，不幸的被我全踩了。</p><p>第一个坑是普通文件和文件夹的URL是不同的，文件夹是以/结尾的，而普通文件则不是，为了得到path和文件名，我调用了String.components(separatedBy: “/“)方法，那么文件夹的文件名就存在了方法得到数组的倒数第二项中；而其他普通文件的文件名存在了数组的倒数第一项中。</p><p>第二个是当用户不是第一次打开应用时，执行mv的参数设置方式需要分四种情况讨论，这也是前面为了应用的效率，不及时update fileList挖下的坑。果然凡事都是有两面性的~</p><h2 id="致谢、结束语"><a href="#致谢、结束语" class="headerlink" title="致谢、结束语"></a>致谢、结束语</h2><p>首先感谢<del>非</del>著名设计师Joseph给我提供的精美logo，感谢Secret Folder，让我有了灵感和动力去做一个类似的软件。</p><p>周五有幸聆听了公司CTO的演讲，一个工程师的日常。我不禁联想到了我自己，我因为原软件定价过高，做过Syngery的替代品mouseSync、Manico的替代品Manico-substitution、Re Desktop的替代品HideDesktop，这也许就是我作为一个工程师的日常吧。</p><p>Drag-and-drop是更为优雅的文件与应用的交互方式，我将于近期抽空集成进应用中，届时再见！</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://github.com/zhihaozhang/FileHider-for-mac" target="_blank" rel="external">Github</a></li><li><a href="https://stackoverflow.com/questions/19720611/attempt-to-set-a-non-property-list-object-as-an-nsuserdefaults" target="_blank" rel="external">stackoverflow</a></li><li><a href="https://www.raywenderlich.com/157986/filemanager-class-tutorial-macos-getting-started-file-system" target="_blank" rel="external">FileManager Class Tutorial for macOS</a></li><li><a href="https://itunes.apple.com/cn/app/secret-folder/id507968596?mt=12" target="_blank" rel="external">APPLE STORE：Secret Folder</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;软件介绍&quot;&gt;&lt;a href=&quot;#软件介绍&quot; class=&quot;headerlink&quot; title=&quot;软件介绍&quot;&gt;&lt;/a&gt;软件介绍&lt;/h1&gt;&lt;p&gt;&lt;del&gt;AVHider （oh NO）&lt;/del&gt; FileHider是一款将你的文件夹或文件隐藏起来的效率软件，适用于&lt;
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="macOS开发" scheme="http://zhihaozhang.github.io/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>浅谈可视交互的方法在大数据平台数据产生、前期处理方面的应用</title>
    <link href="http://zhihaozhang.github.io/2017/12/31/HAN/"/>
    <id>http://zhihaozhang.github.io/2017/12/31/HAN/</id>
    <published>2017-12-31T08:00:53.579Z</published>
    <updated>2017-12-31T08:00:56.554Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>作为一个一本正经的大数据公司，Helium亟需一个平台HAN(Helium Analytical Network)，它涵盖数据完整的生命周期（产生 – 处理 – 使用 – 销毁）。用户通过低学习成本的方式（如SQL， JSON）来定义这个生命周期，即数据从哪来，怎么计算，怎么使用，何时销毁。在平台上，希望用户能用JSON的方式部分覆盖OLAP的功能，即用户从数据的建立到完成OLAP查询的完整过程。</p><p>本文的工作主要集中在第一二个阶段，即数据的产生和部分的处理上。相比于传统的前端配置方式，我们的创新点在于将数据集的流向与产生以图形化的方式进行展现，使得用户清晰地看到每一个数据集产生的过程和流向。带来的好处除了形象化、直观之外，还可降低用户在操作数据过程中产生错误的几率，并且及时发现并补救产生的错误。</p><h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><h2 id="界面总览"><a href="#界面总览" class="headerlink" title="界面总览"></a>界面总览</h2><p><img src="https://ws1.sinaimg.cn/large/aa2320a8ly1fmzx522ht7j21sm172n0r" alt=""></p><blockquote><p>总览</p></blockquote><p>整体界面由三部分组成，比较简洁清爽。最上面是选择Task的panel，因为数据集的操作是分数据集进行的；中间部分是一块画布，展现的是数据集的细节信息；最下方是operators panel，又可细分为左边的数据集与操作panel与右边的系统级操作panel。</p><h2 id="文件结构总览"><a href="#文件结构总览" class="headerlink" title="文件结构总览"></a>文件结构总览</h2><p>经过数次重构，整体文件的结构如下图：<br><img src="https://ws1.sinaimg.cn/large/aa2320a8ly1fmzx70q1gxj20d60pgwgq" alt=""></p><p>还是一个比较传统的前端工程，遵循着MVC模式。其中css文件夹控制着整体工程的样式；image文件主要是按钮和数据集相关的一些图片资源，js文件夹下面分为外部引入的资源(library文件夹)和我编写的js文件；jsonData是前后端未联通时，进行测试用的json文件样例，HAN.html是整个系统的入口。</p><p><img src="https://ws1.sinaimg.cn/large/aa2320a8ly1fmzxhl9jqyj20qo0k00sz" alt=""></p><blockquote><p>MVC架构图</p></blockquote><p>上面的架构图中，我故意将Controller这部分绘制成了红色，体积也明显大于其他部分，不难看出Controller在本项目中的重要性。跟ios类似，传统的Model仅仅是一些class或者struct(在js中为object)，由于本项目中Controller部分太过臃肿，负担过重，我将Model相关的操作也移到了Model模块中，以增加代码的可读性，因此在本项目中，Model理解为Model-related-Module更为合适。</p><h1 id="Model部分"><a href="#Model部分" class="headerlink" title="Model部分"></a>Model部分</h1><p>Model部分的数据结构本身比较简单，可分为两大类，<strong>Stream</strong>数据集与<strong>Batch</strong>数据集；其中数据集本身又可以根据数据来源分为<strong>From Souce</strong>和<strong>From operator</strong>两种类型。</p><p>Model.js中定义了这两种数据集，由数据集中的一个字段区分数据集本身的来源。对数据集的增删查改功能也放到了Model.js中，上文有所提及，这部分代码本应该放在Controller中的。</p><p>Operators在本项目中也是等同与Model的一等公民，因此我们也特意为其定制了相应的数据结构，同样可分为单目操作和双目操作，对每种数据集都设置了相应的字段存储相应的内容。同样放到Model中的，还有对数据集进行操作的逻辑，这样可以大大减轻Controller部分的代码，方便其他同事理解阅读这个项目的源码。下面的关系图很好的说明了数据集和操作符之间的关系，单目操作不改变数据集类型，双目操作只要涉及到Stream类型的数据集，生成的数据集就为Stream类型。</p><p><img src="https://ws1.sinaimg.cn/large/aa2320a8ly1fmzybodnwoj20qo0k0mxn" alt=""></p><p>为了方便Controller与服务器端的通信，在这里分别设立了batch数据集、stream数据集、operators数据集的数组，并提供了一套根据数据集/操作的id快速找到相应model的方法，以便于快速将view和model关联起来。</p><h1 id="View部分"><a href="#View部分" class="headerlink" title="View部分"></a>View部分</h1><p>View部分是这个系统的创新点所在，传统的前端项目使用的是DOM元素，DOM元素没有SVG元素自由，打个不恰当的比方，如果对DOM元素的操作是美图秀秀，那么对SVG元素的操作就是Photoshop。SVG元素的绘制、动画方面的可自定义化非常强。</p><p>经过公司领导和其他同事的反复重构之后，我将绘制通用流程图的通用部分抽取了出来，并提供给使用这个库的用户足够的自由，自定义所涉及到的大部分外观样式和监听事件的补充。</p><p><img src="https://ws1.sinaimg.cn/large/aa2320a8ly1fmzyq4r5xuj20qo0k0aa0" alt=""></p><blockquote><p>构成流程图的基本元素</p></blockquote><p>如上图所示，构成一个完成流程图/数据流图所需要的最基本的两个元素是Entity与Entity之间的关联关系。其中Entity是由两部分组成，即上方的图片(img)和下方的描述文字(text)，关于这个部分，我们提供的可视化库(Helium_vis.js)中都进行了<strong>深度</strong>的定制化，您可以<strong>自定义</strong>img和text的宽高、img左上角的位置、img的透明度、text的字体、大小、对其方式等一系列您想得到与想不到的属性。</p><p>Entity与Entity之间的关联关系目前是定好了从第一个出Entity的图片的右边中点与第二个入Entity左边中点，其他部分由三次贝塞尔曲线进行插值生成漂亮的曲线。关系的render部分目前只提供了粗细的可配项目，后期需要加上关系的描述文字，并提供居中或相对中点偏移量的可配项。</p><p>事件部分，我们希望Entity可以被选中，并且将选中的元素进行高亮区别显示，并且在本项目中，选中的Entity所代表的dataset应该在其他地方进行展示，并且在该处可由用户对dataset的model进行修改、删除等操作。而这部分业务逻辑相关的代码显然不应该放到库内，因为其他项目并不需要这个部分的逻辑，很可能需要改成其他项目的逻辑。同样的，作为一个一本正经的流程图库，我们希望用户有权力去修改每个Entity默认的位置，因此也对每个Entity配备了Drag事件，通用Drag事件，Helium_vis实现了Entity本身跟随鼠标的移动和该Entity相关操作(曲线)的实时移动，另外，针对特定的项目，还支持以传入回调函数的方式将项目特定的逻辑进行传入。比如，在HAN这个项目中，由于需要保存并恢复Entity的位置信息，因此在Drag事件中，添加了对Entity位置的计算相关的逻辑。</p><p>具体的做法比较tricky，是将每个Entity此次render的初始位置加上此次操作的偏移量保存下来，并以此作为下次打开时的初始render位置。</p><p>另外一个可重用并在本项目中反复利用的项目是圆角矩形，在此，我们同样对其进行了封装，提供了很多可配置的选项，并且支持以类似jQuery的链式操作。这样就可以通过配置的方式，用两行代码render出所需要的图形，大大缩减了代码的长度。<strong>代码少了，带来的最大好处是bug也少了。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//代码使用样例</div><div class="line">var canvasConfig = &#123;x:10 , y:20, width:1100, height:590, rx: 10, ry:10, fill:&quot;#e0e0e0&quot;, svg:d3.select(&quot;#canvas&quot;),id:&quot;mainCanvas&quot;&#125;;</div><div class="line">    var mainCanvas = new HeliumCanvas(canvasConfig);</div><div class="line">    </div><div class="line">    mainCanvas.drawSelf().calculatePosition();</div><div class="line"></div></pre></td></tr></table></figure><p>在底层的Operators panel部分，我们还加入了一个脑动大开的类似新版MacBook Pro上Touch Bar的图标收起、图标展开的动画以展示影藏的二级菜单，得益于SVG元素强大的动画能力，这些操作实现起来并不是很复杂。</p><p><img src="https://ws1.sinaimg.cn/large/aa2320a8ly1fmzzfuk2qbg23i00bsx6p" alt=""></p><blockquote><p>Touch-bar like animation</p></blockquote><h1 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h1><p>在本项目中，Controller捕获到view层面的按钮点击事件、drag事件，去调用Model里的增删改查方法；或者经过Model中的from Operator事件产生了新的Model，经过Controller去调用View部分，render出新的视觉元素与之对应。经过前面的功能疏散，这部分代码已经轻量级了很多。</p><p>剩下的一大块功能是与服务器的通信，有正向与逆向两个方向。正向的是去主动通知服务器，将某个任务启动起来、将某个任务删除、保存当前任务信息等等。逆向的部分是从服务器端将上次某个task的保存数据获取到，并由Controller调用相关方法进行重新render，并且render后的canvas依然允许用户像第一次进行操作那般顺滑。</p><p>点击数据集、Operators后的弹出框、配置框等还是沿用的传统前端技术，并不符合本文主题（用可视交互的方法），因此这里就不展开介绍了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>之前写代码比较混乱，可能是因为我做过太多外包中的毒，只求迅速将功能实现交付给甲方就完事了，很少有对项目整体重构的思考。经过两次公司领导的亲自指导重构，有所反思，重构确实让代码看起来清爽了很多、并且可维护性有所提升，以后写项目的时候，应该提前规划好，而不是立即就上手去做，毕竟磨刀不误砍柴工。</p><p>今天是2017年的最后一天了，就将本文作为今年的收官之作吧。最后，祝大家在新的一年里，开开心心、平平安安，每天都能有所进步！</p><p><img src="https://ws1.sinaimg.cn/large/aa2320a8ly1fmzzz1urulj20dc06odfz" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;作为一个一本正经的大数据公司，Helium亟需一个平台HAN(Helium Analytical Network)，它涵盖数据完整的生命周期
      
    
    </summary>
    
      <category term="d3" scheme="http://zhihaozhang.github.io/categories/d3/"/>
    
    
      <category term="随感" scheme="http://zhihaozhang.github.io/tags/%E9%9A%8F%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>谷歌开发者大会(GDD2017)见闻 Day2</title>
    <link href="http://zhihaozhang.github.io/2017/12/17/googleDevDay2/"/>
    <id>http://zhihaozhang.github.io/2017/12/17/googleDevDay2/</id>
    <published>2017-12-17T09:06:38.000Z</published>
    <updated>2017-12-25T07:30:55.308Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fmt1rm8dkpj30zk0nptb6.jpg" alt=""></p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>上一篇博客写了挺多开发者大会期间的花絮(虽然花絮本身就是开发者大会重要的组成部分)，而在这篇博客里将更专注于session本身，对场外的花絮和花边新闻尽量少的提及。<strong>话不多说，我们开始吧。</strong></p><h1 id="Android-things"><a href="#Android-things" class="headerlink" title="Android things"></a>Android things</h1><p>安卓things是一种支持世界各地计算需求的新平台，其出现的初衷是简化IoT设备的开发和生成。安卓things运行的仍然是安卓系统，因此对安卓开发比较熟悉的朋友可以很快的上手来完成一些应用。</p><p>在现场，演讲者详细演示了如何在大会赠送的Android things设备上进行程序开发。他利用温度传感器和气压传感器开发了一个<a href="bit.ly/codelab-weatherstation">温度计和气压计的应用</a>。开发共分为三个步骤：</p><ol><li>拼装器件Assemble，<a href="https://developer.android.com/things/index.html" target="_blank" rel="external">组装说明</a></li><li>烧构件版本 Flash Android things</li><li>开发应用 Develop Apps, 用Android studio 3.0+</li></ol><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fmt1rnlllcj31400u0443.jpg" alt=""></p><p>例子部分最重要的是学习如何对外围设备进行<strong>输入</strong>、<strong>输出</strong>，怎么让程序知道某个按钮被按下了，怎么样将传感器测得的值显示出来，以及如何整合应用外围设备输入输出库的驱动器。感兴趣的朋友，推荐去<a href="bit.ly/codelab-peripherals">codelab</a>学习一下。codelab也是谷歌极力推荐的一个学习网站，在展区有一个专门的展台，而且越来越多的教程被翻译为了中文，还是挺不错的。</p><h1 id="PWA的框架和工具"><a href="#PWA的框架和工具" class="headerlink" title="PWA的框架和工具"></a>PWA的框架和工具</h1><p>渐进式网页应用(PWA)上篇已经简单的介绍过了，第二天依然有两个session围绕着它展开。首先是PWA的工具，讲者首先介绍了为什么要工具。所谓工具，就是让用户更方便的完成某项工作的东西，节省用户的时间。</p><p>PWA一大特点是节省用户带宽，让浏览器和网页了解你的应用，在默认生成的基础上，如果能帮助用户指定决策就更好了。Chrome在开发者panel中可以看到安装时和安装后的网络请求情况，将运行时的网络请求可视化，从而对用户制定缓存策略产生一定建议。</p><p>在构建PWA时，他介绍的通用工具是Workbox这个JavaScript库作为<strong>创建、测试、体验</strong>Service Worker的工具集合。接下来他介绍了PWA和Vue、react、Angular等流行框架的CLI如何结合使用，主要是如何基于json进行配置。</p><h1 id="TensorFlow"><a href="#TensorFlow" class="headerlink" title="TensorFlow"></a>TensorFlow</h1><p>TensorFlow真是火，如果说去年的GDD主角是Angular，那么今年的主角无疑是TF。从分会场排的长龙以及增加的场次，不难反映谷歌的策略已经从<strong>Mobile First 转为了 AI First</strong>。这个session依然是金安娜全程用中文来介绍的，虽然有时候结结巴巴的，但还是坚持了下来。这个session主要是广告，说TF怎么受欢迎、TF在医学领域取得了成功(超过了很多年经验的医生)、AlphaGo战胜了世界顶级围棋选手。TF支持了更多的硬件平台，包括CPU、GPU、Cloud TPU甚至安卓、ios、Android things。最后简短的带过了TF的架构。</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fmt1roixr5j30x40n2gpq.jpg" alt=""></p><blockquote><pre><code>TensorFLow架构图 </code></pre></blockquote><h1 id="ARCore"><a href="#ARCore" class="headerlink" title="ARCore"></a>ARCore</h1><p>作为有望与人工智能抢风头的AR，自然也是本次大会的一个亮点，ARCore这个session由负责技术与用户体验的两个人来共同完成。</p><p>首先是技术人员上台演讲，他介绍了沉浸式计算的发展历史，随后介绍了ARCore的发布量:<strong>100,000,000</strong>. 介绍了ARCore的新特性,即<strong>环境识别</strong>和<strong>光线估测</strong>。</p><p>随后是负责用户体验的工程师上台演讲，她介绍了在展区看到用户还是很习惯性地去用两个手指Zoom in 和 Zoom out，而不是尝试去移动摄像头和模型进行交互，当用户葛优躺在沙发上的时候会比较懒惰，更不会去移动身体离开舒适区。<strong>她建议，在程序内给予用户明确的提示或合理的理由，让用户进行移动。</strong></p><p>随后舞台交还给技术工程师，他宣布了chrome将支持ARKit和ARCore的大新闻。我觉得这个才是对于AR的重大利好，因为很多年轻人都不会愿意购买头显，买了的也很可能不会随身携带，更别提父母辈的中老年人了。而如果Chrome支持了AR，那么无疑将大大降低AR的使用门槛。<a href="https://developers.google.cn/ar/" target="_blank" rel="external">教程链接</a></p><p>关于ARCore框架本身，分成了四个部分来介绍。</p><ol><li>跟踪状态</li><li>平面</li><li>特征点</li><li>光估测</li></ol><p>跟踪状态指的是无论你摄像头怎么动，模型也会跟着进行一定的角度和位置变换来欺骗人眼，以为模型真的就更场景融合到了一起，这一过程也叫偏移校正。这里需要提到的是<strong>锚点</strong>的概念，即AR的对象添加的实际的对象时指定的位置。</p><p>另一个概念是平面，这需要一定的时间来进行检测，跟ARKit一样，也是采取的用若干特征点确定一个平面的方式，我们都是知道三个点可以确定一个面，这里采用多个点可能是从计算的效率方面出发的，快速确定平面以及平面的边界。当然，平面的多个平面也是可以同时检测到的。<br><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fmt1rqsf9gj31fk0lmb29.jpg" alt=""></p><p>光线检测的例子让我印象比较深刻，它采用的是一头狮子，当灯关闭后，似乎被惊吓到了，然后跳了起来，对检测光线从亮到暗这一过程的诠释简直完美。<a href="https://developers.google.cn/ar/" target="_blank" rel="external">视频地址</a>。</p><h1 id="Android-Oreo"><a href="#Android-Oreo" class="headerlink" title="Android Oreo"></a>Android Oreo</h1><p>Android 8.0版本名是奥利奥(流口水),不可避免的也在本次大会上开了几个session，由于我不是安卓开发者，所以在选择分会场的时候，基本都避开了这个主题，但由于某些分会场人多到进不去了，又不想浪费时间，也零零散散的听了一些。</p><p>首先是Android Studio的更新，可以帮助用户分析并提升应用的性能，也是采用的可视化的方式，将<strong>网络请求</strong>、<strong>CPU使用率</strong>、<strong>内存管理</strong>等控制用户体验核心的一些指标按<strong>时间序列</strong>进行了可视化，从而用户可以方便的看到，在哪些时间点资源的消耗比较明显，从而进入到相关函数内部进行优化。现场举了一个内存管理失误并修正的例子。</p><p>后面听了半场用架构组件来写安卓应用的session，在Angular里，组件的好处就挺多的，例如：</p><ul><li>让应用更加健壮</li><li>易于测试团队进行测试</li><li>可维护性提升了不少</li><li>耦合程度低，适合团队开发等等</li></ul><p>这里她重点介绍了安卓组件里的两大特点：可被观察、可感知生命周期。可被观察类似观察者模式，可以带来的好处是关联了生命周期、避免内存泄漏。以持久化数据Room组件为例，它带来的好处包括：</p><ul><li>减少了样板代码</li><li>查询结果转化为JAVA对象</li><li>编译时验证SQL语句</li><li>查询结果可被观察</li></ul><p>由于没有听全，加上对安卓开发没有基础，这里只能丢出一些链接供感兴趣的读者参考：</p><p><a href="https://developer.android.com/topic/libraries/architecture/adding-components.html" target="_blank" rel="external">开发者频道</a><br><a href="https://github.com/googlesamples/android-architecture-components" target="_blank" rel="external">GitHub例子</a><br><a href="http://www.jianshu.com/p/29e5e8c75450" target="_blank" rel="external">简书</a></p><blockquote><p>一句话总结安卓这个我不了解的领域：谷歌在帮助程序员来优化他们的应用：自动检测将资源用量进行可视化，甚至是帮助用户分析即将离开应用的用户，增加用户粘性；组件化开发降低开发安卓应用的难度和速度。</p></blockquote><h1 id="未来网络的潮流"><a href="#未来网络的潮流" class="headerlink" title="未来网络的潮流"></a>未来网络的潮流</h1><p>这个session的标题很宽泛，是对未来趋势的一个预测，这个话题还蛮有意思的。</p><h2 id="新API"><a href="#新API" class="headerlink" title="新API"></a>新API</h2><p>演讲者是个德国人，他认为以后的web应用应该以全屏PWA为主，现在已经可以将display属性设为”fullscreen”从而将手机顶部的时间、蓝牙、wifi信息掩盖掉，配合现在的全面屏手机，营造出一种沉浸感。</p><p>第二点他谈到了网络推送通知已经可以和原生的应用一样，举了一个macOS里通知中心的例子。它遵循macOS系统勿扰模式的设置规则，更好地与平台集成。</p><p>接下来是PWA的一大优势：<strong>service worker导航预加载</strong>，利用这个功能，在用户发出GET导航请求的同时，系统在Service Worker启动的同时启动网络请求。虽然这无法避免启动延迟，但却可以消除网络请求受阻的限制，让用户能更快获取到想要的内容。</p><p>接下来是<strong>一键注册</strong>的API，使用Google电子邮件地址创建账号。支持使用之前选择的信息实现回访用户自动登录。<a href="https://developers.google.com/identity/one-tap/web/" target="_blank" rel="external">介绍链接</a></p><p><strong>存储空间估测</strong>方面，开发者经常遇到这个问题：存储空间是否还够支持下一个操作？选择这个问题得到了解决.<a href="https://developers.google.com/web/updates/2017/08/estimating-available-storage-space" target="_blank" rel="external">API链接</a></p><p><strong>Image Capture API</strong>，利用这个API，可以捕捉静止图像，以及配置相机的硬件设置。<a href="https://developers.google.com/web/updates/2016/12/imagecapture" target="_blank" rel="external">API链接</a></p><p><strong>Shape Detection API</strong>，用来检测面孔、读取条形码甚至进行光学字符识别(也就是常说的OCR)功能。<a href="https://wicg.github.io/shape-detection-api/" target="_blank" rel="external">API链接</a></p><p><strong>Media Capabilities API</strong>，这个API让媒体在流畅播放的同时实现高能效。通过获取与设备解码功能相关的更多信息，帮助开发者在为用户选择媒体流时候做出最佳决策。比如为好一些的手机设置1080p甚至4k的媒体流，为千元机设置480p的媒体流。<a href="https://wicg.github.io/media-capabilities/" target="_blank" rel="external">API链接</a></p><p><strong>NetInfo</strong>是为了完善上面的API设置的。主要是检查手机的网络，如果支持retina显示的屏幕，但是目前只有2G，也选择非高清的媒体流。<a href="https://wicg.github.io/netinfo/" target="_blank" rel="external">API链接</a></p><p><strong>WebVR</strong>，一种开放标准，将虚拟现实的体验带到浏览器中。<a href="https://immersive-web.github.io/webvr/" target="_blank" rel="external">参考链接</a></p><p><strong>Navigation Timing API</strong>,获取设备总体性能的API，比如网页的render耗时、网页加载耗时、网页连接耗时等。同样是为了针对不同用户给出不同媒体流的一个判断。<a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance" target="_blank" rel="external">API链接</a></p><h2 id="JavaScript新用法"><a href="#JavaScript新用法" class="headerlink" title="JavaScript新用法"></a>JavaScript新用法</h2><p><strong>动态模块导入</strong>，延迟加载JavaScript代码，在需要的时候动态加载代码，提升用户体验，提升应用性能，类似于Swift里的懒加载。</p><p><strong>异步生成器函数</strong>，简化流式传输数据的消耗。可用于for-of循环以及通过异步迭代器工厂创建自定义异步迭代器。</p><p><strong>Promise中的Finally方法</strong>，确保系统无论在啥情况下都执行需要的操作，无论Promise最终是被接受还是拒绝。</p><h2 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h2><p><strong>web蓝牙</strong> 与附近的蓝牙设备进行通信，目前只在chrome中得到了部分实现，后续还需等待。<a href="https://developers.google.com/web/updates/2015/07/interact-with-ble-devices-on-the-web" target="_blank" rel="external">API链接</a></p><p><strong>web USB</strong> 专为网络设备设计的访问控制，仅限于HTTPS，且必须由用户启动。同样，目前只在chrome中得到了部分实现，后续还需等待。<a href="https://developers.google.com/web/updates/2016/03/access-usb-devices-on-the-web" target="_blank" rel="external">API链接</a></p><h1 id="为十亿用户打造产品"><a href="#为十亿用户打造产品" class="headerlink" title="为十亿用户打造产品"></a>为十亿用户打造产品</h1><p>最后一个session，是讲用户体验的，题目也起的非常之大，为十亿用户打造产品。演讲者是一个印度工程师，体重跟十亿这个数字很配(逃~)。</p><p>当用户的量级达到1，000，000，000人时，通常意味着用户来自世界各地，有着完全迥异的背景和文化，甚至各个国家之间的基础建设差异也很大。在现场，印度小哥列举的例子是各个国家之间的网速差异，发达国家网速比发展中国家网速快了50倍，而网速达到4Mbps以上的用户所占比例差异也很大，在越南。委内瑞拉这些国家，占比可能不到1%;上网的费用方面，越南人收入的8%需要花在流量上。可能那些国家的大部分人还在我们十几年前1M流量10元的GPRS时代吧。在这种情况下，需要根据用户设备的移动网速和连接质量的差异量身定制App。</p><p>讲者从五个方面提供了优化应用产品的建议：</p><ol><li>连接</li><li>设备能力</li><li>流量费用</li><li>电池消耗</li><li>内容</li></ol><p>关于优化<strong>网络连接</strong>，他给出的建议是规定流量的有限顺序，即<strong>文本优先</strong>法则。图片还没加载完，有了文字，应用看起来至少是可用的。第二点是<strong>网络请求去重</strong>，网络请求不应该重复和频繁；第三点是根据网络连接性能调整行为，就是上文提到的2G网络环境下和wifi环境下所请求到的流媒体质量应该是不同的。</p><p>关于<strong>图像</strong>，他建议适宜时提供SVG，否则提供webP图像。SVG是矢量图，在任何分辨率小可以不失真，而且体量很小。动态图一般比较大，最好告知用户动态图大小。当然他也提到了PWA的离线缓存体验，不至于在网速慢或没网的时候，让用户感觉到应用不可用(虽然确实不可用)。</p><p>在构建应用的时候，也需要专门为<strong>中小屏幕</strong>构建，针对中低密度屏幕进行优化，并通过模拟器配置进行测试。</p><p><strong>内存</strong>作为一种重要的资源，他鼓励应用应该按可用的RAM调整占用的空间，避免长时间运行的进程。而上文提到的Android Studio内存监视器可以帮助开发者做到这一点。</p><p>APK安装包的大小跟流量很相关，而其中图像消耗的流量最多。压缩APK文件，他推荐使用<strong>ProGuard</strong>降低代码大小，并在build.gradle中将<strong>多APK</strong>作为一个选项。同时，数据流量的使用也是可以在Android Studio中看到的。而且应该赋予用户选择的权力，比如网易云音乐就允许用户选择仅在wifi可用时下载歌曲。</p><p><strong>电池消耗</strong>方面，应用避免不必要的唤醒，比如GPS定位，这个服务就挺耗电的，不要在后台一直使用。网络请求最好使用批处理的方式，有利于节能。当然也非常推荐使用他们家的<strong>Firebase JobDispatcher</strong>。</p><p><strong>快速自适应式界面</strong>方面，他鼓励处处提供触摸反馈，按了按钮之后，即使需要等一会儿，由于有反馈告诉用户确实按下去了，他们通常愿意等一会儿。第二点是界面需要始终处于可交互的状态，也就是安卓主线程中，不应该处理其他事务，因为有可能会造成UI的卡顿。UI刷新率，始终要达到60fps，才会给人流畅的感觉。关于<strong>界面</strong>的最佳做法，当然是符合谷歌的<strong>Material Design</strong>咯。</p><p><strong>本地化方面</strong>，他谈到大部分开发者考虑到了提供给用户多语言环境的支持，但是往往忽略的一点是<strong>字体</strong>的选择，某些字体在某些国家的文字下很不适合阅读。</p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>知乎曾经有个问题是百度曾经做过哪些恶，他有个镜像问题是：谷歌都做了哪些恶。一个高赞的回答是：退出中国大陆市场。转眼间，搜索服务离开大陆已经快8年了，希望谷歌搜索和其他一些Service能和AI一样早点回来吧。</p><p>今年的谷歌开发者大会算是结束了，每个session都只有30分钟，仅仅是一个开始，后面的研究和使用还得靠台下的开发者，希望本文中的参考链接对大家有所帮助！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tKfTcgy1fmt1rm8dkpj30zk0nptb6.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
      <category term="随感" scheme="http://zhihaozhang.github.io/categories/%E9%9A%8F%E6%84%9F/"/>
    
    
      <category term="随感" scheme="http://zhihaozhang.github.io/tags/%E9%9A%8F%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>谷歌开发者大会(GDD2017)见闻 Day1</title>
    <link href="http://zhihaozhang.github.io/2017/12/15/googleDevDay/"/>
    <id>http://zhihaozhang.github.io/2017/12/15/googleDevDay/</id>
    <published>2017-12-15T08:33:41.000Z</published>
    <updated>2017-12-25T07:30:55.310Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fmt1rru189j30zk0nptb6.jpg" alt=""></p><h1 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h1><p>双12晚上，我一改之前晚睡的习惯，罕见的在晚上12点之前入睡了。为了第二天早上8：30的谷歌开发者大会。</p><h1 id="出发到达会场、注册"><a href="#出发到达会场、注册" class="headerlink" title="出发到达会场、注册"></a>出发到达会场、注册</h1><p>第二天早上7点15就洗漱完毕出门了。7点多的地铁并没有想象中那么空荡，依然挤满了人，真庆幸自己住的离公司很近，不需要经历上班早高峰的洗礼。一出地铁站，就看到了举着牌子的GDD工作人员，要知道这里离会场还有1.5km左右的距离。解锁了一辆小黄车，几乎在每个路口都能看到指路的工作人员，真的很贴心。</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fmt1rsgspjj31400u0jxe.jpg" alt=""></p><p>来到会场的时候,注册的开发者已经排起了长队，时间为早上8：30。注册完领取了印有日程和场地介绍的胸牌、一个供开发者DIY的纸盒音箱和很多人喜欢的谷歌信仰贴纸。随后跟随大部队进入了主会场。</p><h1 id="主会场的开幕式和主题演讲"><a href="#主会场的开幕式和主题演讲" class="headerlink" title="主会场的开幕式和主题演讲"></a>主会场的开幕式和主题演讲</h1><p>在主会场幸运的坐到了第一排，视角挺不错的。由于开场之前还有挺长时间的，现场工作人员借机推广了一波GIORGIO CAM，一个识别照片中的物体，然后唱出一段rap的应用。由现场工作人员通过直播摄像头识别观众举起的物体，刚开始的时候，大部分还是手机、手表、纸币等物体，基本可以识别出来，后面慢慢的画风不对了，变成了香烟、化妆刷一类的东西，识别基本是不成功的。</p><p>时间终于来到了9：30，大会正式开幕的时间。首先是一段非常燃的开场舞，通过将文字投影到舞者手里的白板上和现场观众打招呼，一度将现场气氛带到高潮。</p><p>暖场舞过后是领导讲话，有谷歌的产品总监与谷歌大中华区的总裁石博盟，他们的中文都说的很6，似乎很愿意通过中文拉近与中国开发者的距离。他们介绍了本次开发者大会的举办初衷和谷歌对中国的重视等等，值得一提的是安卓年度最佳应用前100里有13个中国团队，可见中国市场的重要性。</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fmt1rtoh4aj31400u0dj7.jpg" alt=""></p><p>各个项目的经理/负责人也一一上台介绍了各自的项目，并邀请大家在接下来的分会场活动中去他们的场次中详细了解。给我留下印象比较深的是一个叫金安娜的女孩，她全程用中文演讲，而且据她自己说这是她第一次来到中国。</p><p>大约10点左右，AI专家李飞飞教授从场馆右侧进入了第一排，恰好从我面前经过，给我的感觉是连走路都是这么的雷厉风行。轮到她上台演讲的时候，台下的欢呼声很高，足见她的人气和AI的人气之高。在之后的演讲中，她果然宣布了大新闻————谷歌在北京成立了中国地区的AI研究中心。并由她亲自带领，这是继美国和欧洲之外，在全球成立的第三个AI研究中心。<strong>毫无疑问，中国有巨大的机遇和适合AI的丰富使用场景，只有这种使用场景极其丰富的地方，人工智能才能得到更好的发展。</strong> 同时，中国搞人工智能研究的科研人员也是非常多的，据李飞飞教授说，AAAI2015所收录的论文中，45%有华人的身影。</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fmt1rupiegj31400u0adg.jpg" alt=""></p><h1 id="场馆外的展区、礼物及其他"><a href="#场馆外的展区、礼物及其他" class="headerlink" title="场馆外的展区、礼物及其他"></a>场馆外的展区、礼物及其他</h1><p>茶歇时间，来到主会场外。有很多展区，每个展区都有一线谷歌工程师，据他们说是被拉壮丁到了现场介绍各个项目的。但可惜的是他们并不一定是做他们介绍的项目的，所以关于项目的很多情况他们也不是特别了解，不过能跟他们交流能了解到谷歌的工作方式和谷歌中国里一些不会公布的小道消息，也蛮不错的。在Iot展台，我领到了一张换取Android Things的物联网开发套件。</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fmt1rvitagj30u01400v5.jpg" alt=""></p><p>我看这东西有触摸屏，有很多传感器，觉得这东西怎么得值个80刀吧，结果网上一搜，售价$169，而且每个人都可以领一份。看来我真的是被贫穷限制了想象力。在现场，他们展示了两个利用这套开发套件的项目，一个是利用TensorFlow识别图片的应用，它不仅可以识别出照片是一只狗，还能识别出狗的品种；还有一个是拍一张人像后利用黑笔将人像的轮廓画到一张白纸上的应用，都挺有想法的。</p><p>TensorFlow那个项目是<a href="https://github.com/androidthings/sample-tensorflow-imageclassifier" target="_blank" rel="external">开源</a>的，同时该项目下还有很多其他有趣的开源项目。</p><p>VR和AR的展台排队非常长，由于我对这个领域相对熟悉，并没有体验，只是看了一下ARCore在安卓手机上的运行情况，给我的感觉是跟苹果的ARKit在流畅性上还是有一些差距的，不知道是不是硬件的原因。</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fmt1rxe8sdj31400u0acs.jpg" alt=""></p><p>展区外还有很多填写调查问卷换取各种贴纸、玩偶、布娃娃、T-shirt、钥匙扣等带有谷歌元素的礼物。不过我参加的并不是很多，因为排队的人实在是太多了。扫描胸牌背后的反馈表填写反馈，赠送一个电脑包，质量还不错。</p><p>茶歇提供了蛋糕和咖啡饮料，可以在天台和其他人自由搭讪。第一天的天气很不错，我和一个在金融公司做交易平台的开发者简单交流了十分钟，了解了她们使用的技术栈和金融公司开发软件的流程，总体还是很愉快的。</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fmt1rzt672j31400u0gqi.jpg" alt=""></p><h1 id="分会场活动"><a href="#分会场活动" class="headerlink" title="分会场活动"></a>分会场活动</h1><p>接下来的活动是几个会场同时进行的，意味着观众不得不进行取舍。我主要听了渐进式网页应用和Firbase相关的一些session，避开了相对更火热的android和TensorFlow。接下来简短地介绍一下我对各个分会场活动的见闻和感想，session的<a href="http://www.google.cn/intl/zh-CN/events/developerdays2017china/agenda/" target="_blank" rel="external">日程链接</a>。</p><h2 id="渐进式网页应用PWA"><a href="#渐进式网页应用PWA" class="headerlink" title="渐进式网页应用PWA"></a>渐进式网页应用PWA</h2><p>渐进式网页应用 (PWA) 集网络和应用之优势于一身，带来非凡的体验。PWA 网页的加载速度快，其通知功能有助于重新吸引用户，同时还具备通常只有本机应用才具备的其他特性。重点介绍了Service Worker的工作机制、生命周期，如何配置manifest文件使用PWA，渐进式网页应用的优势等等。渐进式网页的出现主要是为了改进用户体验，相比于传统网页，在离线状况下依然可用。</p><p>有用的一些URL：</p><ul><li><a href="https://goo.gl/9DJRJq" target="_blank" rel="external">您的第一个Progressive Web app</a></li><li><a href="https://goo.gl/suGNRb" target="_blank" rel="external">调试Service Worker</a></li><li><a href="https://goo.gl/QRLk5i" target="_blank" rel="external">网络推送通知</a></li><li><a href="https://goo.gl/dxWGdP" target="_blank" rel="external">利用PaymentRequest API实现无缝付款</a></li></ul><h2 id="Firebase"><a href="#Firebase" class="headerlink" title="Firebase"></a>Firebase</h2><p>Firebase也是为用户体验而生的，在现场演讲者结合Google Cloud Platform从头开始构建了一个翻译工具的应用，给我最深的印象是可以不需要建立服务器，同时使用 Firebase 构建应用很简单，使用 Google Cloud Platform 拓展体验很容易。</p><p>下午的讲座中，介绍了Firebase的新特性，印象比较深刻的有：</p><ul><li>A/B testing，将用户群体分类，然后分组进行测试。</li><li>Firebase预测，将即将要弃坑的用户找出来，然后针对他们采取一些行动，比如送装备等。演讲者说，这个功能帮助切西瓜应用留下了20%即将要叛逃的用户，记得很清楚，他用的是<strong>用户粘度</strong>这个词。</li><li>动态链接(Dynamic Links)，使用smart url让现有和潜在用户分享应用内容和链接内容。</li><li>自动崩溃报告方案分类，包含了一定的分析。</li><li>性能监控控制台，可视化的方式监控应用，对性能的提升有一定帮助。</li></ul><p>有用的一些URL：</p><ul><li><a href="https://firebase.google.cn" target="_blank" rel="external">Firebase 网站</a></li><li><a href="https://github.com/mimming/zero-to-app-universal-translator" target="_blank" rel="external">Github代码段</a></li></ul><h2 id="H5游戏市场的前景与变现"><a href="#H5游戏市场的前景与变现" class="headerlink" title="H5游戏市场的前景与变现"></a>H5游戏市场的前景与变现</h2><p>这个session是采用的采访的形式(感觉采访的问题都是提前准备好的)，被采访者是白鹭科技的CEO，他介绍了他之前比较成功的三个项目，以及与谷歌的合作。</p><p>关于游戏的现状，他谈到了两个方面：</p><ul><li>市场方面，2017年H5游戏用户数量超过了3.5亿，游戏市场容量约60亿，相比比喻2014年增长了120倍。</li><li>技术方面，白鹭有自己的游戏引擎，2D渲染能力、跨平台能力提升明显，4k 60fps无压力。</li></ul><p>后面还介绍了一些游戏案例，让我比较震惊的是h5页面居然可以做出童年非常痴迷的传奇那样的大型游戏了。介绍了如何在网页端“优雅的”嵌入广告的三种方式。他指出，游戏的变现方式已经不再是以前那样几乎全靠内购了，很大一部分靠广告，而广告用谁的服务呢？当然是谷歌了，哈哈哈…</p><h1 id="午餐晚宴结束语"><a href="#午餐晚宴结束语" class="headerlink" title="午餐晚宴结束语"></a>午餐晚宴结束语</h1><p>午餐和晚宴都是采用的自助式，吃的还不错，有水果、时蔬和肉、鱼供应，喝的提供的是可乐与橙汁。晚宴相比于中午，添加了乐队的表演，现场也有很多诸如桌上足球、拳皇游戏机、投篮机等丰富多彩的活动，气氛还是不错的。</p><p>第一天就这样结束了，应该说，由于分会场的session都只有30分钟（通常前几分钟是谷歌的广告），对某个技术只能起一个头，接下来的进一步学习需要放到线下，文中给出的链接供感兴趣的读者参考。</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fmt1s15m2sj31400u041a.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcgy1fmt1rru189j30zk0nptb6.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Day-0&quot;&gt;&lt;a href=&quot;#Day-0&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="随感" scheme="http://zhihaozhang.github.io/categories/%E9%9A%8F%E6%84%9F/"/>
    
    
      <category term="随感" scheme="http://zhihaozhang.github.io/tags/%E9%9A%8F%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>拓扑图的实现</title>
    <link href="http://zhihaozhang.github.io/2017/10/18/topology/"/>
    <id>http://zhihaozhang.github.io/2017/10/18/topology/</id>
    <published>2017-10-18T07:31:13.472Z</published>
    <updated>2017-12-25T07:30:55.299Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>拓扑图是Console界面中一个重要的组成部分，它的愿景是我公司Console平台相比于其他公司相同平台的创新之处。这个部分一直是由我来负责，从开始的高度抽象派图形化图，到后面创新性的引入Radial-layout，到这轮迭代返璞归真的<strong>Tree-layout</strong>信息展示，几经迭代，感慨良多。很多时候都要跟设计师死磕，在他的想法与技术之间找到一个权衡点。本文作为本轮迭代的一个小小总结，也作为API文档的供其他同事参考。也因为要作为API文档，因此本文会深入到代码级讲述每段代码甚至函数和关键变量的作用。</p><div align="center"><br><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fmt1r9awjvj315a0yo79x.jpg" alt=""><br>早期版本的拓扑图<br></div><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>拓扑图的目标是利用图形化的方式<strong>清晰地</strong>展示集群内<em>App、Service、Deployment、Pod、Storage</em>之间的关系，并提供交互手段给用户动态的增减Pod，查看某部分的Detail信息等。</p><h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p>最新版本的拓扑图效果如下图所示:</p><div align="center"><br><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fmt1rak9klj31kw16ctoy.jpg" alt=""><br>最新版本的拓扑图<br></div><p>请注意，图片中除了后期加上的说明文字和边框外，其他的一切元素都是使用<a href="https://d3js.org" target="_blank" rel="external">d3.js</a>这个库绘制上去的，包括其中的文字。</p><p>从总体上看，拓扑图由三个部分组成，分别是顶部的<strong>样例说明区</strong>、主体部分的<strong>信息展示区</strong>、右上角的<strong>细节信息展示区</strong>。画布名称是vis,这是一个很关键的全局变量。</p><h2 id="样例说明区"><a href="#样例说明区" class="headerlink" title="样例说明区"></a>样例说明区</h2><p>和另外两个部分不同，样例说明区是<strong>静态</strong>的，不会因为不同的App而变化。因此这个部分相对简单，涉及到的代码也不是很多。主要的实现方式是首先绘制一个无边框的圆角矩形放置在底部，然后用代码控制圆圈和相应文字的间隔和类型。类型是为了方便将css样式应用到图形上做的准备。核心代码如下：</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">     vis.append(<span class="string">'rect'</span>)</div><div class="line">      .attr(<span class="string">'x'</span>,<span class="number">-18</span>)</div><div class="line">      .attr(<span class="string">'y'</span>,<span class="number">-30</span>)</div><div class="line">      .attr(<span class="string">'rx'</span>,<span class="number">5</span>)</div><div class="line">      .attr(<span class="string">'ry'</span>,<span class="number">5</span>)</div><div class="line">      .attr(<span class="string">'width'</span>,<span class="number">4</span>*<span class="number">180</span>+<span class="number">120</span>)</div><div class="line">      .attr(<span class="string">'height'</span>,<span class="number">30</span>)</div><div class="line">      .attr(<span class="string">'stroke'</span>,<span class="string">'none'</span>)</div><div class="line">      .style(<span class="string">'fill'</span>,<span class="string">'#f0f0f0'</span>);</div><div class="line">      </div><div class="line"> <span class="keyword">var</span> exampleData = [<span class="string">'App'</span>,<span class="string">'Service'</span>,<span class="string">'Deployment'</span>,<span class="string">'Pod'</span>,<span class="string">'Storage'</span>];</div><div class="line">  <span class="keyword">var</span> example = vis.selectAll(<span class="string">'.example'</span>).data(exampleData).enter().append(<span class="string">'g'</span>);</div><div class="line">     </div><div class="line">      example.append(<span class="string">'circle'</span>)</div><div class="line">      .attr(<span class="string">'cy'</span>,<span class="number">-15</span>)</div><div class="line">      .attr(<span class="string">'cx'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="number">180</span>*(i);</div><div class="line">      &#125;)</div><div class="line">          .style(<span class="string">'fill'</span>,<span class="string">'#fff'</span>)</div><div class="line">      .attr(<span class="string">'r'</span>,<span class="number">7</span>)</div><div class="line">      .attr(<span class="string">'class'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;</div><div class="line">      <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</div><div class="line">          <span class="keyword">return</span> <span class="string">'app'</span></div><div class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i ==<span class="number">1</span>)&#123;</div><div class="line">          <span class="keyword">return</span> <span class="string">'service'</span></div><div class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i ==<span class="number">2</span>)&#123;</div><div class="line">          <span class="keyword">return</span> <span class="string">'deployment'</span></div><div class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i ==<span class="number">3</span>)&#123;</div><div class="line">          <span class="keyword">return</span> <span class="string">'pod'</span></div><div class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i ==<span class="number">4</span>)&#123;</div><div class="line">          <span class="keyword">return</span> <span class="string">'storage'</span></div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="string">'unclear'</span></div><div class="line">      &#125;</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">example.append(<span class="string">"text"</span>).attr(<span class="string">'class'</span>,<span class="string">'exampleTEXT'</span>).attr(<span class="string">"x"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>) </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="number">180</span>*i+<span class="number">10</span></div><div class="line">      &#125;).attr(<span class="string">"y"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="number">-15</span>;</div><div class="line">      &#125;).attr(<span class="string">"dy"</span>, <span class="string">".35em"</span>).attr(<span class="string">"text-anchor"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="string">"start"</span>;</div><div class="line">      &#125;).text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">          <span class="keyword">return</span> d;</div><div class="line">      &#125;).style(<span class="string">"fill-opacity"</span>, <span class="number">1</span>);</div></pre></td></tr></table></figure></code></pre><h2 id="主体信息展示区"><a href="#主体信息展示区" class="headerlink" title="主体信息展示区"></a>主体信息展示区</h2><p>主体信息的展示是拓扑图的核心部分。各个组件的数量会有很大的变化范围，这也是我们弃用老版本拓扑图的原因。坦率的讲，老版本的拓扑图是比较美观的、图形化的，但是遇到的核心问题是当某些组件数量过大时，容易引起大量的重叠问题，造成整个系统不work了。</p><p>而这个版本的拓扑图得益于d3提供的Tree布局方式，比较好的解决了这个问题。它会根据用户指定的画布宽高，算出最适合的布局方式，即每个点应该放置在哪里。</p><p>Tree-layout接受的数据形式如下图所示：</p><div align="center"><br><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fmt1rbeflhj31bg0cimza.jpg" alt=""><br>Tree-layout接受的数据格式<br></div><p>我们backend提供的json文件与要求的数据格式有较大的差别，下面比较恶心的代码的功能是利用循环将后端提供的json文件转化成Tree-layout需要的格式。在转换过程中，为了实现深拷贝功能，实现了<strong>deepClone</strong>函数，为方便起见，用了JSON的stringfy和parse方法编码解码。</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">d3.json(<span class="string">"topologyRaw.json"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error, data</span>) </span>&#123;</div><div class="line">     <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</div><div class="line"></div><div class="line">     <span class="keyword">var</span> jsonData = &#123;<span class="attr">name</span>:<span class="string">"nil"</span>,<span class="attr">children</span>:<span class="keyword">new</span> <span class="built_in">Array</span>()&#125;;</div><div class="line">     apps = data.app;</div><div class="line">     storages = data.storages;</div><div class="line">     services = data.services;</div><div class="line">     deployments = data.deployments;</div><div class="line"></div><div class="line">     <span class="keyword">var</span> tmpDeployment;</div><div class="line"></div><div class="line">     jsonData.name = data.app.name;</div><div class="line"></div><div class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span> ;i&lt;services.length;i++)&#123;</div><div class="line">         <span class="keyword">var</span> service = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">         <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;deployments.length;j++)&#123;</div><div class="line">             <span class="keyword">var</span> deployment = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">             <span class="keyword">if</span>(contains(deployments[j][<span class="string">"selector"</span>][<span class="string">"matchLabels"</span>],services[i][<span class="string">"selector"</span>]))&#123;</div><div class="line">                 <span class="keyword">var</span> pod = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">                 <span class="keyword">for</span>(<span class="keyword">var</span> k=<span class="number">0</span>;k&lt;deployments[j][<span class="string">"pods"</span>].length;k++)&#123;</div><div class="line">                     <span class="keyword">var</span> storage = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">                     <span class="keyword">for</span>(<span class="keyword">var</span> m=<span class="number">0</span>;m&lt;deployments[j][<span class="string">"pods"</span>][k][<span class="string">"storageNames"</span>].length;m++) &#123;</div><div class="line">                         <span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="number">0</span>; n &lt; storages.length; n++) &#123;</div><div class="line">                             <span class="keyword">if</span>(deployments[j][<span class="string">"pods"</span>][k][<span class="string">"storageNames"</span>][m]==storages[n][<span class="string">"storageName"</span>]) &#123;</div><div class="line">                                 <span class="keyword">if</span>(storages[n].unshared==<span class="literal">true</span> &amp;&amp; storages[n][<span class="string">"storageType"</span>]==<span class="string">"HostPath"</span>)</div><div class="line">                                 &#123;</div><div class="line">                                     <span class="keyword">for</span>(<span class="keyword">var</span> q=<span class="number">0</span>;q&lt;storages[n][<span class="string">"hostpathInfo"</span>].length;q++)</div><div class="line">                                     &#123;</div><div class="line">                                         storage.push(&#123;</div><div class="line">                                             name: storages[n][<span class="string">"storageName"</span>],</div><div class="line">                                             size: storages[n][<span class="string">"hostpathInfo"</span>][q][<span class="string">"amountBytes"</span>]</div><div class="line">                                         &#125;)</div><div class="line">                                     &#125;</div><div class="line">                                 &#125;</div><div class="line">                                 <span class="keyword">else</span>&#123;</div><div class="line">                                     storage.push(&#123;</div><div class="line">                                         name: deployments[j][<span class="string">"pods"</span>][k][<span class="string">"storageNames"</span>][m],</div><div class="line">                                         size: getAmountByStorageName(deployments[j][<span class="string">"pods"</span>][k][<span class="string">"storageNames"</span>][m])</div><div class="line">                                     &#125;)</div><div class="line">                                 &#125;</div><div class="line">                             &#125;</div><div class="line"></div><div class="line">                         &#125;</div><div class="line"></div><div class="line">                     &#125;</div><div class="line">                     pod.push(&#123;<span class="attr">name</span>:deployments[j][<span class="string">"pods"</span>][k].name,<span class="attr">children</span>:deepClone(storage)&#125;);</div><div class="line"></div><div class="line">                 &#125;</div><div class="line">                 tmpDeployment = deployments[j].name;</div><div class="line">             &#125;</div><div class="line">             deployment.push(&#123;<span class="attr">name</span>:(tmpDeployment),<span class="attr">children</span>:deepClone(pod)&#125;);</div><div class="line"></div><div class="line">         &#125;</div><div class="line"></div><div class="line">         jsonData.children.push(&#123;<span class="attr">name</span>:services[i].name,<span class="attr">children</span>:deepClone(deployment)&#125;);</div><div class="line">     &#125;</div><div class="line">     </div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">initalObj</span>) </span>&#123;</div><div class="line">     <span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">     obj = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(initalObj));</div><div class="line">     <span class="keyword">return</span> obj;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></code></pre><h3 id="节点的样式和展开功能"><a href="#节点的样式和展开功能" class="headerlink" title="节点的样式和展开功能"></a>节点的样式和展开功能</h3><p>为了让各个组件的样式满足设计师的严苛要求，需要根据Tree-Layout的depth(深度)进行判断，控制圆形的颜色、说明文字出现的位置<em>（放置位置和对齐方式）</em>。这部分逻辑是在nodeEnter、nodeUpdate和nodeExit相关变量后面指定的。也是凭借这三个变量之间的反差，每次页面刚打开并load的时候，会有一个舒展开的样式，非常美观。</p><div align="center"><br><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fmt1rdf06vg31hc1kwhdu.gif" alt=""><br>展开的过程<br></div><h3 id="节点的开关功能"><a href="#节点的开关功能" class="headerlink" title="节点的开关功能"></a>节点的开关功能</h3><p>同样，展开后，后期依然可以控制某个节点的子节点的开合状态，点击某个节点，它的子节点所包含的元素会以动画的形式收缩进它的位置，该节点的中心部分也会由白色变为浅灰色，并且整个布局会相应发生变化。再次点击，会执行相反的操作，收缩进去的部分会再次舒展开。这个逻辑是由toggle和update函数完成的。toggle函数的会将d.children保存到另一个变量_children中，然后将d.children置空(或执行相反操作)，然后调用update函数重新绘制Tree的分支。</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"> toggle = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(d) &#123;</div><div class="line">        <span class="keyword">if</span> (d.children) &#123;</div><div class="line">            d._children = d.children;</div><div class="line">            <span class="keyword">return</span> d.children = <span class="literal">null</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            d.children = d._children;</div><div class="line">            <span class="keyword">return</span> d._children = <span class="literal">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">update = <span class="function"><span class="keyword">function</span>(<span class="params">source</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> duration, link, node, nodeEnter, nodeExit, nodeUpdate, nodes;</div><div class="line">  duration = d3.event &amp;&amp; d3.event.altKey ? <span class="number">5000</span> : <span class="number">500</span>;</div><div class="line">  nodes = tree.nodes(root).reverse();</div><div class="line">  nodes.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> d.y = d.depth * <span class="number">180</span>;</div><div class="line">  &#125;);</div><div class="line">  node = vis.selectAll(<span class="string">"g.node"</span>).data(nodes, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> d.id || (d.id = ++i);</div><div class="line">  &#125;).attr(<span class="string">'id'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> d.name;</div><div class="line">  &#125;);</div></pre></td></tr></table></figure></code></pre><h3 id="增删pod的功能"><a href="#增删pod的功能" class="headerlink" title="增删pod的功能"></a>增删pod的功能</h3><p>增删pod的功能是在每条deployment与pod之间的加入两张预先做好的图片，监听click事件，调用相应的后端API，实现增删的功能。值得注意的是，<strong>圆环形、图片、文字说明</strong>是depolyment的一个g，点击图片默认情况下会造成deployment关闭状态。因此要在click事件中加入<strong>d3.event.stopPropagation();</strong>让点击事件不再向下传播。</p><h3 id="hover高亮效果"><a href="#hover高亮效果" class="headerlink" title="hover高亮效果"></a>hover高亮效果</h3><p>注意到，当鼠标hover到某个元素上时，元素代表的text会高亮，从APP开始经该元素到达storage的路径都将会被高亮。这个部分主要是由highlightOn和highlightOff这两个函数控制的。</p><p>在建立路径的时候，我们给每一段路径都加上一个一个id，由path的起始点到path的终点id+name组成，这样就可以唯一确定该path。</p><blockquote><p>id是： path.link.source-“ + d.parent.name+d.parent.id + “.target-“ + d.name+d.id</p></blockquote><p>hightlightOn函数中，有两个重要的子函数，<strong>parentLine()和childLine()</strong>，这两个函数使用了<strong>递归</strong>的方式寻找从App到该节点和从该节点到storage节点的路径，并给特定路径指定highlight class，或取消该class的影响。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">highlightOn = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> parentLine;</div><div class="line">  parentLine = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (d.parent) &#123;</div><div class="line">      parentLine(d.parent);</div><div class="line">      vis.selectAll(<span class="string">"path.link.source-"</span> + d.parent.name+d.parent.id + <span class="string">".target-"</span> + d.name+d.id).classed(<span class="string">'highlight'</span>, <span class="literal">true</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">  parentLine(d);</div><div class="line"></div><div class="line">  <span class="keyword">var</span> childLine = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">      <span class="keyword">if</span>(d.children &amp;&amp; d.children.length&gt;<span class="number">0</span>)&#123;</div><div class="line">          <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;d.children.length;i++)&#123;</div><div class="line">              childLine(d.children[i]);</div><div class="line">              vis.selectAll(<span class="string">"path.link.source-"</span>+d.name+d.id+<span class="string">".target-"</span>+d.children[i].name+d.children[i].id).classed(<span class="string">'highlight'</span>,<span class="literal">true</span>);</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;;</div><div class="line">  childLine(d);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> update(d);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">highlightOff = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">  vis.selectAll(<span class="string">"path.link"</span>).classed(<span class="string">'highlight'</span>, <span class="literal">false</span>);</div><div class="line">  <span class="keyword">return</span> update(d);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h2 id="detail信息"><a href="#detail信息" class="headerlink" title="detail信息"></a>detail信息</h2><p>Detail的信息，之前的博客中写过了，可以参考前面的<a href="http://zhihaozhang.github.io/2017/10/11/gInSVG/">博文</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;拓扑图是Console界面中一个重要的组成部分，它的愿景是我公司Console平台相比于其他公司相同平台的创新之处。这个部分一直是由我来负责
      
    
    </summary>
    
      <category term="visualization" scheme="http://zhihaozhang.github.io/categories/visualization/"/>
    
    
      <category term="d3" scheme="http://zhihaozhang.github.io/tags/d3/"/>
    
  </entry>
  
  <entry>
    <title>Swift4字典和集合的新特性</title>
    <link href="http://zhihaozhang.github.io/2017/10/13/DicAndSetInSwift4/"/>
    <id>http://zhihaozhang.github.io/2017/10/13/DicAndSetInSwift4/</id>
    <published>2017-10-13T06:02:20.042Z</published>
    <updated>2017-12-25T07:30:55.311Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Swift4中的字典和集合在这些方面变得更好"><a href="#Swift4中的字典和集合在这些方面变得更好" class="headerlink" title="Swift4中的字典和集合在这些方面变得更好"></a>Swift4中的字典和集合在这些方面变得更好</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在最新版本的Swift中，dictionaries和sets新增了很多行为方法和初始化方法，让一些常见的任务变得异常简单。诸如组合、过滤和transform值操作可以用一步完成，让使用者可以写出更高效和简洁的代码。</p><p>本篇博客将使用杂货铺中的商品作为例子演示这些新功能。GroceryItem结构体，由名字和部门组成，作为本例的数据类型。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">GroceryItem</span>: <span class="title">Hashable</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name: <span class="type">String</span></div><div class="line">    <span class="keyword">var</span> department: <span class="type">Department</span></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Department</span> </span>&#123;</div><div class="line">        <span class="keyword">case</span> bakery, produce, seafood</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> ==<span class="params">(lhs: GroceryItem, rhs: GroceryItem)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">return</span> (lhs.name, lhs.department) == (rhs.name, rhs.department)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> hashValue: <span class="type">Int</span> &#123;</div><div class="line">        <span class="comment">// Combine the hash values for the name and department</span></div><div class="line">        <span class="keyword">return</span> name.hashValue &lt;&lt; <span class="number">2</span> | department.hashValue</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Create some groceries for our store:</span></div><div class="line"><span class="keyword">let</span> 🍎 = <span class="type">GroceryItem</span>(name: <span class="string">"Apples"</span>, department: .produce)</div><div class="line"><span class="keyword">let</span> 🍌 = <span class="type">GroceryItem</span>(name: <span class="string">"Bananas"</span>, department: .produce)</div><div class="line"><span class="keyword">let</span> 🥐 = <span class="type">GroceryItem</span>(name: <span class="string">"Croissants"</span>, department: .bakery)</div><div class="line"><span class="keyword">let</span> 🐟 = <span class="type">GroceryItem</span>(name: <span class="string">"Salmon"</span>, department: .seafood)</div><div class="line"><span class="keyword">let</span> 🍇 = <span class="type">GroceryItem</span>(name: <span class="string">"Grapes"</span>, department: .produce)</div><div class="line"><span class="keyword">let</span> 🍞 = <span class="type">GroceryItem</span>(name: <span class="string">"Bread"</span>, department: .bakery)</div><div class="line"><span class="keyword">let</span> 🍤 = <span class="type">GroceryItem</span>(name: <span class="string">"Shrimp"</span>, department: .seafood)</div><div class="line"></div><div class="line"><span class="keyword">let</span> groceries = [🍎, 🍌, 🥐, 🐟, 🍇, 🍞, 🍤]</div></pre></td></tr></table></figure><p>后面的例子将围绕着groceries数组展示。</p><h2 id="用Key值对原数组进行分组"><a href="#用Key值对原数组进行分组" class="headerlink" title="用Key值对原数组进行分组"></a>用Key值对原数组进行分组</h2><p>字典拥有了一个新的初始化函数，可以将一系列值按照Key值进行分组。下面展示使用该初始化方法根据GroceryItem的department进行分组的一个小例子。</p><div align="center"><br><img src="https://swift.org/assets/images/dictionary-blog/grouping_2x.png" alt=""><br></div><p>在老版本的Swift中，用户可以使用如下的代码完成上述任务。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Swift &lt;= 3.1</span></div><div class="line"><span class="keyword">var</span> grouped: [<span class="type">GroceryItem</span>.<span class="type">Department</span>: [<span class="type">GroceryItem</span>]] = [:]</div><div class="line"><span class="keyword">for</span> item <span class="keyword">in</span> groceries &#123;</div><div class="line">    <span class="keyword">if</span> grouped[item.department] != <span class="literal">nil</span> &#123;</div><div class="line">        grouped[item.department]!.append(item)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        grouped[item.department] = [item]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这一过程需要使用type annotations、手动循环并且需要检查departement是否已经存在了。</p><p>在Swift4中，用户可以使用<strong>Dictionary(grouping:by)</strong>方法，仅需一行代码就可以达到上述效果。所要做的是传入一个闭包，该闭包返回数组每一项项对应的Key值即可。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Swift 4.0</span></div><div class="line"><span class="keyword">let</span> groceriesByDepartment = <span class="type">Dictionary</span>(grouping: groceries,</div><div class="line">                                       by: &#123; item <span class="keyword">in</span> item.department &#125;)</div><div class="line"><span class="comment">// groceriesByDepartment[.bakery] == [🥐, 🍞]</span></div></pre></td></tr></table></figure><p>最终的字典groceriesByDepartment对每个department都有唯一入口，而且该入口对应着GroceryItem相应的name。例如，使用.bakery作为入口，将返回[🥐, 🍞]数组。</p><h2 id="获得字典值的数量"><a href="#获得字典值的数量" class="headerlink" title="获得字典值的数量"></a>获得字典值的数量</h2><p>使用新的<strong>mapValues(_:)</strong>方法，用户可以方便的获得每个入口对应数组的长度。以上面例子中获取的groceriesByDepartment字典为例：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> departmentCounts = groceriesByDepartment.mapValues &#123; items <span class="keyword">in</span> items.<span class="built_in">count</span> &#125;</div><div class="line"><span class="comment">// departmentCounts[.bakery] == 2</span></div></pre></td></tr></table></figure><p>因为字典有相同的key，只是值不同，所以可以不需要重新计算哈希值，从而使得调用<strong>mapValues(_:)</strong>方法比从头建立字典快很多。</p><h2 id="从键值对建立字典"><a href="#从键值对建立字典" class="headerlink" title="从键值对建立字典"></a>从键值对建立字典</h2><p>Swift4提供了两种方法给用户从键值对序列生成字典，一种方法允许key有重复，另一种不允许。</p><p>使用<strong>zip(<em>:</em>:)</strong>函数可以将一些了键值组合起来。例如下面的代码就创立了一系列(String,GroceryItem)元组。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> zippedNames = <span class="built_in">zip</span>(groceries.<span class="built_in">map</span> &#123; $<span class="number">0</span>.name &#125;, groceries)</div></pre></td></tr></table></figure><p>zippedNames的每一项都是一个元组(tuple)，第一项是<strong>(“Apples”, 🍎)</strong>.因为name值是唯一的，下面的方法就可以创建一个字典，也是我们上面提到的不允许key值重复的方法。</p><div align="center"><br><img src="https://swift.org/assets/images/dictionary-blog/uniqueKeys_2x.png" alt=""><br></div><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> groceriesByName = <span class="type">Dictionary</span>(uniqueKeysWithValues: zippedNames)</div><div class="line"><span class="comment">// groceriesByName["Apples"] == 🍎</span></div><div class="line"><span class="comment">// groceriesByName["Kumquats"] == nil</span></div></pre></td></tr></table></figure><p>当然，要使用该方法的前提是你可以确保key值是不重复的。否则会引起runtime error。</p><p>如果key值可能会重复，使用另一个方法:<strong>Dictionary(_:uniquingKeysWith:)</strong>。这个方法需要传入一个闭包来处理当key重复时的操作。闭包的第一个参数是key(键)对应的old value(值)，而第二个对应的是新值。用户可以在闭包里写相应的逻辑，比如新值替代老值，或者将新老值合并。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> pairs = [(<span class="string">"dog"</span>, <span class="string">"🐕"</span>), (<span class="string">"cat"</span>, <span class="string">"🐱"</span>), (<span class="string">"dog"</span>, <span class="string">"🐶"</span>), (<span class="string">"bunny"</span>, <span class="string">"🐰"</span>)]</div><div class="line"><span class="keyword">let</span> petmoji = <span class="type">Dictionary</span>(pairs,</div><div class="line">                         uniquingKeysWith: &#123; (old, new) <span class="keyword">in</span> new &#125;)</div><div class="line"><span class="comment">// petmoji["cat"] == "🐱"</span></div><div class="line"><span class="comment">// petmoji["dog"] == "🐶"</span></div></pre></td></tr></table></figure><p>看上面的例子，dog对应了两个值。当方法处理到(“dog”, “🐶”)时，闭包的参数是 (“🐕”， “🐶”)，而闭包的逻辑是返回第二个值，因此新值就代替了老值，最终的字典中，dog对应的值就是🐶。</p><h2 id="筛选出特定的项"><a href="#筛选出特定的项" class="headerlink" title="筛选出特定的项"></a>筛选出特定的项</h2><p>字典现在有了一个<strong>filter(_:)</strong>方法，返回值是满足条件的新字典<strong><em>(早期版本的swift返回的是一个数组)</em></strong>。方法传入的参数依然是一个闭包，如果某一项需要在返回值中出现，闭包返回true，否则返回false。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">isOutOfStock</span><span class="params">(<span class="number">_</span> item: GroceryItem)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="comment">// Looks up `item` in inventory</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> outOfStock = groceriesByName.<span class="built_in">filter</span> &#123; (<span class="number">_</span>, item) <span class="keyword">in</span> isOutOfStock(item) &#125;</div><div class="line"><span class="comment">// outOfStock["Croissants"] == 🥐</span></div><div class="line"><span class="comment">// outOfStock["Apples"] == nil</span></div></pre></td></tr></table></figure><p>上例中，isOutOfStock决定某一项该不该出现在返回值字典中。</p><h2 id="使用默认值"><a href="#使用默认值" class="headerlink" title="使用默认值"></a>使用默认值</h2><p>字典现在提供了类似数组下标来获取和更新值，下面的代码定义了一个简单的购物篮，key是商品，value是商品的数量。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Begin with a single banana</span></div><div class="line"><span class="keyword">var</span> cart = [🍌: <span class="number">1</span>]</div></pre></td></tr></table></figure><p>因为某些key在字典中没有对应的值，因此你用key去获取值的时候，返回结果是optional的。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// One banana:</span></div><div class="line">cart[🍌]    <span class="comment">// Optional(1)</span></div><div class="line"><span class="comment">// But no shrimp:</span></div><div class="line">cart[🍤]    <span class="comment">// nil</span></div></pre></td></tr></table></figure><p>可以使用<strong>??</strong>操作符将optinal值拆包为真实的数值，现在swift4提供了另一种解决方案（设置默认值），如果key对应的值存在，那么返回该值，否则返回默认值。如果key没有对应值，那么返回默认值。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Still one banana:</span></div><div class="line">cart[🍌, <span class="keyword">default</span>: <span class="number">0</span>]    <span class="comment">// 1</span></div><div class="line"><span class="comment">// And zero shrimp:</span></div><div class="line">cart[🍤, <span class="keyword">default</span>: <span class="number">0</span>]    <span class="comment">// 0</span></div></pre></td></tr></table></figure><p>甚至用下面的代码简化增加新item到购物车的过程。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> item <span class="keyword">in</span> [🍌, 🍌, 🍞] &#123;</div><div class="line">    cart[item, <span class="keyword">default</span>: <span class="number">0</span>] += <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当循环处理到🍌时，检索到当前值，然后自增，放回到原字典中。当检索到🍞时，发现🍞现在并没有对应值，从而返回默认值0，自增为1，存储到字典中，下次检索的时候就变成了1.</p><h2 id="合并两个字典到一个字典中"><a href="#合并两个字典到一个字典中" class="headerlink" title="合并两个字典到一个字典中"></a>合并两个字典到一个字典中</h2><p>将两个字典合并也变得异常简单。swift4提供了<strong>merge(_:uniquingKeysWith:)</strong>方法来处理合并操作。和上面一样，需要传入一个闭包完成合并的逻辑，当两个字典拥有相同的key值时，由该闭包处理如何操作。</p><p><img src="https://swift.org/assets/images/dictionary-blog/merging_2x.png" alt=""></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> otherCart = [🍌: <span class="number">2</span>, 🍇: <span class="number">3</span>]</div><div class="line">cart.merge(otherCart, uniquingKeysWith: +)</div><div class="line"><span class="comment">// cart == [🍌: 5, 🍇: 3, 🍞: 1]</span></div></pre></td></tr></table></figure><p>上面的代码将相同key对应的值相加作为新字典中的值。</p><p>如果不想原地合并，可以使用<strong>merging(_:uniquingKeysWith:)</strong>方法生成一个新字典。</p><h2 id="And-That’s-Not-All…"><a href="#And-That’s-Not-All…" class="headerlink" title="And That’s Not All…"></a>And That’s Not All…</h2><p>上面介绍的新特性并不是全部，限于篇幅，并没有完全介绍全。</p><p>和字典一样，集合也拥有了新的<strong>filter(_:) </strong>方法，返回的也是集合，而不是早起版本中的数组。字典和集合现在提供了暴漏现在capacity的方法:<strong>reserveCapacity(_:)</strong>，有了该方法，用户可以看到并控制他们的内部存储。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>本文译自：<a href="https://swift.org/blog/dictionary-and-set-improvements/" target="_blank" rel="external">https://swift.org/blog/dictionary-and-set-improvements/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Swift4中的字典和集合在这些方面变得更好&quot;&gt;&lt;a href=&quot;#Swift4中的字典和集合在这些方面变得更好&quot; class=&quot;headerlink&quot; title=&quot;Swift4中的字典和集合在这些方面变得更好&quot;&gt;&lt;/a&gt;Swift4中的字典和集合在这些方面变得
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="swift" scheme="http://zhihaozhang.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>为SVG中大小可变的&lt;g&gt;元素加上边框和背景色</title>
    <link href="http://zhihaozhang.github.io/2017/10/11/gInSVG/"/>
    <id>http://zhihaozhang.github.io/2017/10/11/gInSVG/</id>
    <published>2017-10-11T13:11:38.258Z</published>
    <updated>2017-12-25T07:30:55.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题的出现"><a href="#问题的出现" class="headerlink" title="问题的出现"></a>问题的出现</h1><p>我在使用d3js开发项目过程中，遇到了这样的需求，将鼠标hover到某些元素上时，将该元素的detail信息<strong>逐条展示</strong>出来，而且为了将detail框与其他元素区别开来，需要给detail展示区域添加边框或增加底色，想要的效果大概是下面的图那样的。</p><div align="center"><br><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fmt1s2d9egj31kw13taw8.jpg" alt=""><br>预期效果图<br></div><h1 id="问题解决思路"><a href="#问题解决思路" class="headerlink" title="问题解决思路"></a>问题解决思路</h1><p>普通的HTML元素有很多方法来获得其宽高等其他位置属性的方法。如果是一组元素，可以用div标签将他们组合起来，指定div的border颜色和宽度，div的边框会根据元素的宽高动态改变大小。</p><p>SVG中，将元素成组的标签是g元素，之前使用它是将元素进行分组，然后统一进行平移和旋转之类的功能变换。毫无意外的，普通DOM元素获取宽高和位置属性的方法offsetWidth、ClientWidth全部失效，返回值均为<strong>undefined</strong>。我的初步想法是获得这些元素，然后绘制矩形，这样就有了类似div的边框效果。</p><p>在Stack Overflow中，找到了问题的答案，有两个原生的JS方法可以作为候选。</p><h2 id="getBBox"><a href="#getBBox" class="headerlink" title="getBBox"></a>getBBox</h2><p>document.getElementById(“g1”).getBBox()的返回结果如下：</p><div align="center"><br><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fmt1s3fys0j30a5043t8v.jpg" alt=""><br>getBBox返回值<br></div><h2 id="getBoundingClientRect"><a href="#getBoundingClientRect" class="headerlink" title="getBoundingClientRect()"></a>getBoundingClientRect()</h2><p>而document.getElementById(“g1”).getBoundingClientRect()的返回结果如下：</p><div align="center"><br><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fmt1s3uu3vj30810553z4.jpg" alt=""><br>getBoundingClientRect返回值<br></div><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>发现两个方法的返回结果是不一样的，主要是因为getBBox()获得的是元素在当前SVG坐标中的数据，而getBoundingClientRect()则是浏览器的坐标。<br>显然，getBBox()方法更贴合我们的需求。</p><h1 id="添加背景色"><a href="#添加背景色" class="headerlink" title="添加背景色"></a>添加背景色</h1><p>getBBox方法可以让我们知道矩形该如何绘制，如果让矩形fill none的话，是可以看到底层的文字的，但设计师比较执拗，死磕我需要背景色。而正确获取矩形位置大小是需要先将detail信息绘制到svg画板上的，因此后面再绘制矩形的时候，矩形就盖住了底层的detail信息文字。</p><p>对于这个先有鸡还是先有蛋的问题，我采取了一个比较tricky的方法，即在绘制完矩形之后，再绘制一遍deatil信息，这样后绘制的detail信息就处在了矩形的上层，从而可以被用户看到，而底层的detail信息实际上是存在的，只不过是被矩形这遮挡住了。</p><p>给设计师看过效果之后，他露出了满意的微笑☺。</p><p>代码</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawDeatilBorder</span>(<span class="params">data</span>)</span>&#123;</div><div class="line"></div><div class="line">           vis.selectAll(<span class="string">'.detailBorder'</span>).remove();</div><div class="line"></div><div class="line">           <span class="keyword">var</span> position = <span class="built_in">document</span>.getElementById(<span class="string">"detailInfoBorder"</span>).getBBox();</div><div class="line"></div><div class="line">           vis.append(<span class="string">'rect'</span>).attr(<span class="string">'class'</span>,<span class="string">'detailBorder'</span>).style(<span class="string">'fill'</span>,<span class="string">'#f0f0f0'</span>).attr(<span class="string">'x'</span>,position.x<span class="number">-20</span>).attr(<span class="string">'y'</span>,position.y<span class="number">-20</span>).attr(<span class="string">'width'</span>,position.width+<span class="number">40</span>)</div><div class="line">               .attr(<span class="string">'height'</span>,position.height+<span class="number">40</span>).attr(<span class="string">'fill'</span>,<span class="string">'red'</span>).attr(<span class="string">'rx'</span>,<span class="string">'3px'</span>).attr(<span class="string">'ry'</span>,<span class="string">'3px'</span>).attr(<span class="string">'stroke'</span>,<span class="string">'none'</span>);</div><div class="line"></div><div class="line">           <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">           <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> data) &#123;</div><div class="line"></div><div class="line">               <span class="keyword">if</span> (<span class="keyword">typeof</span>(data[key]) !== <span class="string">"object"</span>) &#123;</div><div class="line">                   i++;</div><div class="line">                   vis.append(<span class="string">"text"</span>).attr(<span class="string">'class'</span>, <span class="string">'detailInfo'</span>).attr(<span class="string">"x"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                       <span class="keyword">return</span> <span class="number">850</span></div><div class="line">                   &#125;).attr(<span class="string">"y"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                       <span class="keyword">return</span> i * <span class="number">20</span> + <span class="number">30</span>;</div><div class="line">                   &#125;).attr(<span class="string">"dy"</span>, <span class="string">".35em"</span>).attr(<span class="string">"text-anchor"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                       <span class="keyword">return</span> <span class="string">"start"</span>;</div><div class="line">                   &#125;).text(<span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</div><div class="line">                       <span class="keyword">return</span> key + <span class="string">" : "</span> + data[key];</div><div class="line">                   &#125;)</div><div class="line">                       .style(<span class="string">"fill-opacity"</span>, <span class="number">1</span>);</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">       &#125;</div></pre></td></tr></table></figure></code></pre><p><a href="https://github.com/zhihaozhang/Topology" target="_blank" rel="external">项目开源地址</a>,供参考。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题的出现&quot;&gt;&lt;a href=&quot;#问题的出现&quot; class=&quot;headerlink&quot; title=&quot;问题的出现&quot;&gt;&lt;/a&gt;问题的出现&lt;/h1&gt;&lt;p&gt;我在使用d3js开发项目过程中，遇到了这样的需求，将鼠标hover到某些元素上时，将该元素的detail信息&lt;str
      
    
    </summary>
    
      <category term="visualization" scheme="http://zhihaozhang.github.io/categories/visualization/"/>
    
    
      <category term="SVG" scheme="http://zhihaozhang.github.io/tags/SVG/"/>
    
  </entry>
  
  <entry>
    <title>mouseSync后续功能完善心得</title>
    <link href="http://zhihaozhang.github.io/2017/09/29/mouseSyncII/"/>
    <id>http://zhihaozhang.github.io/2017/09/29/mouseSyncII/</id>
    <published>2017-09-29T13:26:44.235Z</published>
    <updated>2017-12-25T07:30:55.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在<a href="http://zhihaozhang.github.io/2017/09/23/让iMac与MacBook高效协同工作——mouseSync开发心得/">上篇博客</a>中,我介绍了mouseSync这款软件的开发初衷、使用场景和开发的过程，感谢一些朋友试用该软件并给我留言，提出了一些新的需求和issue。同时也感谢开发者头条的推荐至头版的精选板块，让那篇开发笔记被2万开发者阅读过了，收获了<strong>github的star</strong>若干、<strong>公众号的关注</strong>若干、赞赏约<strong>50元</strong>。真的非常感谢大家的关注、star鼓励和金钱赞赏。</p><p>我整理了一下大家的需求，大体上可归纳为3类。</p><ol><li>没有logo</li><li>在外部设备(鼠标/Trackpad真正属于的那台Mac)上容易引起误操作</li><li>一个关键的功能，左键拖拽功能，没有实现</li></ol><p>在这篇博客中，我就来写一下对上面提到的三个需求的解决方案。完成上述三个需求后的软件在<a href="https://pan.baidu.com/s/1i5Gee6T" target="_blank" rel="external">网盘</a>可下载到，最新代码依然开源在<a href="https://github.com/zhihaozhang/mouseSync" target="_blank" rel="external">github</a>上。</p><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><h2 id="没有logo"><a href="#没有logo" class="headerlink" title="没有logo"></a>没有logo</h2><p>其实这件事挺尴尬的，我不是设计师，因此平时logo的主要来源是<a href="https://www.flaticon.com" target="_blank" rel="external">flaticon</a>，这次没忍心打扰正在熟睡的非著名设计师Joseph，因此还是在flaticon上找的icon，进行了简单的颜色变换与组合。</p><p>icon考虑到了mouseSync具有鼠标和蓝牙的特性，因此还是比较写实的。考虑到蓝牙客户端有外部设备和数据中心(两台Mac)之分，因此两个icon虽然很相似，但仍有细微的不同。不同点在于，数据中心的icon多了一个类似信号指示的标志，表示它是接收蓝牙信号的一端。</p><p>由于本人设计方面实在业余，还请大家轻喷。有空再找非著名设计师Joseph实现一枚漂亮的logo。</p><div align="center"><br><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fmt1re8nvhj30bs078wez.jpg" alt=""><br>&gt; icons<br></div><h2 id="在外部设备端容易引起误操作"><a href="#在外部设备端容易引起误操作" class="headerlink" title="在外部设备端容易引起误操作"></a>在外部设备端容易引起误操作</h2><p>之前的demo视频中，为了让两台电脑看起来一致，我录的是同时打开文件，同时在图标上右击，在现实生活中，在同一时刻同时操作两台Mac的需求很少不存在。通常情况下，用户还是想对某一台Mac进行操作的。<strong>mouseSync的定位应该是：帮助用户用一个鼠标操作两台电脑，且给用户决定什么时候操作哪台，省去两个鼠标之间换来换去的麻烦。</strong></p><p>之前的项目中，我对鼠标事件添加的均是全局监控事件，因此只要mouseSync<strong>生命周期</strong>没有结束，它的操作将实时被发送到另一台mac上。我想过两个解决方案：</p><ol><li>跟其他共享键盘的软件一样，使用全局快捷键对蓝牙通知服务进行开启/关闭</li><li>将全局监控事件变成局部监控事件，蓝牙通知服务仅在应用视图为Keywindow时有效</li></ol><h3 id="为什么选择Plan-B"><a href="#为什么选择Plan-B" class="headerlink" title="为什么选择Plan B"></a>为什么选择Plan B</h3><p>关于方案1，我觉得作为一款软件，快捷键应当由用户自己决定，虽然cocoapod上已经有非常好的项目<a href="https://github.com/Clipy/KeyHolder" target="_blank" rel="external">KeyHolder</a>进行支持,但是考虑到两个因素还是决定使用Plan B。</p><p>先看看Plan B，Plan B是这样的，首先让当前的window全屏，但是里面没有内容，因此无论在当前试图下如何操作，都不会有可能造成误操作。回到Plan A，快捷键的录入放到哪里呢？如果放到当前视图，将会带来一定的误操作风险；如果放到MenuBar，那么用户将不得不退出全屏模式，到菜单栏进行设置，这样的解决方案破坏了用户体验，综合考虑，最终还是选了Plan B。</p><h3 id="实现过程中遇到的问题"><a href="#实现过程中遇到的问题" class="headerlink" title="实现过程中遇到的问题"></a>实现过程中遇到的问题</h3><p>让当前窗口一打开就全屏的方法是在ViewDidLoad方法体中进行控制的:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">super</span>.viewDidLoad()</div><div class="line"><span class="keyword">self</span>.view.window?.zoom(<span class="keyword">self</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>但是我很快就发现了问题：<strong>尽管已经将应用全屏了，但是用户依然会有一定几率对dock栏和顶部菜单栏进行误操作。</strong>用户如果在操作另一台电脑的时候，还得注意这台电脑上是不是误操作了，这不符合我们软件开发的初衷。考虑到有些用户将dock放在底部，有些用户将dock放在左边，因此，我加了这样的限制，当用户将鼠标移动到距离屏幕边缘<strong>50px</strong>以内的时候，程序帮助他将鼠标移动至屏幕中央。参照下图，灰色地带就可以作为防止鼠标误操作的缓冲区。</p><div align="center"><br><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fmt1rf58m6j30vw0j8wff.jpg" alt=""><br>&gt; 防止对dock和菜单栏误操作解决方法示意图<br></div><p>阅读过上一篇博客的朋友一定注意到了，我们的程序是记录上一个鼠标点的位置，并将上一个鼠标点的位置与当前位置相减，将位置变动作为特征值进行发送。因此，在鼠标被程序移动到屏幕中央的时候，需要将上一个位置更新为屏幕中央的坐标。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//屏幕宽高的获取方式</span></div><div class="line">    <span class="keyword">let</span> <span class="type">SCREEN_WIDTH</span> = <span class="type">NSScreen</span>.main()!.frame.width</div><div class="line">    <span class="keyword">let</span> <span class="type">SCREEN_HEIGHT</span> = <span class="type">NSScreen</span>.main()!.frame.height</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="左键拖拽功能"><a href="#左键拖拽功能" class="headerlink" title="左键拖拽功能"></a>左键拖拽功能</h2><p>左键拖一个文件或窗口到一个新位置这个功能还是经常被使用到的，我使用的是Trackpad，通常是使用<strong>三支拖移</strong>。想要监听外围设备的这个动作并不难，但是想让计算机模拟这个操作相对比较困难。就像双击不是单纯的模拟单击事件两次一样，这次我又踩到坑了，drag and move事件并不是简单的mousedown-&gt; mousemove -&gt; mouseup这么容易的事情。</p><p>我在<a href="https://stackoverflow.com/questions/1817628/clicking-the-mouse-down-to-drag-objects-on-mac" target="_blank" rel="external">Stack Overflow</a>上找到了正确的方法：有一个叫<strong>kCGEventLeftMouseDragged</strong>的事件，专门来处理这件事。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mouse_left_drag_to</span><span class="params">(<span class="keyword">float</span> x, <span class="keyword">float</span> y)</span> </span>&#123;</div><div class="line">    CGEventRef left_drag_event = CGEventCreateMouseEvent(<span class="literal">NULL</span>, kCGEventLeftMouseDragged, CGPointMake(x, y), <span class="number">0</span>);</div><div class="line"></div><div class="line">    CGEventPost(kCGHIDEventTap, left_drag_event);</div><div class="line">    CFRelease(left_drag_event);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>和Scroll滚轮事件一样，这里我们采用的是Quartz模拟鼠标事件,因此依然需要C与swift进行混编。模拟总共可分为3步：第一步是创建一个Quartz鼠标事件；第二步是将这个事件放到事件流中，并指定位置；第三步是release这个事件。</p><p>模拟这个事件的时候，随着鼠标拖拽后的不停移动，会不停产生event，而且event中x和y的偏移量始终是相对于第一次鼠标drag按下时的坐标。因此，我们需要记录两件事，第一件事是第一次drag时候的坐标，第二件事是当前是不是开启了新一轮的drag还是仍然在上一轮的drag中。核心代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> dragFirst == <span class="literal">true</span>&#123;</div><div class="line">dragFirst = <span class="literal">false</span></div><div class="line">    mouseLocBeforeDrag = <span class="type">NSEvent</span>.mouseLocation()                 mouseLocBeforeDrag.y = <span class="type">NSHeight</span>(<span class="type">NSScreen</span>.screens()![<span class="number">0</span>].frame) - mouseLocBeforeDrag.y;</div><div class="line">    </div><div class="line">    mouse_left_drag_to(<span class="type">Float</span>(mouseLocBeforeDrag.x)+<span class="type">Float</span>(dx!),<span class="type">Float</span>(mouseLocBeforeDrag.y)-<span class="type">Float</span>(dy!)</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    mouse_left_drag_to(<span class="type">Float</span>(mouseLocBeforeDrag.x)+<span class="type">Float</span>(dx!),<span class="type">Float</span>(mouseLocBeforeDrag.y)-<span class="type">Float</span>(dy!))</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面的代码有两处需要注意：</p><ol><li>dragFirst初始值为true,在mouseUp之后重新置为true，表示一轮的drag已经完成了；</li><li>y的坐标是-，x的坐标是+，这是由OS X的坐标系决定的。</li></ol><p>最后，我用两台电脑同时在画板上写了一个牛B。mouseSync的开发工作算是告一段落了，希望对大家有所帮助！</p><div align="center"><br><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fmt1rhcpcag307k0dcx6s.gif" alt=""><br>&gt; drag事件demo<br></div><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://stackoverflow.com/questions/1817628/clicking-the-mouse-down-to-drag-objects-on-mac" target="_blank" rel="external">https://stackoverflow.com/questions/1817628/clicking-the-mouse-down-to-drag-objects-on-mac</a></li><li><a href="https://www.flaticon.com" target="_blank" rel="external">https://www.flaticon.com</a></li></ol><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>试用软件之后如果您对软件有任何的意见与建议，欢迎留言。如果您喜欢这款软件，也欢迎您将它推荐给您的朋友们。让我们一起将mouseSync变得更好！</p><p>我会在订阅号里不定期分享我个人的macOS/ios开发心得和开发笔记，也会在里面发表对于苹果产品/框架/趋势的拙见，希望爱好科技产品或者苹果生态圈的开发者关注。相信本公众号一定能给您带来收获和启发。</p><p>【欢迎扫码关注微信公众号】</p><div align="center"><br><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fmt1rkdtu2g307k0dcx6s.gif" alt=""><br>&gt; 扫码关注微信公众号 骨灰级果粉 获得最新文章更新<br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在&lt;a href=&quot;http://zhihaozhang.github.io/2017/09/23/让iMac与MacBook高效协同工作—
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="macOS开发" scheme="http://zhihaozhang.github.io/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>青芒 for Mac客户端开发笔记</title>
    <link href="http://zhihaozhang.github.io/2017/09/26/%E9%9D%92%E8%8A%92%20for%20Mac%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    <id>http://zhihaozhang.github.io/2017/09/26/青芒 for Mac客户端开发笔记/</id>
    <published>2017-09-26T02:59:15.000Z</published>
    <updated>2018-01-07T03:14:57.086Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于轻芒和青芒"><a href="#关于轻芒和青芒" class="headerlink" title="关于轻芒和青芒"></a>关于轻芒和青芒</h1><p>轻芒阅读是我每天都会打开的app，在它提供的两百多个channel中，我订阅了其中十几个channel，非常喜欢这个产品。这个产品的创始人是王俊煜，他曾经创办了一个更有名的公司——豌豆荚。关于轻芒和俊煜的更多介绍，请参照： <a href="http://tech2ipo.com/10034248" target="_blank" rel="external">前沿科技</a>的报道。虽然报道里强调了轻芒不是青芒，但是参照知了和知乎的关系，我还是决定把我的客户端取名为青芒。而且取名青芒的一大好处是logo好设计。做完原型的第二天，我就找了非著名设计师Joseph帮我设计了一枚logo，个人觉得还是很赞的。</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fn7v2jbv2gj309m09ya9y.jpg" alt="非著名设计师Joseph设计的logo" title="非著名设计师Joseph设计的logo"></p><blockquote><p>非著名设计师Joseph设计的logo</p></blockquote><h1 id="为什么要做青芒"><a href="#为什么要做青芒" class="headerlink" title="为什么要做青芒"></a>为什么要做青芒</h1><p>8月18日，我在github闲逛的时候发现了轻芒团队仍处于内测阶段的<a href="https://github.com/qingmang-team/docs" target="_blank" rel="external">API文档</a>，抱着试一试的态度，我给轻芒团队发送了内测申请的邮件，两天后得到了对方产品经理振辉的回复，同意了我参加内测的申请，在这表示感谢。收到邮件之后我兴奋异常，虽然之前也做了像微博、twitter、Instagram的客户端，但是这些产品早已有比我做的更好的产品上架到Apple Store了，估计除了我以外，没有人会用我开发的简陋版客户端。而轻芒则不同，目前还真没有mac和windows的客户端。</p><p>轻芒的用户通常对精神生活有丰富的追求，在macOS和windows中，我估计macOS用户会非常多，因此我选择了macOS平台，我认为这对我是一个机会，可能会有不少人试用这款软件。毕竟看到别人电脑或手机上运行着你开发的软件，还是会给人带来很大的成就感的。(偷笑)</p><p>据不完全统计，自从开源以来，已经有100多人下载了该软件。</p><h1 id="青芒是怎么做的"><a href="#青芒是怎么做的" class="headerlink" title="青芒是怎么做的"></a>青芒是怎么做的</h1><p>知了是知乎日报的mac客户端，青芒跟知了有着相同的需求，即展示channel list、article list、article content三个部分，于是萌生了借鉴知了的念头，搜了一圈之后发现github上并没有类似的mac软件开源出来，于是做了决定：自己从头开始写，并且写完的第一件事就是将项目开源。我相信三段式布局的应用会适用很多场景，并且会给初学者们带来一定的启发。项目开源在<a href="https://github.com/zhihaozhang/qingmang-for-mac" target="_blank" rel="external">我的github</a>上，欢迎fork和star，特别感谢github开发者@jydemo、@immress对本项目提出的改进与code实现，效果图如下。</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fn7v94jow3j31kw17eu0x.jpg" alt="客户端视图（模仿的知了）" title="客户端视图（模仿的知了）"></p><blockquote><p>客户端视图（模仿的知了）</p></blockquote><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fn7v9xllkcj30hs0q6409.jpg" alt="Notification Center视图（略丑）" title="Notification Center视图（略丑）"></p><blockquote><p>Notification Center视图（略丑）</p></blockquote><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fn7vatotr1j30hs0dc74p.jpg" alt="TouchBar视图" title="TouchBar视图"></p><blockquote><p>TouchBar视图</p></blockquote><p>轻芒的API遵循RPC风格，形如 域名/主体.操作，主体和操作都使用小写开头的驼峰命名法，总体上还是比较容易调用的。青芒目前用到了其中的category.list、category.get、article.list、article.get。经测试，发现内测版里提供的channel还非常有限，只有11个，所以目前选择将所有channel展示出来。</p><p>开发青芒过程中，使用到了如下技术：<strong>HTTP请求、json解析、NSSplitView、WebKit、NSTableView、多线程(GCD)、imageView、自定义NSTextField、NSScrollView、自定义Window、NSTouchBar、NCWidgetProviding</strong>等技术,下面我来详细介绍一下青芒实现的过程。</p><h1 id="界面部分"><a href="#界面部分" class="headerlink" title="界面部分"></a>界面部分</h1><p>macOS/ios界面的构建一直是值得争论的话题，大体上有三种可选方式：</p><ol><li>纯代码手写</li><li>Xib文件</li><li>Stroyboard</li></ol><h2 id="纯手写代码"><a href="#纯手写代码" class="headerlink" title="纯手写代码"></a>纯手写代码</h2><p>纯手写代码是极客的不二选择，对于多人协作工作是很好的选择，但是缺点主要是不能直观的看到效果、编码速度很慢，例如初始化一个自定义的Button可能就需要二十行代码，非常不利于阅读。</p><h2 id="Xib文件"><a href="#Xib文件" class="headerlink" title="Xib文件"></a>Xib文件</h2><p>Xib解决了上面的两个问题，提升了开发效率。其实Xib就是XML格式的文件，在编译过程中，被编译成Nib文件，每个Nib文件跟对应的ViewController关联。Xib的缺点是：代码可能回覆盖UI的设计，而且每个视图都需要单个的Xib，视图间的跳转依然需要代码控制。</p><h2 id="Stroyboard"><a href="#Stroyboard" class="headerlink" title="Stroyboard"></a>Stroyboard</h2><p>为了解决了Xib的问题，Apple提供了故事板功能。StoryBoard可以看成将很多Xib集中到了一起，像讲述一个故事一样，清晰的看到每个ViewController之间的跳转关系，跳转可以不用写代码了。因此我选用了StoryBoard来构建青芒。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fn7vbolacsj30hs09zt8r.jpg" alt="青芒的StoryBoard文件截图" title="青芒的StoryBoard文件截图"></p><blockquote><p>青芒的StoryBoard文件截图</p></blockquote><p>从StroyBoard截图可以清晰的看到整个界面的布局，整个界面的布局是模仿的知乎日报Mac客户端（知了）做的，经典的三段式布局，NSSplitView可以将界面分成左右(或上下)的两部分。考虑到主题一列比较窄，而且主题和相应主题下的文章有强关联关系，因此借用SplitView将Overview Controller一分为二，这样三段式布局就算是完成了。</p><p>先从左边的OverView视图说起，这个视图里由两部分组成，第一个部分是一系列的主题按钮，点击之后，在右边的NSTableview里展示对应主题下的最新文章list。最新文章list点击之后，在右边的DetailView中用一个WebView展现文章的详情。</p><p>黑色的部分是TouchBar的视图，TouchBar是苹果在MacBook Pro 2016机型上加入的一个新的交互设备，围绕他的讨论有很多，我们有空可以单独聊一下，但是为了尊重这条价值4K的bar，我还是决定做了相应的适配，将主题通过按钮的形式放到了Bar上，Bar上的按钮和OverView的按钮是需要做联动功能的，在下文中会提到。</p><p>耐心地拖入相关控件、控制控件之间的相对位置，最初始的原型就算是完成了。当然，经过试用，还是可以发现优化的部分，比如Overview里的tableview并不是顶到window title的，这样用户拖拽那部分的时候，窗口依然可以移动，同样，WebView上方也是需要留白的。虽然只是个很小的细节，但真的很讨好用户。</p><h1 id="自定义取代系统默认"><a href="#自定义取代系统默认" class="headerlink" title="自定义取代系统默认"></a>自定义取代系统默认</h1><p>界面完成后，就需要做功能了，但是等等，好像看起来不大对劲，为什么效果相比于知了差很多呢？下面的截图展现了青芒的第二版，相比于第一版，已经是把window的标题去掉了，但还是给人一种寨寨的、不够简洁的感觉。TableView中选中的颜色跟整体界面很不符。</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fn7vd1m4vtj30hs0dddgw.jpg" alt="第二版的青芒原型" title="第二版的青芒原型"></p><blockquote><p>第二版的青芒原型</p></blockquote><p>为什么会出现这样的情况呢？因为一直到现在，我们都是采用的系统默认选项，没有设计人员的审美在里面。如何给用户带来私人订制的感觉呢？这就需要我们覆盖系统的默认行为和属性，具体来说，就是自定义子类，继承并覆盖父类中不符合开发者预期的部分。</p><p>从最后的结果来看，我们需要整个软件看起来背景是白色的，因此我们在每一个view加载的函数中，指定背景色为白色，使用<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">view.wantsLayer =<span class="literal">true</span></div><div class="line"><span class="keyword">self</span>.view.layer?.backgroundColor=<span class="type">NSColor</span>.white.cgColor</div></pre></td></tr></table></figure></p><p>虽然所有视图背景色全部设为了白色，但是关闭、最大化、最小化按钮依然title上，而不是overview那部分，设置title为影藏，它们又不见了，让他们正确显示在overview中的做法是在window加载函数中加入：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.window?.titleVisibility = .hidden</div><div class="line"><span class="keyword">self</span>.window?.titlebarAppearsTransparent =<span class="literal">true</span></div><div class="line"><span class="keyword">self</span>.window?.styleMask.insert(.fullSizeContentView)</div></pre></td></tr></table></figure></p><p>关于TableView中选中状态的背景色，可行的方法有两种。第一种是自定义Cell覆盖NSTableCellView，覆盖父类中的override var backgroundStyle:NSBackgroundStyle{}属性。第二种方法是github上的用户@jydemofork我的项目之后给我提的issue，自定义NSTableRowView，覆盖父类方法：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">drawSelection</span><span class="params">(<span class="keyword">in</span> dirtyRect:NSRect)</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.drawSelection(<span class="keyword">in</span>: dirtyRect)</div><div class="line">    <span class="keyword">var</span> slectorRect =<span class="type">NSInsetRect</span>(<span class="keyword">self</span>.bounds,<span class="number">0</span>,<span class="number">0</span>)</div><div class="line">    <span class="type">NSColor</span>(calibratedWhite:<span class="number">0.92</span>, alpha:<span class="number">1.0</span>).setStroke()</div><div class="line">    <span class="type">NSColor</span>(calibratedWhite:<span class="number">0.92</span>, alpha:<span class="number">1.0</span>).setFill()</div><div class="line">    <span class="keyword">var</span> slectorPath =<span class="type">NSBezierPath</span>(roundedRect: slectorRect, xRadius:<span class="number">0</span>, yRadius:<span class="number">0</span>)</div><div class="line">    slectorPath.fill()</div><div class="line">    slectorPath.stroke()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后实现tableview的代理方法，</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(_tableView:NSTableView, rowViewForRow row:Int)</span></span> -&gt;<span class="type">NSTableRowView</span>? &#123;</div><div class="line">    <span class="keyword">let</span> rowview = <span class="type">MyTableRowView</span>(frame: .zero)</div><div class="line">    <span class="keyword">return</span> rowview</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>两个主视图之间的分隔条比较粗，总让人觉得不美，解决方法还是自定义。覆盖NSSplitView，覆盖属性<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> vardividerThickness:<span class="type">CGFloat</span>&#123;</div><div class="line">    <span class="keyword">get</span> &#123;return0.<span class="number">5</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>如果用户愿意分隔条还是可以左右动的，想禁掉左右动的功能，实现NSSplitView的一个代理方法：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">splitView</span><span class="params">(_ofDividerAtsplitView:NSSplitView, effectiveRect proposedEffectiveRect:NSRect, forDrawnRect drawnRect:NSRect, ofDividerAt dividerIndex:Int)</span></span> -&gt;<span class="type">NSRect</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">NSRect</span>.zero</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>经过这一章节，不难发现还是代码靠谱(😎)。经过上面的调整，界面看起来简洁、清爽了不少，可以以假乱真了。</p><p>希望这一章节让大家明白，想要做出看起来美的东西，一定要去大胆地替代系统的默认选项。而具体的做法通常是覆盖父类中的属性和方法，记得要将组件和自定义的类关联起来。</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fn7ve21lc8j31kw0yfnh6.jpg" alt="美化后的界面" title="美化后的界面"></p><blockquote><p>美化后的界面</p></blockquote><h1 id="一个坑"><a href="#一个坑" class="headerlink" title="一个坑"></a>一个坑</h1><p>自定义TableView的Cell过程中，由于文章的标题通常是比较长的，因此用NSTextField无法放下，必须使用NSTextView，而NSTextView默认是可以上下左右滑动的，所以在文章列表中上下滑动的时候，每当滑动到TextView里，滑动事件就会白TextView捕获，TableView中的Scroll view没有机会捕获了。</p><p>解决的方法和上一节一样，通过覆盖cell里(请注意是Cell，不是tableview)的scroll view，重写hitTest方法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">hitTest</span><span class="params">(_point:NSPoint)</span></span> -&gt;<span class="type">NSView</span>? &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>告诉cell，这个滑动事件我不处理了，请交给别人处理吧。</p><h1 id="NSTouchBar"><a href="#NSTouchBar" class="headerlink" title="NSTouchBar"></a>NSTouchBar</h1><p>为了赶时髦，应用内做了TouchBar和通知中心的内容。TouchBar需要注意的是NSWindow和NSViewController之间的联动。从NSWindow到NSViewController:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> myViewcontroller =<span class="keyword">self</span>.window?.contentViewControlleras!mainViewController</div></pre></td></tr></table></figure></p><p>相反的过程:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> mywindowController=<span class="type">NSApplication</span>.shared().windows[<span class="number">0</span>].windowControlleras?windowController</div></pre></td></tr></table></figure></p><p>这样就可以做到在TouchBar中按了某个按钮，在主界面里也可以看到按钮被选中的效果，满足了一致性。</p><h1 id="Notification-Center视图"><a href="#Notification-Center视图" class="headerlink" title="Notification Center视图"></a>Notification Center视图</h1><p>通知中心做的蛮丑的，真的是为了尝试一下TodayExtension的功能而已。模仿知了，目前功能只是展示了首页的文章列表，点击文章可以用系统默认浏览器打开原文。其实这也就够了，毕竟通知中心就是为了看个大概用的，谁也不会经常点开看。通知中心需要注意的是要自定义视图的高度，通过<br>self.preferredContentSize=CGSize(width:self.view.frame.size.width, height:xxx)<br>完成。<br>最后要注意的是用URLSession请求数据，可以防止UI卡顿，UI卡顿给用户带来的感觉非常糟糕。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">getData</span><span class="params">(with urlString:String,success:@escaping<span class="params">(Data?)</span></span></span>-&gt;<span class="type">Void</span>, failure: ((<span class="type">Error</span>)-&gt;<span class="type">Void</span>)? =<span class="literal">nil</span>) &#123;</div><div class="line"></div><div class="line">         <span class="keyword">guard</span> <span class="keyword">let</span> url =<span class="type">URL</span>(string: urlString)<span class="keyword">else</span>&#123;</div><div class="line"></div><div class="line">         <span class="keyword">return</span></div><div class="line"></div><div class="line">&#125;</div><div class="line">    <span class="keyword">let</span> task =<span class="type">URLSession</span>.shared.dataTask(with: url) &#123; (data:<span class="type">Data</span>?, response:<span class="type">URLResponse</span>?, error:<span class="type">Error</span>?)<span class="keyword">in</span></div><div class="line">    <span class="type">DispatchQueue</span>.main.async&#123;</div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> error = error &#123;</div><div class="line">                     failure?(error)</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">                      success(data)</div><div class="line">                 &#125;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">     task.resume()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h1 id="文章具体内容视图"><a href="#文章具体内容视图" class="headerlink" title="文章具体内容视图"></a>文章具体内容视图</h1><p>青芒团队提供的API里有web-content这一项，只要通过webview包装然后load一下就会将文字和图片展示出来，但是还是有一些细节需要考虑到的。比如有些图片是很大的，虽然限制了窗口不得小于一个值，但有些图片还是远超了这个大小。web-content是没有标题的，看起来会比较突兀，标题和标题需要你手动加上。图片过大时，窗口是可以左右滑动的，怎么把他限制不能滑动。字体如何跟其他部分视图的字体做到没有违和感，都是需要考虑的问题，这些用前端里的CSS样式可以控制，需要开发者有一定的前端开经验。由于本公众号重心在果教，因此这里就不具体展开叙述了，感兴趣的朋友可以参考<a href="https://github.com/zhihaozhang/qingmang-for-mac" target="_blank" rel="external">我的github</a>。</p><h1 id="青芒的宣传"><a href="#青芒的宣传" class="headerlink" title="青芒的宣传"></a>青芒的宣传</h1><p>做完青芒之后，考虑到整个项目是用最新的swift4写成，于是我在微博上@了swiftLanguage，博主是一个不大不小的V，关注者多是对swift感兴趣的或从业人员。短短两天，该微博获得了1万多次阅读，最后我欣喜的发现，王俊煜也给该微博点了赞，感谢俊昱的鼓励与肯定。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fn7vet0hoaj30hs0vm75z.jpg" alt="微博截图" title="微博截图"></p><blockquote><p>微博截图</p></blockquote><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>青芒的开发只用了两天，其实可以做的东西还有很多。试用软件之后如果您对软件有任何的意见与建议，欢迎留言。</p><p>如果您喜欢这款软件，也欢迎您将它推荐给您的朋友们。让我们一起将青芒变得更好！</p><p>我会在订阅号里不定期分享我个人的macOS/ios开发心得和开发笔记，也会在里面发表对于苹果产品/框架/趋势的拙见，希望爱好科技产品或者苹果生态圈的开发者关注。相信本公众号一定能给您带来收获和启发。<br>【欢迎扫码关注微信公众号】</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fn7vflyyajj30by0by0t2.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关于轻芒和青芒&quot;&gt;&lt;a href=&quot;#关于轻芒和青芒&quot; class=&quot;headerlink&quot; title=&quot;关于轻芒和青芒&quot;&gt;&lt;/a&gt;关于轻芒和青芒&lt;/h1&gt;&lt;p&gt;轻芒阅读是我每天都会打开的app，在它提供的两百多个channel中，我订阅了其中十几个channe
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="macOS开发" scheme="http://zhihaozhang.github.io/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>让iMac与MacBook高效协同工作——mouseSync开发心得</title>
    <link href="http://zhihaozhang.github.io/2017/09/23/%E8%AE%A9iMac%E4%B8%8EMacBook%E9%AB%98%E6%95%88%E5%8D%8F%E5%90%8C%E5%B7%A5%E4%BD%9C%E2%80%94%E2%80%94mouseSync%E5%BC%80%E5%8F%91%E5%BF%83%E5%BE%97/"/>
    <id>http://zhihaozhang.github.io/2017/09/23/让iMac与MacBook高效协同工作——mouseSync开发心得/</id>
    <published>2017-09-23T11:49:34.000Z</published>
    <updated>2018-01-07T03:24:34.671Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开发mouseSync的初衷"><a href="#开发mouseSync的初衷" class="headerlink" title="开发mouseSync的初衷"></a>开发mouseSync的初衷</h1><p>或许是不想让买显示器送主机的笑话成真，Apple将iMac 2015之后的版本关闭了纯显示器模式。Apple store里LG的显示器挺贵的，27寸5K版本售价超过了1万元，衬托出了iMac 27寸13000+的定价之良心。考虑到两者颜值的差别，在看脸的时代，iMac的销量还是很不错的。iMac的用户很可能也是MacBook的用户，因此让iMac和MacBook协同工作是很有意义的一件事。当然，也同样适用于两台MacBook之间的协同工作。</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fn7vk8bg59j30hs09x0t5.jpg" alt="" title="老版本iMac的Target Display 模式"></p><p> 为了让两台Mac协同工作，我发现最痛苦的事情莫过于需要两套触摸板(鼠标)和键盘。在谷歌里搜了半天，发现了很多通过蓝牙将一台mac的键盘作为另一台mac键盘的软件，但是将一台mac的鼠标作为另一台mac的鼠标的软件却很少。比较知名的软件是Synergy，但是它的普通版售价19刀、pro版售价29刀，作为一个工程师的我不愿意掏这钱，于是mouseSync出现了。和以前一样，它是开源的，托管在github上，地址是：<a href="https://github.com/zhihaozhang/mouseSync" target="_blank" rel="external">https://github.com/zhihaozhang/mouseSync</a></p><h1 id="mouseSync开发步骤"><a href="#mouseSync开发步骤" class="headerlink" title="mouseSync开发步骤"></a>mouseSync开发步骤</h1><p>开发任何东西，我首先问自己的事情便是:大象放进冰箱一共分几步？要想让一台mac的鼠标事件同步给另一台mac，首先需要将两台电脑连接起来，建立一条稳定的专用通道。然后每当宿主机发生相应时间的时候，发通知给另一台Mac，让它的鼠标也跟着移动。</p><h2 id="为什么选用蓝牙"><a href="#为什么选用蓝牙" class="headerlink" title="为什么选用蓝牙"></a>为什么选用蓝牙</h2><p>考虑到协同工作肯定两台电脑靠的很近，在蓝牙的接收范围内。再考虑到蓝牙4.0标准的耗电量很低，而且即使在没有wifi的情况下依然可以工作，因此我选用了蓝牙技术来建立专用通道。蓝牙框架中值得注意的概念大约有5个。我想举一个我生活中的例子来介绍下面的概念:我每天会用一个体重计量一下体重，然后体重计会通过蓝牙传到我的手机App里，这样我就可以知道我每天的体重以及近期体重的趋势。</p><ol><li>Central(数据中心) 用来展示信息的设备，对应上面例子中的手机。</li><li>Peripheral(外围设置) 原始数据采集，对应上面例子中的体重计。</li><li>Service(服务) 指外围设置提供的各种能力，对应上面例子中体重计称重的能力。</li><li>Characteristic(特征值) 服务中的数据成为特征值，对应上面例子中的体重数据、体质数据等其他数据。</li><li>UUID 服务或特征值的唯一标志。每个服务或特征值均有一个唯一标识。比如我的体重计不仅能称重，还能测体脂、水分等特征值，手机App端能区分体重数据和水分数据，就靠UUID。当然，UUID的值需要数据中心和外围设置通讯前就约定好。</li></ol><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fn7vktu3fnj30hs0ewgm0.jpg" alt="" title="蓝牙通讯的流程"></p><p>蓝牙通讯的流程图清楚的解释了蓝牙通讯的整个过程，这个过程类似TCP/IP的三次握手，不过没有那么严格。简单的来说，这个过程就是外设将自己的特征值通过服务的形式打包发布，通过建立起来的蓝牙通道广播给数据中心。首先，数据中心扫描蓝牙信号，发现外设后，与外设建立起链接，请求服务携带的数据，一次最基本的读取数据交换就算是完成了。当然，数据中心也可以发指令给外设。对于经常变化的特征值，数据中心可以订阅它，每当它发生变化时，可以实时通知数据中心，以便数据中心做出相应变化。具体到Cocoa框架，蓝牙的相关类见下图。</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fn7vlh9v8fj30hs0gd0t4.jpg" alt="" title=" 蓝牙的相关类"></p><h3 id="Peripheral相关类"><a href="#Peripheral相关类" class="headerlink" title="Peripheral相关类"></a>Peripheral相关类</h3><p>CBPeripheralManager是管理外设的，提供了发布服务，广播方法，CBPeripheralManagerDelegate是它的代理方法，考虑到了外设和数据中心之间数据交换是异步的，它定义了一组协议方法，根据不同的状态出发回调代理方法完成双方数据交换。</p><p>CBPeripheral类是建立蓝牙连接后，给CBCentral调用peripheral外设提供的对象。CBPeripheralDelegate是它的代理协议，提供辅助CBPeripheral完成服务发现、数据获取、订阅数据后的回调方法。</p><h3 id="Central相关类"><a href="#Central相关类" class="headerlink" title="Central相关类"></a>Central相关类</h3><p>CBCentral是数据中心类，完成蓝牙设备发现，建立连接，请求服务数据功能。CBCentralDelegate是它的代理协议，辅助它central提供Peripheral发现，建立连接后的回调。</p><h3 id="service相关类"><a href="#service相关类" class="headerlink" title="service相关类"></a>service相关类</h3><p>CBMutableService是可变类型的服务对象类，UUID和特征值可以修改。与它对应的是CBService，属性不可修改的服务对象类。</p><h3 id="characteristic相关类"><a href="#characteristic相关类" class="headerlink" title="characteristic相关类"></a>characteristic相关类</h3><p>CBMutableCharacteristic是可变类型的特征值对象类，UUID、properties属性可以修改。与它对应的是CBCharacteristic类，上述属性不能修改。</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fn7vlyrlknj30hs0ck0sv.jpg" alt="" title="外设、服务、特征间的关系"></p><p>回到mouseSync,两台Mac中，负责采集触摸板事件的那台Mac是外围设置，另一台Mac是数据中心。建立起蓝牙物理通道之后，接下来要做的事是监听外围设置的触摸板事件，然后通知数据中心的触摸板跟着该事件进行响应。</p><h1 id="在外围设备端监听鼠标事件"><a href="#在外围设备端监听鼠标事件" class="headerlink" title="在外围设备端监听鼠标事件"></a>在外围设备端监听鼠标事件</h1><p>鼠标事件的监听分为全局监听和应用内监听，显然全局监听更符合我们的要求。对键盘鼠标事件的监听，主要调用的是NSEvnet里的addGlobalMonitorForEvents方法。鼠标事件有很多种，这里我选取了比较重要的几种，分别是移动(.mouseMoved)、单击(.leftMouseDown/up)、双击(特殊处理)、右击(.rightMouseDonw/up)、触摸板的上下左右滑动(.scrollWheel)和鼠标的上下滑动。</p><h2 id="移动事件"><a href="#移动事件" class="headerlink" title="移动事件"></a>移动事件</h2><p>移动比较好处理，这里我关心的是当前位置相比于上一个位置x和y方向的坐标变动情况，因此需要一个变量记录上一个位置，然后将x和y方向的变动通过蓝牙发送给数据中心，让数据中心的鼠标也进行相应的变动。值得注意的是，Mac的坐标(0,0)点在左下方，因此移动鼠标的时候需要进行相应的转换。</p><h2 id="单击事件"><a href="#单击事件" class="headerlink" title="单击事件"></a>单击事件</h2><p>单击事件分成两个步骤，第一个步骤是左键按下，第二个步骤是左键弹起来。只有两个事件都发生，我们才认为整个单击的过程完成了。单击事件并不需要传外围设置的坐标给数据中心，直接人数据中心在当前的鼠标位置执行单击事件即可。</p><h2 id="双击事件"><a href="#双击事件" class="headerlink" title="双击事件"></a>双击事件</h2><p>双击事件和单击事件很像，监听事件传入的event对象有一个clickCount属性，如果该属性的值大于等于2，那么就认为它是双击事件。后面的步骤跟单击事件一样。</p><h2 id="右击事件"><a href="#右击事件" class="headerlink" title="右击事件"></a>右击事件</h2><p>右击事件跟单击事件就更像了，只是将名称由left改成了right。</p><h2 id="滑动事件"><a href="#滑动事件" class="headerlink" title="滑动事件"></a>滑动事件</h2><p>滑动事件在x和y方向的变化值分别对应的是event对象里的deltaX和deltaY，将这两个值传给数据中心，并有数据中心跟着这两个值进行相应的滑动即可。通常情况下，用户只会在一个方向上进行滑动(鼠标只能上下滑动)，因此我将鼠标左右和上下的滑动分成了两个部分进行处理，传递的时候判断外围设置在哪个方向上更显著，让数据中心进行相应的滑动。</p><h1 id="在数据中心端模拟鼠标事件"><a href="#在数据中心端模拟鼠标事件" class="headerlink" title="在数据中心端模拟鼠标事件"></a>在数据中心端模拟鼠标事件</h1><h2 id="单击、右击事件的模拟"><a href="#单击、右击事件的模拟" class="headerlink" title="单击、右击事件的模拟"></a>单击、右击事件的模拟</h2><p>前面提到过了，单击和右击事件非常像，因此举同一个例子就可以说明问题。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">mouseMoveAndClick</span><span class="params">(onPoint point: CGPoint)</span></span> &#123;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> moveEvent = <span class="type">CGEvent</span>(mouseEventSource: <span class="literal">nil</span>, mouseType: .mouseMoved, mouseCursorPosition: point, mouseButton: .<span class="keyword">left</span>) <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> downEvent = <span class="type">CGEvent</span>(mouseEventSource: <span class="literal">nil</span>, mouseType: .leftMouseDown, mouseCursorPosition: point, mouseButton: .<span class="keyword">left</span>) <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> upEvent = <span class="type">CGEvent</span>(mouseEventSource: <span class="literal">nil</span>, mouseType: .leftMouseUp, mouseCursorPosition: point, mouseButton: .<span class="keyword">left</span>) <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        moveEvent.post(tap: <span class="type">CGEventTapLocation</span>.cghidEventTap)</div><div class="line">        downEvent.post(tap: <span class="type">CGEventTapLocation</span>.cghidEventTap)</div><div class="line">        upEvent.post(tap: <span class="type">CGEventTapLocation</span>.cghidEventTap)</div><div class="line">    &#125;~~</div></pre></td></tr></table></figure><p>思路是通过CGEvent创建一个事件，然后调用该事件的post方法告诉系统，执行该事件。</p><h2 id="鼠标移动事件的模拟"><a href="#鼠标移动事件的模拟" class="headerlink" title="鼠标移动事件的模拟"></a>鼠标移动事件的模拟</h2><p>移动事件的模拟跟上面思路一样，要注意的是OS X屏幕的坐标系统，x和y方向的变化是加还是减。</p><h2 id="双击事件的模拟"><a href="#双击事件的模拟" class="headerlink" title="双击事件的模拟"></a>双击事件的模拟</h2><p>开始以为双击事件的模拟无非就是模拟两次单击事件，让他们之间的时间间隔非常小。但经过尝试，该方式行不通。在网上搜了一些solution，最后居然是在我最喜欢的炉石传说的一个插件里发现的答案。 代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">`  <span class="function"><span class="keyword">func</span> <span class="title">doubleClick</span><span class="params">(at location: NSPoint)</span></span> &#123;</div><div class="line"> <span class="keyword">let</span> source = <span class="type">CGEventSource</span>(stateID: .privateState)</div><div class="line"> </div><div class="line"> <span class="keyword">var</span> click = <span class="type">CGEvent</span>(mouseEventSource: source, mouseType: .leftMouseDown,</div><div class="line"> mouseCursorPosition: location, mouseButton: .<span class="keyword">left</span>)</div><div class="line"> click?.setIntegerValueField(.mouseEventClickState, value: <span class="number">1</span>)</div><div class="line"> click?.post(tap: .cghidEventTap)</div><div class="line"> </div><div class="line"> <span class="keyword">var</span> release = <span class="type">CGEvent</span>(mouseEventSource: source, mouseType: .leftMouseUp,</div><div class="line">   mouseCursorPosition: location, mouseButton: .<span class="keyword">left</span>)</div><div class="line"> release?.setIntegerValueField(.mouseEventClickState, value: <span class="number">1</span>)</div><div class="line"> release?.post(tap: .cghidEventTap)</div><div class="line"> </div><div class="line"> click = <span class="type">CGEvent</span>(mouseEventSource: source, mouseType: .leftMouseDown,</div><div class="line"> mouseCursorPosition: location, mouseButton: .<span class="keyword">left</span>)</div><div class="line"> click?.setIntegerValueField(.mouseEventClickState, value: <span class="number">2</span>)</div><div class="line"> click?.post(tap: .cghidEventTap)</div><div class="line"> </div><div class="line"> release = <span class="type">CGEvent</span>(mouseEventSource: source, mouseType: .leftMouseUp,</div><div class="line">   mouseCursorPosition: location, mouseButton: .<span class="keyword">left</span>)</div><div class="line"> release?.setIntegerValueField(.mouseEventClickState, value: <span class="number">2</span>)</div><div class="line"> release?.post(tap: .cghidEventTap)</div><div class="line"> &#125;</div></pre></td></tr></table></figure><h2 id="滑动事件的模拟"><a href="#滑动事件的模拟" class="headerlink" title="滑动事件的模拟"></a>滑动事件的模拟</h2><p>滑动事件的模拟，swift目前支持的不是很好，我在Stack Overflow上找到了一个比较tricky的方法。需要swift和C混编，借助C来完成任务。关于swift和C/OC的混编内容比较多，这里不展开讲了，感兴趣的可以研究我的开源代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">` <span class="function"><span class="keyword">void</span> <span class="title">createScrollWheelEventY</span><span class="params">(<span class="keyword">float</span> x)</span> </span>&#123;</div><div class="line"> CGEventRef upEvent = CGEventCreateScrollWheelEvent(</div><div class="line"> <span class="literal">NULL</span>,</div><div class="line"> kCGScrollEventUnitPixel, <span class="number">2</span>, x*<span class="number">5</span>, <span class="number">0</span> );</div><div class="line">CGEventPost(kCGHIDEventTap, upEvent);</div><div class="line"> CFRelease(upEvent);</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">createScrollWheelEventX</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line"> CGEventRef upEvent = CGEventCreateScrollWheelEvent(</div><div class="line"> <span class="literal">NULL</span>,</div><div class="line"> kCGScrollEventUnitPixel, <span class="number">2</span>, <span class="number">0</span>, y*<span class="number">5</span>);</div><div class="line"> CGEventPost(kCGHIDEventTap, upEvent);</div><div class="line"> CFRelease(upEvent);</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p>在这里遇到了一个诡异的问题，上下滑动可以很好的工作，但是左右滑动死活不能和预期的一样，单步跟踪后发现传入函数的确实是float类型的正确值，但是创建upEvent的时候，该变量的值突变了。后面将float类型改成了int类型，又可以正常的工作了。如果知道为什么的同学可以留言告诉我。</p><h1 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h1><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fn7vnmdovpg30hs0a3u17.gif" alt=""><br><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fn7vod1xowg307k0dcb2c.gif" alt=""><br><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fn7vpbd4qyg307k0dcx6s.gif" alt=""></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>开发mouseSync的过程中，让我更深刻的理解了Cocoa的蓝牙框架、键盘鼠标事件。纸上得来终觉浅，绝知此事要躬行。</p><p>另外，mouseSync的开发还没有完成，目前存在的问题是外围设备这边的鼠标容易误操作，因此我准备将外围设备的鼠标控制在一个window内，一旦移除这个window，就强行将光标移动回window中心。通过快捷键控制软件的开启和关闭。还有一个比较重要的功能正在开发中，那就是我非常喜爱的三指拖移功能，敬请期待！</p><p><em>你对mouseSync的功能还有哪些期待或建议呢？不妨留言告诉我吧！</em></p><p>开发和写本文过程中参考了以下资料，在这表示感谢：<br>【1】 macOS应用开发，赵剑 张帆 合著<br>【2】HSTracker的github开源代码 <a href="https://github.com/HearthSim/HSTracker/blob/master/HSTracker/Utility/Automation.swift" target="_blank" rel="external">https://github.com/HearthSim/HSTracker/blob/master/HSTracker/Utility/Automation.swift</a><br>【3】Stack Overflow: <a href="https://stackoverflow.com/questions/42813264/cocoa-application-scroll-programmatically" target="_blank" rel="external">https://stackoverflow.com/questions/42813264/cocoa-application-scroll-programmatically</a><br>【4】 ios蓝牙技术：<a href="http://www.jianshu.com/p/c1154179da8a" target="_blank" rel="external">http://www.jianshu.com/p/c1154179da8a</a></p><p><em>我会在微信公众号【骨灰级果粉】中不定期分享我个人的macOS/ios开发心得和开发笔记，也会在里面发表对于苹果产品/框架/趋势的拙见，希望爱好科技产品或者苹果生态圈的开发者关注。相信本公众号一定能给您带来收获和启发。</em></p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fn7vflyyajj30by0by0t2.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;开发mouseSync的初衷&quot;&gt;&lt;a href=&quot;#开发mouseSync的初衷&quot; class=&quot;headerlink&quot; title=&quot;开发mouseSync的初衷&quot;&gt;&lt;/a&gt;开发mouseSync的初衷&lt;/h1&gt;&lt;p&gt;或许是不想让买显示器送主机的笑话成真，App
      
    
    </summary>
    
      <category term="苹果开发" scheme="http://zhihaozhang.github.io/categories/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="macOS开发" scheme="http://zhihaozhang.github.io/tags/macOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>D3 on Angular(2)</title>
    <link href="http://zhihaozhang.github.io/2014/11/15/D3%20on%20Angular(2)/"/>
    <id>http://zhihaozhang.github.io/2014/11/15/D3 on Angular(2)/</id>
    <published>2014-11-15T05:54:57.000Z</published>
    <updated>2017-12-25T07:30:55.296Z</updated>
    
    <content type="html"><![CDATA[<h1 id="More-Dynamic-visualizations"><a href="#More-Dynamic-visualizations" class="headerlink" title="More Dynamic visualizations"></a>More Dynamic visualizations</h1><p>上一篇博客介绍了如何借助Angular来完成一个指令，达到可复用目的，但是似乎依然不够动态，我们不得不提前输入想要展示的数组。<br>Angular的最大的特点是双向数据绑定，我们能否借助这个特性来完成更动态的可视化图呢？让Angular帮我们盯着数据，一旦数据改变了，就更新DOM元素。这一切都是Angular帮我们完成的，我们唯一需要做的是指定数据和DOM元素之间的关系，不需要写很多的代码。</p><h1 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h1><p>先来用一个简单的例子来展示一下Angular帮我们完成的双向数据绑定，这里用一个简单的例子来展示一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//\&lt;body ng-app\&gt;</div><div class="line">//\&lt;input type=&quot;range&quot; ng-model=&quot;ourRangeValue&quot;\&gt; </div><div class="line">//\&lt;input type=&quot;range&quot; ng-model=&quot;ourRangeValue&quot;\&gt;</div><div class="line">// \&lt;input type=&quot;range&quot; ng-model=&quot;ourRangeValue&quot;\&gt; </div><div class="line">//\&lt;input type=&quot;range&quot; ng-model=&quot;ourRangeValue&quot;\&gt;</div><div class="line">//\&lt;/body\&gt;</div><div class="line"></div></pre></td></tr></table></figure><p>上面的例子展示了四根sliders,当我们任意滑动一个slider，其他的三个也会跟着一起动。<br>这种自动更新发生在叫做scope的变量中，上面的例子中，ng-model指令在scope创建了一个叫ourRangeValue的变量，而且当ourRangeValue改变的时候，会处理\<input\>的更新。如果我们在一个新的DOM元素上创建一个scope，它所有的子DOM元素都可以拿这个scope，最顶层的scope是root scope。最简单的创建scope的方法是创建一个controller（控制器）。</input\></p><h2 id="两种变体"><a href="#两种变体" class="headerlink" title="两种变体"></a>两种变体</h2><p>变体1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//\&lt;body ng-app=&quot;myApp&quot;\&gt;</div><div class="line">//  \&lt;div ng-controller=&quot;HelloController&quot;\&gt;</div><div class="line">//    \&lt;input type=&quot;range&quot; ng-model=&quot;ourRangeValue&quot;\&gt;</div><div class="line">//    \&lt;input type=&quot;range&quot; ng-model=&quot;ourRangeValue&quot;\&gt;</div><div class="line">//  \&lt;/div\&gt;</div><div class="line">//  \&lt;div ng-controller=&quot;HelloController&quot;\&gt;</div><div class="line">//    \&lt;input type=&quot;range&quot; ng-model=&quot;ourRangeValue&quot;\&gt;</div><div class="line">//    \&lt;input type=&quot;range&quot; ng-model=&quot;ourRangeValue&quot;\&gt;</div><div class="line">//  \&lt;/div\&gt;</div><div class="line">//\&lt;/body\&gt;</div><div class="line"></div></pre></td></tr></table></figure><p>变体2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//\&lt;body ng-app=&quot;myApp&quot; ng-init=&quot;foobar = &#123; value: 50 &#125;&quot;\&gt;</div><div class="line">//  \&lt;div ng-controller=&quot;HelloController&quot;\&gt;</div><div class="line">//    \&lt;input type=&quot;range&quot; ng-model=&quot;foobar.value&quot;\&gt;</div><div class="line">//    \&lt;input type=&quot;range&quot; ng-model=&quot;foobar.value&quot;\&gt;</div><div class="line">//  \&lt;/div\&gt;</div><div class="line">//  \&lt;div ng-controller=&quot;HelloController&quot;\&gt;</div><div class="line">//    \&lt;input type=&quot;range&quot; ng-model=&quot;foobar.value&quot;\&gt;</div><div class="line">//    \&lt;input type=&quot;range&quot; ng-model=&quot;foobar.value&quot;\&gt;</div><div class="line">//  \&lt;/div\&gt;</div><div class="line">//    \&lt;/body\&gt;</div><div class="line"></div></pre></td></tr></table></figure><p>这两种变体格各自的结果是什么，这应该是Angular的基础知识，大家可以自己去尝试一下。第一种情况改变第一个HelloController的foobar时候，会创建一个新的scope1.foobar替代rootScope.foobar。而第二种情况，是使用了另一个object包装了一下，这样就可以避免覆盖掉父scope的属性。这样我们并没有指定一个新的值给foobar，所以子scope不需要重新创建新的object。</p><h1 id="Make-visualizations-dynamic-with-watch"><a href="#Make-visualizations-dynamic-with-watch" class="headerlink" title="Make visualizations dynamic with $watch"></a>Make visualizations dynamic with $watch</h1><h2 id="scope-watch"><a href="#scope-watch" class="headerlink" title="$scope.watch"></a>$scope.watch</h2><p>使用Angular内置的指令使得绑定一个值的变化到另一个视图中的变化变得异常简单，不过对于稍微复杂点的可视化元素，我们就需要剪子自己的指令并监听scope内值的变化并且更新他们的内容。Angular里监听的函数是$scope.watch函数。<br>下面展示一个简单的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">\&lt;!-- scope.$watch(&apos;progress&apos;,function(progress)&#123;  </div><div class="line"> rect.attr(&#123;x: 0, y: 0, width: width \* progress / 100, height: height &#125;);  &#125;);  --\&gt;</div><div class="line"></div></pre></td></tr></table></figure><p>每次当slider被拖动，下面的进度条会跟着动，因为此时scope.$watch()函数被触发了。</p><h2 id="一个更复杂的例子"><a href="#一个更复杂的例子" class="headerlink" title="一个更复杂的例子"></a>一个更复杂的例子</h2><p>我们将使用上一篇博客中使用的donut chart的例子。一种错误的做法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//\&lt;body ng-app=&quot;myApp&quot; ng-init=&quot;chart=[10, 20, 30]()&quot;\&gt;</div><div class="line">//  \&lt;input type=&quot;range&quot; ng-model=&quot;chart[0]()&quot;\&gt;</div><div class="line">//  \&lt;br\&gt;</div><div class="line">//  \&lt;input type=&quot;range&quot; ng-model=&quot;chart[1]()&quot;\&gt;</div><div class="line">//  \&lt;br\&gt;</div><div class="line">//  \&lt;input type=&quot;range&quot; ng-model=&quot;chart[2]()&quot;\&gt;</div><div class="line">//  \&lt;br\&gt;</div><div class="line">//  \&lt;donut-chart data=&quot;chart&quot;\&gt;\&lt;/donut-chart\&gt;</div><div class="line"></div></pre></td></tr></table></figure><p>好像没有按照我们预想的去做，因为没有watchdata scope变量的变化，正确的做法是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">\&lt;!--  scope.$watch(&apos;data&apos;,function(data)&#123;</div><div class="line">   console.log(&quot;an element within `data` changed!&quot;);</div><div class="line">   console.log(data);</div><div class="line"> &#125;,true);</div><div class="line"> --\&gt;</div><div class="line"></div></pre></td></tr></table></figure><p>一个很大的不同是我们$watch函数的第三个参数是true，true告诉了watch函数，如果数组里面的值发生了改变也会触发，false不会触发，因为数组还是3个值，它从某种意义上来说并没变。<br>完整的代码为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//\&lt;!DOCTYPE html\&gt;</div><div class="line">//\&lt;html\&gt;</div><div class="line">//\&lt;head\&gt;</div><div class="line">//  \&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.2.10/angular.min.js&quot;\&gt;\&lt;/script\&gt;</div><div class="line">//  \&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot; charset=&quot;utf-8&quot;\&gt;\&lt;/script\&gt;</div><div class="line">//\&lt;/head\&gt;</div><div class="line">//\&lt;body ng-app=&quot;myApp&quot; ng-init=&quot;chart=[10, 20, 30]()&quot;\&gt;</div><div class="line">//  \&lt;input type=&quot;range&quot; ng-model=&quot;chart[0]()&quot;\&gt;</div><div class="line">//  \&lt;br\&gt;</div><div class="line">//  \&lt;input type=&quot;range&quot; ng-model=&quot;chart[1]()&quot;\&gt;</div><div class="line">//  \&lt;br\&gt;</div><div class="line">//  \&lt;input type=&quot;range&quot; ng-model=&quot;chart[2]()&quot;\&gt;</div><div class="line">//  \&lt;br\&gt;</div><div class="line">//  \&lt;donut-chart data=&quot;chart&quot;\&gt;\&lt;/donut-chart\&gt;</div><div class="line">//  \&lt;script\&gt;</div><div class="line">//    var myApp = angular.module(&apos;myApp&apos;, []());</div><div class="line">//    myApp.directive(&apos;donutChart&apos;, function()&#123;</div><div class="line">//      function link(scope, el, attr)&#123;</div><div class="line">//        var color = d3.scale.category10();</div><div class="line">//        var data = scope.data;</div><div class="line">//        var width = 300;</div><div class="line">//        var height = 300;</div><div class="line">//        var min = Math.min(width, height);</div><div class="line">//        var svg = d3.select(el[0]()).append(&apos;svg&apos;);</div><div class="line">//        var pie = d3.layout.pie().sort(null);</div><div class="line">//        var arc = d3.svg.arc()</div><div class="line">//          .outerRadius(min / 2 \* 0.9)</div><div class="line">//          .innerRadius(min / 2 \* 0.5);</div><div class="line">//  </div><div class="line">//        svg.attr(&#123;width: width, height: height&#125;);</div><div class="line">//        var g = svg.append(&apos;g&apos;)</div><div class="line">//          // center the donut chart</div><div class="line">//          .attr(&apos;transform&apos;, &apos;translate(&apos; + width / 2 + &apos;,&apos; + height / 2 + &apos;)&apos;);</div><div class="line">//  </div><div class="line">//        // add the \&lt;path\&gt;s for each arc slice</div><div class="line">//        var arcs = g.selectAll(&apos;path&apos;).data(pie(data))</div><div class="line">//          .enter().append(&apos;path&apos;)</div><div class="line">//            .style(&apos;stroke&apos;, &apos;white&apos;)</div><div class="line">//            .attr(&apos;fill&apos;, function(d, i)&#123; return color(i) &#125;);</div><div class="line">//</div><div class="line">//        scope.$watch(&apos;data&apos;, function()&#123;</div><div class="line">//          arcs.data(pie(data)).attr(&apos;d&apos;, arc);</div><div class="line">//        &#125;, true);</div><div class="line">//      &#125;</div><div class="line">//      return &#123;</div><div class="line">//        link: link,</div><div class="line">//        restrict: &apos;E&apos;,</div><div class="line">//        scope: &#123; data: &apos;=&apos; &#125;</div><div class="line">//      &#125;;</div><div class="line">//    &#125;);</div><div class="line">//  \&lt;/script\&gt;</div><div class="line">//\&lt;/body\&gt;</div><div class="line">//\&lt;/html\&gt;</div><div class="line"></div></pre></td></tr></table></figure><p>我们的Donut chart看起来不错，会随着slider的变化而发生变化了，但是一直只有三个slider，这稍微有点不爽。下面我们就增加两个按钮，一个是增加一个变量，一个是减少一个变量。其实呢，就是给chart数组里push一个数或者pop出一个数。而为了让slider的数目也随着数组的变化而变化，这就需要借助ng-repeat指令。<br>\<inputtype="range" ng-model="slice" ng-repeat="slice in chart" \=""><br>至此我们完成了所有的任务,完整代码如下。</inputtype="range"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//\&lt;!DOCTYPE html\&gt;</div><div class="line">//\&lt;html\&gt;</div><div class="line">//\&lt;head\&gt;</div><div class="line">//  \&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.2.10/angular.js&quot;\&gt;\&lt;/script\&gt;</div><div class="line">//  \&lt;script src=&quot;http://d3js.org/d3.v3.js&quot; charset=&quot;utf-8&quot;\&gt;\&lt;/script\&gt;</div><div class="line">//\&lt;/head\&gt;</div><div class="line">//\&lt;body ng-app=&quot;myApp&quot; ng-init=&quot;chart=[&#123;value: 10&#125;, &#123;value: 20&#125;, &#123;value: 30&#125;]()&quot;\&gt;</div><div class="line">//  \&lt;donut-chart data=&quot;chart&quot; style=&quot;float:right&quot;\&gt;\&lt;/donut-chart\&gt;</div><div class="line">//  \&lt;button ng-click=&quot;chart.push(&#123;value: 10&#125;)&quot;\&gt;add slice\&lt;/button\&gt;</div><div class="line">//  \&lt;button ng-click=&quot;chart.pop()&quot;\&gt;remove slice\&lt;/button\&gt;</div><div class="line">//  \&lt;input type=&quot;range&quot; ng-model=&quot;slice.value&quot; ng-repeat=&quot;slice in chart track by $index&quot;\&gt;</div><div class="line">//  \&lt;script\&gt;</div><div class="line">//    var myApp = angular.module(&apos;myApp&apos;, []());</div><div class="line">//    myApp.directive(&apos;donutChart&apos;, function()&#123;</div><div class="line">//      function link(scope, el, attr)&#123;</div><div class="line">//        var color = d3.scale.category10();</div><div class="line">//        var width = 200;</div><div class="line">//        var height = 200;</div><div class="line">//        var min = Math.min(width, height);</div><div class="line">//        var svg = d3.select(el[0]()).append(&apos;svg&apos;);</div><div class="line">//        var pie = d3.layout.pie().sort(null);</div><div class="line">//        var arc = d3.svg.arc()</div><div class="line">//          .outerRadius(min / 2 \* 0.9)</div><div class="line">//          .innerRadius(min / 2 \* 0.5);</div><div class="line">//</div><div class="line">//        pie.value(function(d)&#123; return d.value; &#125;);</div><div class="line">//  </div><div class="line">//        svg.attr(&#123;width: width, height: height&#125;);</div><div class="line">//        var g = svg.append(&apos;g&apos;)</div><div class="line">//          // center the donut chart</div><div class="line">//          .attr(&apos;transform&apos;, &apos;translate(&apos; + width / 2 + &apos;,&apos; + height / 2 + &apos;)&apos;);</div><div class="line">//  </div><div class="line">//        // add the \&lt;path\&gt;s for each arc slice</div><div class="line">//        var arcs = g.selectAll(&apos;path&apos;);</div><div class="line">//</div><div class="line">//        scope.$watch(&apos;data&apos;, function(data)&#123;</div><div class="line">//          arcs = arcs.data(pie(data));</div><div class="line">//          arcs.enter().append(&apos;path&apos;)</div><div class="line">//            .style(&apos;stroke&apos;, &apos;white&apos;)</div><div class="line">//            .attr(&apos;fill&apos;, function(d, i)&#123; return color(i) &#125;);</div><div class="line">//          arcs.exit().remove();</div><div class="line">//          arcs.attr(&apos;d&apos;, arc);</div><div class="line">//        &#125;, true);</div><div class="line">//      &#125;</div><div class="line">//      return &#123;</div><div class="line">//        link: link,</div><div class="line">//        restrict: &apos;E&apos;,</div><div class="line">//        scope: &#123; data: &apos;=&apos; &#125;</div><div class="line">//      &#125;;</div><div class="line">//    &#125;);</div><div class="line">//  \&lt;/script\&gt;</div><div class="line">//\&lt;/body\&gt;</div><div class="line">//\&lt;/html\&gt;</div><div class="line"></div></pre></td></tr></table></figure><p>基础知识就介绍到这里，下面会介绍一个稍微难一些的例子。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;More-Dynamic-visualizations&quot;&gt;&lt;a href=&quot;#More-Dynamic-visualizations&quot; class=&quot;headerlink&quot; title=&quot;More Dynamic visualizations&quot;&gt;&lt;/a&gt;More 
      
    
    </summary>
    
      <category term="visualization" scheme="http://zhihaozhang.github.io/categories/visualization/"/>
    
    
      <category term="d3" scheme="http://zhihaozhang.github.io/tags/d3/"/>
    
  </entry>
  
  <entry>
    <title>drop and drag in d3</title>
    <link href="http://zhihaozhang.github.io/2014/11/15/drop%20and%20drag%20in%20d3js/"/>
    <id>http://zhihaozhang.github.io/2014/11/15/drop and drag in d3js/</id>
    <published>2014-11-15T05:54:57.000Z</published>
    <updated>2018-01-07T03:26:38.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Behavior-in-d3"><a href="#Behavior-in-d3" class="headerlink" title="Behavior in d3"></a>Behavior in d3</h1><p>在d3中，行为被设计成了一种组件，可以创建一系列的事件，并绑定到调用这些行为的元素上。最常见的行为有拖拽与缩放，使用这些行为可以很方便地在拖拽或者缩放的开始、过程中以及结束时达到想要的效果。</p><p>这篇博客中，就以拖拽为例，并借助之前实现的热力图，实现拖拽dimension的label以达到reoder维度的效果。为了使用三个阶段，我们会让开始拖拽的时候，维度名变成红色、字体变大来表示强调的效果；在拖拽过程中，让label紧跟鼠标的位置；并且判断最终的位置，交换两个维度，并重新绘制整个热力图。</p><p>理想情况下，开始移动的时候的，运行情况应该像下面这样。<br><img src="http://i3.piimg.com/20f52681eff4f677.jpg" alt=""></p><h1 id="drag"><a href="#drag" class="headerlink" title="drag"></a>drag</h1><p>创建一个新的拖拽行为非常简单，var drag = d3.behavior.drag()就创建好了。在这个行为上，可以指定拖拽事件类型的监听器，支持的事件类型有三种，<strong>dragstart/drag/dragend</strong>，分别是上面提到的拖动开始时触发的函数，拖动时触发和拖动结束时触发。<br>对应到上面的要求，维度名变成红色、字体变大来表示强调的效果（开始拖拽时），让label紧跟鼠标的位置（拖拽过程中），并且判断最终的位置，交换两个维度，并重新绘制整个热力图（拖拽结束后）。</p><h1 id="实现的细节"><a href="#实现的细节" class="headerlink" title="实现的细节"></a>实现的细节</h1><p>需要注意的有几点，</p><ol><li>由于热力图的实现方式，横着的dimension和竖着的dimension的drag是不同的。但是他们也有可以共用的地方，dragEnd是可以共用的，但是另外两个是不可以的，所以需要建立两个drag的事件。</li><li>重新绘制涉及到了行和列，变换是需要考虑如何实现的。</li><li>如何判断label拖拽之后是到哪里了，是否超出了边界(超过上界认为和第一个换，超过下界认为认为和最后一个换。) 查看辅助函数changeLabelOrder()</li><li>真正意义上的交换，不仅仅是两个label之间的交换，还有相关性的交换。</li><li>Math.ceil()和Math.floor()的区别。</li></ol><p>代码见文末的附录。</p><h1 id="附录（代码）"><a href="#附录（代码）" class="headerlink" title="附录（代码）"></a>附录（代码）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  var colorScales = d3.scale.linear()</div><div class="line">.domain([-1,0,1]())</div><div class="line">.range([&quot;#31a354&quot;,&quot;#ffffff&quot;,&quot;#e6550d&quot;]());</div><div class="line"></div><div class="line">var w = element[0]().offsetWidth;</div><div class="line">var h = element[0]().offsetHeight;</div><div class="line">var width = w - options.margin.left - options.margin.right;</div><div class="line">var height = h - options.margin.top - options.margin.bottom;</div><div class="line"></div><div class="line">d3.select(element[0]()).select(&quot;svg&quot;).remove();</div><div class="line"></div><div class="line">var svg = d3.select(element[0]()).append(&quot;svg&quot;)</div><div class="line">.attr(&quot;width&quot;, width*2 + options.margin.left + options.margin.right)</div><div class="line">.attr(&quot;height&quot;, height + options.margin.top + options.margin.bottom)</div><div class="line">.append(&quot;g&quot;)</div><div class="line">.attr(&apos;class&apos;,&apos;heat&apos;)</div><div class="line">.attr(&quot;transform&quot;, &quot;translate(&quot; + options.margin.left + &quot;,&quot; + options.margin.top + &quot;)&quot;)</div><div class="line">//                        .append(&apos;g&apos;)</div><div class="line">//                        .attr(&apos;class&apos;,&apos;rad&apos;);</div><div class="line"></div><div class="line">var xu = &#123;&#125;;</div><div class="line">var x = []();</div><div class="line">var yu = &#123;&#125;;</div><div class="line">var y = []();</div><div class="line"></div><div class="line">var theLabel = 0;</div><div class="line"></div><div class="line">for (var i in scope.data) &#123;</div><div class="line">if (typeof(xu[scope.data\[i]().x]) == &quot;undefined&quot;) &#123;</div><div class="line">x.push(scope.data[i]().x);</div><div class="line">&#125;</div><div class="line">xu[scope.data\[i]().x] = 0;</div><div class="line">if (typeof(yu[scope.data\[i]().y]) == &quot;undefined&quot;) &#123;</div><div class="line">y.push(scope.data[i]().y);</div><div class="line">&#125;</div><div class="line">yu[scope.data\[i]().y] = 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">for (d in scope.data) &#123;</div><div class="line">scope.data[d]().xIndex = x.indexOf(scope.data[d]().x);</div><div class="line">scope.data[d]().yIndex = y.indexOf(scope.data[d]().y);</div><div class="line">&#125;</div><div class="line"></div><div class="line">var drag = d3.behavior.drag()</div><div class="line">.on(&apos;drag&apos;,dragText)</div><div class="line">.on(&apos;dragstart&apos;,dragStart)</div><div class="line">.on(&apos;dragend&apos;,dragEnd);</div><div class="line"></div><div class="line">var dragX = d3.behavior.drag()</div><div class="line">.on(&apos;drag&apos;,dragTextX)</div><div class="line">.on(&apos;dragstart&apos;,dragStartX)</div><div class="line">.on(&apos;dragend&apos;,dragEnd);</div><div class="line"></div><div class="line">function dragStartX () &#123;</div><div class="line">d3.select(this).attr(&apos;fill&apos;, &apos;red&apos;).attr(&apos;font-weight&apos;, &apos;900&apos;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">function dragTextX (d,i)&#123;</div><div class="line">//                        console.log(i);</div><div class="line"></div><div class="line">var y=   d3.event.x-i*xGridSize;</div><div class="line">var x=  -d3.event.y;</div><div class="line">//                        console.log(&quot;d3.event.y:&quot;+d3.event.y);</div><div class="line">//                        console.log(&quot;d3.event.x:&quot;+d3.event.x);</div><div class="line">//                        console.log(xGridSize+&quot;  == &quot;+yGridSize);</div><div class="line"></div><div class="line">//                        var tmp=(d3.event.x-xGridSize/2)/xGridSize;</div><div class="line">var tmp = Math.ceil(d3.event.x/xGridSize)-1;</div><div class="line">//                        console.log(tmp+&quot;  tmp&quot;)</div><div class="line"></div><div class="line">if(tmp\&lt;=0)</div><div class="line">&#123;</div><div class="line">theLabel=0;</div><div class="line">&#125;else if(tmp\&gt;=Math.sqrt(data.length))</div><div class="line">&#123;</div><div class="line">theLabel=Math.sqrt(data.length)-1;</div><div class="line">&#125;else</div><div class="line">&#123;</div><div class="line">theLabel=tmp;</div><div class="line">&#125;</div><div class="line"></div><div class="line">d3.select(this)</div><div class="line">.attr(&apos;transform&apos;,function(d)&#123;</div><div class="line">return &quot;rotate(-90) translate(&quot;+x+&apos;,&apos;+y+&apos;)&apos;;</div><div class="line">&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">function dragStart ()&#123;</div><div class="line">d3.select(this).attr(&apos;fill&apos;,&apos;red&apos;).attr(&apos;font-weight&apos;,&apos;900&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function dragText (d,i)&#123;</div><div class="line">//                        console.log(i);</div><div class="line"></div><div class="line">var x=   d3.event.x;</div><div class="line">var y=  d3.event.y-yGridSize*i;</div><div class="line">//                        console.log(&quot;d3.event.y:&quot;+d3.event.y);</div><div class="line"></div><div class="line">var tmp = cal((y-yGridSize)/yGridSize);</div><div class="line">//                        console.log(tmp+&quot;  tmp&quot;);</div><div class="line"></div><div class="line">if(tmp+i\&gt;=Math.sqrt(data.length))</div><div class="line">&#123;</div><div class="line">theLabel=Math.sqrt(data.length);</div><div class="line">&#125;else if(tmp+i\&lt;=0)&#123;</div><div class="line">theLabel=0;</div><div class="line">&#125;else&#123;</div><div class="line">theLabel=tmp+i;</div><div class="line">&#125;</div><div class="line"></div><div class="line">d3.select(this)</div><div class="line">.attr(&apos;transform&apos;,function(d)&#123;</div><div class="line">return &quot;translate(&quot;+x+&apos;,&apos;+y+&apos;)&apos;;</div><div class="line">&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">function dragEnd(d,i)&#123;</div><div class="line">d3.select(this)</div><div class="line">.attr(&apos;fill&apos;,&apos;black&apos;);</div><div class="line"></div><div class="line">if(theLabel!=i)</div><div class="line">changeLabelOrder(data,theLabel,i);</div><div class="line"></div><div class="line">scope.$apply(order); //very import</div><div class="line"></div><div class="line">//                        console.log(order);</div><div class="line"></div><div class="line">render();</div><div class="line">renderRadViz();</div><div class="line">&#125;</div><div class="line"></div><div class="line">var xGridSize = Math.floor(width / x.length);</div><div class="line">var yGridSize = Math.floor(height / y.length);</div><div class="line">var legendElementWidth = Math.floor(width * options.legendWidth / (options.buckets));</div><div class="line">var legendElementHeight = height / 20;</div><div class="line"></div><div class="line">var yLabels = svg.selectAll(&quot;.yLabel&quot;)</div><div class="line">.data(y)</div><div class="line">.enter().append(&quot;text&quot;)</div><div class="line">.text(function (d) &#123; return d; &#125;)</div><div class="line">.attr(&quot;x&quot;, 0)</div><div class="line">.attr(&quot;y&quot;, function (d, i) &#123; return i * yGridSize; &#125;)</div><div class="line">.style(&quot;text-anchor&quot;, &quot;end&quot;)</div><div class="line">.attr(&quot;transform&quot;, &quot;translate(-6,&quot; + yGridSize / 1.5 + &quot;)&quot;)</div><div class="line">.attr(&quot;class&quot;, function (d, i) &#123; return (&quot;yLabel axis&quot;); &#125;)</div><div class="line">.call(drag);</div><div class="line"></div><div class="line">var xLabels = svg.selectAll(&quot;.xLabel&quot;)</div><div class="line">.data(x)</div><div class="line">.enter().append(&quot;text&quot;)</div><div class="line">.text(function(d) &#123; return d; &#125;)</div><div class="line">.attr(&quot;y&quot;, function(d, i) &#123; return i * xGridSize; &#125;)</div><div class="line">.attr(&quot;x&quot;, 0)</div><div class="line">.style(&quot;text-anchor&quot;, &quot;start&quot;)</div><div class="line">.attr(&quot;transform&quot;, &quot;rotate(-90) translate(10, &quot; + xGridSize / 2 + &quot;)&quot;)</div><div class="line">.attr(&quot;class&quot;, function(d, i) &#123; return (&quot;xLabel axis&quot;); &#125;)</div><div class="line">.call(dragX);</div><div class="line"></div><div class="line">//                    var colorScales = []();</div><div class="line">//                    if (options.breaks != null &amp;&amp; options.breaks.length \&gt; 0) &#123;</div><div class="line">//                        for (b in options.colors) &#123;</div><div class="line">//                            colorScales.push(d3.scale.quantile()</div><div class="line">//                                .domain([0, options.buckets - 1, d3.max(scope.data, function(d) &#123; return d.value; &#125;)]())</div><div class="line">//                                .range(options.colors[b]()));</div><div class="line">//                        &#125;</div><div class="line">//                    &#125; else &#123;</div><div class="line">//                        colorScales.push(d3.scale.quantile()</div><div class="line">//                            .domain([0, options.buckets - 1, d3.max(scope.data, function(d) &#123; return d.value; &#125;)]())</div><div class="line">//                            .range(options.colors));</div><div class="line">//                    &#125;</div><div class="line"></div><div class="line">var cards = svg.selectAll(&quot;.square&quot;)</div><div class="line">.data(scope.data);</div><div class="line"></div><div class="line">//                    console.log(scope.data[0]())</div><div class="line"></div><div class="line">cards.enter().append(&quot;rect&quot;)</div><div class="line">.filter(function(d) &#123; return d.value != null &#125;)</div><div class="line">.attr(&quot;x&quot;, function(d) &#123; return d.xIndex * xGridSize; &#125;)</div><div class="line">.attr(&quot;y&quot;, function(d) &#123; return d.yIndex * yGridSize; &#125;)</div><div class="line">.attr(&quot;class&quot;, &quot;square&quot;)</div><div class="line">.attr(&quot;width&quot;, xGridSize)</div><div class="line">.attr(&quot;height&quot;, yGridSize)</div><div class="line">.on(&quot;click&quot;, function(d) &#123; scope.dispatch.click(d); &#125;)</div><div class="line">.on(&quot;mouseover&quot;, function(d) &#123; scope.dispatch.mouseover(d); &#125;)</div><div class="line">.on(&quot;mouseout&quot;, function(d) &#123; scope.dispatch.mouseout(d); &#125;)</div><div class="line">.on(&quot;mousemove&quot;, function(d) &#123; scope.dispatch.mousemove(d); &#125;)</div><div class="line">.style(&quot;fill&quot;, &quot;#ffffff&quot;);</div><div class="line"></div><div class="line">cards.transition().duration(options.duration).style(&quot;fill&quot;, function(d) &#123;</div><div class="line">if (options.customColors &amp;&amp; options.customColors.hasOwnProperty(d.value)) &#123;</div><div class="line">return options.customColors[d.value]();</div><div class="line">&#125; else if (options.breaks != null &amp;&amp; options.breaks.length \&gt; 0) &#123;</div><div class="line">for (b in options.breaks) &#123;</div><div class="line">if (d.xIndex \&lt; options.breaks[b]()) &#123;</div><div class="line">return colorScales[b]()(d.value);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">return colorScales[options.breaks.length]()(d.value);</div><div class="line">&#125; else &#123;</div><div class="line">return colorScales(d.value);</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">cards.exit().remove();</div><div class="line"></div><div class="line">if (options.legend) &#123;</div><div class="line"></div><div class="line">var lenendData = []();</div><div class="line">for(var i=0;i\&lt;11;i++)</div><div class="line">&#123;</div><div class="line">lenendData.push(i/5-1);</div><div class="line">&#125;</div><div class="line"></div><div class="line">var legend = svg.selectAll(&quot;.legend&quot;)</div><div class="line">.data(lenendData)</div><div class="line"></div><div class="line">legend.enter().append(&quot;g&quot;).attr(&quot;class&quot;, &quot;legend&quot;);</div><div class="line"></div><div class="line">legend.append(&quot;rect&quot;)</div><div class="line">.attr(&quot;x&quot;, function(d, i) &#123; return legendElementWidth * i; &#125;)</div><div class="line">.attr(&quot;y&quot;, height * 1.05)</div><div class="line">.attr(&quot;width&quot;, legendElementWidth)</div><div class="line">.attr(&quot;height&quot;, legendElementHeight)</div><div class="line">.style(&quot;fill&quot;, function(d, i) &#123; return colorScales(lenendData[i]()); &#125;)</div><div class="line">.style(&quot;visibility&quot;, function(d, i) &#123; return(i \&lt; options.buckets ? &quot;visible&quot; : &quot;hidden&quot;) &#125;);</div><div class="line"></div><div class="line">legend.append(&quot;text&quot;)</div><div class="line">.attr(&quot;class&quot;, &quot;legendLabel&quot;)</div><div class="line">.text(function(d,i) &#123; if(i%2==0) return lenendData[i]().toFixed(1); &#125;)</div><div class="line">.attr(&quot;x&quot;, function(d, i) &#123; return legendElementWidth * i; &#125;)</div><div class="line">.attr(&quot;y&quot;, height * 1.15)</div><div class="line">.style(&quot;text-anchor&quot;, &quot;middle&quot;);</div><div class="line"></div><div class="line">legend.exit().remove();</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line">scope.$watch(&quot;data&quot;, debounce(function() &#123;</div><div class="line">render();</div><div class="line">&#125;,true),400);</div><div class="line"></div><div class="line">scope.$watch(&quot;order&quot;, debounce(function() &#123;</div><div class="line">render();</div><div class="line">renderRadViz();</div><div class="line">&#125;,true),400);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">//                d3.select(window).on(&quot;resize&quot;, debounce(function() &#123;</div><div class="line">//                    render();</div><div class="line">//                &#125;, 500));</div><div class="line"></div><div class="line">function cal(x)</div><div class="line">&#123;</div><div class="line">if(x\&gt;0)</div><div class="line">return Math.ceil(x);</div><div class="line">else if (x==0) &#123;</div><div class="line">return 0;</div><div class="line">&#125;else&#123;</div><div class="line">return Math.ceil(x);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">function changeLabelOrder(data,i,j)</div><div class="line">&#123;</div><div class="line">var tmpLabel = order[i]();</div><div class="line">order[i]()=order[j]();</div><div class="line">order[j]()=tmpLabel;</div><div class="line">//                    console.log(order);</div><div class="line"></div><div class="line">var iLabel = &quot;&quot;;</div><div class="line">var jLabel = &quot;&quot;;</div><div class="line">for(var k=0;k\&lt;data.length;k++)</div><div class="line">&#123;</div><div class="line">if(data[k]().xIndex===i) &#123;</div><div class="line">iLabel = data[k]().x;</div><div class="line"></div><div class="line">&#125;</div><div class="line">//                        console.log(iLabel);</div><div class="line">&#125;</div><div class="line">for(var k=0;k\&lt;data.length;k++)</div><div class="line">&#123;</div><div class="line">if(data[k]().yIndex===j) &#123;</div><div class="line">jLabel = data[k]().y;</div><div class="line"></div><div class="line">&#125;</div><div class="line">//                        console.log(jLabel);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">for(var k=0;k\&lt; data.length;k++)</div><div class="line">&#123;</div><div class="line">if(data[k]().xIndex===i)&#123;</div><div class="line">data[k]().xIndex=j;</div><div class="line">data[k]().x=jLabel;</div><div class="line">&#125;else if(data[k]().xIndex===j)</div><div class="line">&#123;</div><div class="line">data[k]().xIndex=i;</div><div class="line">data[k]().x=iLabel;</div><div class="line">&#125;</div><div class="line"></div><div class="line">if(data[k]().yIndex===i)&#123;</div><div class="line">data[k]().yIndex=j;</div><div class="line">data[k]().y=jLabel;</div><div class="line">&#125;else if(data[k]().yIndex===j)</div><div class="line">&#123;</div><div class="line">data[k]().yIndex=i;</div><div class="line">data[k]().y=iLabel;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">var n = Math.sqrt(data.length);</div><div class="line">for(var k=0;k\&lt;n;k++)</div><div class="line">&#123;</div><div class="line"></div><div class="line">tmp = data[i+k*n]().value;</div><div class="line">data[i+k*n]().value=data[j+k*n]().value;</div><div class="line">data[j+k*n]().value=tmp;</div><div class="line">&#125;</div><div class="line">for(var k=0;k\&lt;n;k++)</div><div class="line">&#123;</div><div class="line"></div><div class="line">tmp = data[i*n+k]().value;</div><div class="line">data[i*n+k]().value=data[j*n+k]().value;</div><div class="line">data[k+j*n]().value=tmp;</div><div class="line">&#125;</div><div class="line"></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Behavior-in-d3&quot;&gt;&lt;a href=&quot;#Behavior-in-d3&quot; class=&quot;headerlink&quot; title=&quot;Behavior in d3&quot;&gt;&lt;/a&gt;Behavior in d3&lt;/h1&gt;&lt;p&gt;在d3中，行为被设计成了一种组件，可以创建一
      
    
    </summary>
    
      <category term="visualization" scheme="http://zhihaozhang.github.io/categories/visualization/"/>
    
    
      <category term="d3" scheme="http://zhihaozhang.github.io/tags/d3/"/>
    
  </entry>
  
  <entry>
    <title>associate brush</title>
    <link href="http://zhihaozhang.github.io/2014/11/15/associate%20brush/"/>
    <id>http://zhihaozhang.github.io/2014/11/15/associate brush/</id>
    <published>2014-11-15T05:54:57.000Z</published>
    <updated>2017-12-25T07:30:55.290Z</updated>
    
    <content type="html"><![CDATA[<p>这篇博客记录了在上一篇博客加入scatterplot matrix的基础上，实现了associate brush的操作，即，从RadViz中brush一块区域，右边16个scatterplot里对应的点都会高亮出来，其他的点将暗淡下去；同样的，从右边16个scatterplot matrix里任一scatterplot cell里brush一些点，另外15个cell以及左边的RadViz里相应的点都会被highlight出来。具体的效果如下图：<br><img src="http://i12.tietuku.cn/c8876c3f133891c5.jpg" alt=""></p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">\&lt;!DOCTYPE html\&gt;</div><div class="line">\&lt;html\&gt;</div><div class="line">\&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=gbk&quot;\&gt;</div><div class="line">\&lt;meta name=&quot;author&quot; content=&quot;oscar999&quot;\&gt;</div><div class="line">\&lt;head\&gt;</div><div class="line">\&lt;script type=&quot;text/javascript&quot; src=&quot;script/d3.v3.js&quot;\&gt; \&lt;/script\&gt;</div><div class="line">\&lt;style\&gt;</div><div class="line">body &#123;</div><div class="line">width: 1440px;</div><div class="line">margin: 15px auto 0;</div><div class="line">background: #fff;</div><div class="line">&#125;</div><div class="line"># RadViz&#123;</div><div class="line">float:left;margin-top:20px;margin-left:10px;width:510px; height:510px;  border-width:1px; border-style:solid; border-color:#bfb7b0;</div><div class="line">&#125;</div><div class="line">\&lt;/style\&gt;</div><div class="line">\&lt;title\&gt;RadViz\&lt;/title\&gt;</div><div class="line">\&lt;/head\&gt;</div><div class="line"></div><div class="line">\&lt;body\&gt;</div><div class="line">\&lt;div id=&quot;RadViz&quot;\&gt; \&lt;/div\&gt;</div><div class="line">\&lt;script src=&quot;kNN.js&quot;\&gt;\&lt;/script\&gt;</div><div class="line">\&lt;script src=&quot;dunnsIndex.js&quot;\&gt;\&lt;/script\&gt;</div><div class="line">\&lt;style\&gt;</div><div class="line">svg &#123;</div><div class="line">font: 10px sans-serif;</div><div class="line">padding: 10px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.axis,</div><div class="line">.frame &#123;</div><div class="line">shape-rendering: crispEdges;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.axis line &#123;</div><div class="line">stroke: #ddd;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.axis path &#123;</div><div class="line">display: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.cell text &#123;</div><div class="line">font-weight: bold;</div><div class="line">text-transform: capitalize;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.frame &#123;</div><div class="line">fill: none;</div><div class="line">stroke: #aaa;</div><div class="line">&#125;</div><div class="line"></div><div class="line">circle &#123;</div><div class="line">fill-opacity: .7;</div><div class="line">&#125;</div><div class="line"></div><div class="line">circle.hidden &#123;</div><div class="line">fill: #ccc !important;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.extent &#123;</div><div class="line">fill: #000;</div><div class="line">fill-opacity: .125;</div><div class="line">stroke: #fff;</div><div class="line">&#125;</div><div class="line">\&lt;/style\&gt;</div><div class="line"></div><div class="line"></div><div class="line">\&lt;script type=&quot;text/javascript&quot;\&gt;</div><div class="line">var DimNum = 4;                  //维度数</div><div class="line">var ordertxt = [1,2,3,4]();        //order顺序</div><div class="line">var orderNum = ordertxt.length;  //order的个数</div><div class="line">var UnitRadius=360/orderNum;     //每个单元的角度</div><div class="line"></div><div class="line">var centerX=240.0;               //圆心</div><div class="line">var centerY=270.0;</div><div class="line">var r = 190;                     //半径</div><div class="line">var outerRadius = r+10;           //内半径</div><div class="line">var innerRadius = r-10;           //外半径</div><div class="line"></div><div class="line">var DimPoint = new Array();</div><div class="line">var Radius = new Array();</div><div class="line"></div><div class="line">var NodePoint =new Array();</div><div class="line"></div><div class="line">//compute DimPoint</div><div class="line">for(var i=0;i\&lt;orderNum;i++)&#123;</div><div class="line">DimPoint[i]()=new Array();</div><div class="line">&#125;</div><div class="line">for(var i=0; i\&lt;orderNum;i++)&#123;</div><div class="line">Radius[i]() = (UnitRadius*i)*Math.PI/180;</div><div class="line">DimPoint[i]()[0]()=r\*Math.cos(Radius[i]());  //DA的x坐标</div><div class="line">DimPoint[i]()[1]()=r\*Math.sin(Radius[i]());  //DA的y坐标</div><div class="line">DimPoint[i]()[2]()=ordertxt[i]();            //DA的值</div><div class="line">&#125;</div><div class="line">//compute Data Point</div><div class="line">d3.csv(&quot;iris-normalization.csv&quot;,function(RecordData)&#123;</div><div class="line">for(var i=0;i\&lt;RecordData.length;i++)&#123;</div><div class="line">NodePoint[i]()=new Array();</div><div class="line">&#125;</div><div class="line">for(var i=0;i\&lt;RecordData.length;i++)&#123;</div><div class="line">var tt=RecordData[i]().dimData;</div><div class="line">var t1=tt.split(&quot;,&quot;);</div><div class="line">for(var j=0;j\&lt;t1.length;j++)&#123;</div><div class="line">t1[j]()=parseFloat(t1[j]());</div><div class="line">&#125;</div><div class="line">var t2=new Array(t1.length);</div><div class="line">for(var k=1;k\&lt;=ordertxt.length;k++)</div><div class="line">&#123;</div><div class="line">t2[k-1]()=t1[ordertxt[k-1]()-1];</div><div class="line">&#125;</div><div class="line">//        console.log(t2)</div><div class="line">//        console.log(t1+&quot; ---&quot;)</div><div class="line">RecordData[i]().dimData = t2;</div><div class="line">&#125;</div><div class="line">var dataStr = &quot;&quot;;</div><div class="line">for(var i=0;i\&lt;RecordData.length;i++)&#123;</div><div class="line">var SumDown = getSumDown(RecordData[i]().dimData,orderNum);</div><div class="line">var SumUpX = getSumUpX(RecordData[i]().dimData,Radius,orderNum);</div><div class="line">var SumUpY = getSumUpY(RecordData[i]().dimData,Radius,orderNum);</div><div class="line">var CoordX = SumUpX/SumDown;</div><div class="line">var CoordY = SumUpY/SumDown;</div><div class="line">NodePoint[i]()[0]() = CoordX+centerX;</div><div class="line">NodePoint[i]()[1]() = CoordY+centerY;</div><div class="line">NodePoint[i]()[2]() = RecordData[i]().classId;</div><div class="line">NodePoint[i]()[3]() = RecordData[i]().id;</div><div class="line">dataStr = dataStr+NodePoint[i]()[3]()+&quot;,&quot;+NodePoint[i]()[0]()+&quot;,&quot;+NodePoint[i]()[1]()+&quot;,&quot;+NodePoint[i]()[2]()+&quot;\n&quot;;</div><div class="line">&#125;</div><div class="line">//                console.log(dataStr);</div><div class="line">//              console.log(dataStr);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">var width = 600, height = 500;</div><div class="line"></div><div class="line">var svg = d3.select(RadViz).append(&quot;svg&quot;).attr(&quot;width&quot;,width).attr(&quot;height&quot;, height) ;</div><div class="line"></div><div class="line">var xScale = d3.scale.linear().domain([10,510]())</div><div class="line">.range([10,510]());</div><div class="line"></div><div class="line">var yScale = d3.scale.linear().domain([10,510]())</div><div class="line">.range([20,510-20]());</div><div class="line"></div><div class="line">var brush = d3.svg.brush()</div><div class="line">.x(xScale)</div><div class="line">.y(yScale)</div><div class="line">.extent([0,0](),[0,0]())</div><div class="line">.on(&apos;brush&apos;,brushed)</div><div class="line">.on(&apos;brushstart&apos;,brushstart)</div><div class="line">.on(&apos;brushend&apos;,brushend);</div><div class="line"></div><div class="line">function brushstart()&#123;</div><div class="line"> d3.select(&apos;body&apos;).selectAll(&apos;.cell&apos;).selectAll(&apos;circle&apos;)</div><div class="line">//                 .style(&apos;fill&apos;,&apos;#ccc&apos;);</div><div class="line">.classed(&apos;hidden&apos;,true);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">function brushend()&#123;</div><div class="line">if (brush.empty()) &#123;</div><div class="line">d3.select(&apos;body&apos;).selectAll(&apos;.cell&apos;).selectAll(&apos;circle&apos;)</div><div class="line">.classed(&apos;hidden&apos;, function () &#123;</div><div class="line"></div><div class="line">return false;</div><div class="line"></div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function brushed()&#123;</div><div class="line"></div><div class="line">var extent = brush.extent();</div><div class="line">var xmin = extent[0]()[0]();</div><div class="line">var xmax = extent[1]()[0]();</div><div class="line">var ymin = extent[0]()[1]();</div><div class="line">var ymax = extent[1]()[1]();</div><div class="line">//        console.log(xmax + &quot; &quot; + xmin);</div><div class="line">//        console.log(ymax + &quot; &quot; + ymin);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"> Nodes.style(&quot;fill&quot;,function(d, i) &#123;</div><div class="line"></div><div class="line"></div><div class="line">var color;</div><div class="line">//         console.log(d);</div><div class="line"></div><div class="line">//         d3.select(&apos;body&apos;).selectAll(&apos;.cell&apos;).selectAll(&apos;circle&apos;)</div><div class="line">//                 .style(&apos;fill&apos;,&apos;#ccc&apos;);</div><div class="line"></div><div class="line"> if(d[0]()\&gt;=xmin &amp;&amp; d[0]()\&lt;=xmax &amp;&amp; d[1]()\&gt;=ymin &amp;&amp; d[1]()\&lt;=ymax)&#123;</div><div class="line"></div><div class="line"> d3.select(&apos;body&apos;).selectAll(&apos;.cell&apos;).selectAll(&apos;circle&apos;)</div><div class="line"> .filter(function(dd)&#123;return dd.id==d[3]();&#125;)</div><div class="line"> .classed(&apos;hidden&apos;,false);</div><div class="line"></div><div class="line"></div><div class="line"> return &apos;red&apos;;</div><div class="line"></div><div class="line"> &#125;else&#123;</div><div class="line"></div><div class="line">//             return color(d[2]());</div><div class="line"></div><div class="line">if (d[2]() == &quot;1&quot;)</div><div class="line">color = &quot;#ffc2ce&quot;;</div><div class="line">else if (d[2]() == &quot;2&quot;)</div><div class="line">color = &quot;#0ffa1d&quot;;</div><div class="line">else if (d[2]() == &quot;3&quot;)</div><div class="line">color = &quot;#fee905&quot;;</div><div class="line">return color;</div><div class="line">&#125;</div><div class="line"> &#125;);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">svg.append(&apos;g&apos;).call(brush)</div><div class="line">.selectAll(&apos;rect&apos;)</div><div class="line">.style(&apos;fill-opacity&apos;,0.3);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">var dimdata = []();</div><div class="line">for ( var i = 0; i \&lt; DimNum; i++) &#123;</div><div class="line">dimdata[i]() = 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//draw arc</div><div class="line">var pie = d3.layout.pie().sort(null);</div><div class="line">var arc = d3.svg.arc()</div><div class="line">.startAngle(function(d,i)&#123;</div><div class="line">return (UnitRadius*i+90-0.5*UnitRadius+1)\* Math.PI/180&#125;)</div><div class="line">.endAngle(function(d,i)&#123;return (UnitRadius*i+90+0.5*UnitRadius)\*Math.PI/180&#125;)</div><div class="line">.innerRadius(innerRadius)</div><div class="line">.outerRadius(outerRadius)</div><div class="line">;</div><div class="line">var arcs = svg.selectAll(&quot;g.arc&quot;).data(pie(dimdata)).enter()</div><div class="line">.append(&quot;g&quot;).attr(&quot;class&quot;, &quot;arc&quot;).attr(&quot;transform&quot;,</div><div class="line">&quot;translate(&quot; + centerX + &quot;,&quot; + centerY + &quot;)&quot;)</div><div class="line">;</div><div class="line">arcs.append(&quot;path&quot;)</div><div class="line">//.style(&quot;stroke&quot;,&quot;red&quot;)</div><div class="line">//.style(&quot;stroke-opacity&quot;,0)</div><div class="line">//  .style(&quot;stroke-width&quot;,0)</div><div class="line">.attr(&quot;fill&quot;,function(d, i) &#123;</div><div class="line">var color1=[&quot;#006650&quot;,&quot;#f5ab00&quot;,&quot;#db4527&quot;,&quot;#005687&quot;]();</div><div class="line">return color1[i]();</div><div class="line">&#125;)</div><div class="line">.attr(&quot;d&quot;, arc);</div><div class="line">//show Dimension Point</div><div class="line">svg.selectAll(&quot;circle&quot;)</div><div class="line">.data(DimPoint)</div><div class="line">.enter()</div><div class="line">.append(&quot;circle&quot;)</div><div class="line">.attr(&quot;cx&quot;, function(d) &#123;</div><div class="line">return d[0]()+centerX;</div><div class="line">&#125;)</div><div class="line">.attr(&quot;cy&quot;, function(d) &#123;</div><div class="line">return d[1]()+centerY;</div><div class="line">&#125;).attr(&quot;r&quot;, 4)</div><div class="line">.attr(&quot;opacity&quot;,0.8);</div><div class="line"></div><div class="line">svg.selectAll(&quot;text&quot;)</div><div class="line">.data(DimPoint)</div><div class="line">.enter()</div><div class="line">.append(&quot;text&quot;)</div><div class="line">.text(function(d) &#123;</div><div class="line">return d[2]();</div><div class="line">&#125;)</div><div class="line">.attr(&quot;x&quot;, function(d) &#123;</div><div class="line">return d[0]()+centerX ;</div><div class="line">&#125;).attr(&quot;y&quot;, function(d) &#123;</div><div class="line">return d[1]()+centerY;</div><div class="line">&#125;).attr(&quot;font-family&quot;, &quot;sans-serif&quot;)</div><div class="line">.attr(&quot;font-size&quot;, 15)</div><div class="line">.attr(&quot;stroke-width&quot;,2)</div><div class="line">.attr(&quot;fill&quot;, &quot;black&quot;);</div><div class="line"></div><div class="line"></div><div class="line">//show data point</div><div class="line">var Nodes = svg.selectAll(&quot;RadViz&quot;)</div><div class="line">.data(NodePoint)</div><div class="line">.enter()</div><div class="line">.append(&quot;circle&quot;)</div><div class="line">.attr(&quot;class&quot;, &quot;node&quot;)</div><div class="line">.attr(&quot;id&quot;,function(d,i)&#123;return i;&#125;)</div><div class="line">.attr(&quot;cx&quot;,function(d,i)&#123; return d[0](); &#125;)</div><div class="line">.attr(&quot;cy&quot;,function(d,i)&#123;return d[1]();&#125;)</div><div class="line">.attr(&quot;r&quot;, 4.5)</div><div class="line">.attr(&quot;class&quot;,&quot;nodes&quot;)</div><div class="line">.style(&quot;opacity&quot;,0.8)</div><div class="line">.style(&quot;fill&quot;,function(d, i) &#123;</div><div class="line">var color;</div><div class="line">if (d[2]() == &quot;1&quot;)</div><div class="line">color = &quot;#ffc2ce&quot;;</div><div class="line">else if (d[2]() == &quot;2&quot;)</div><div class="line">color = &quot;#0ffa1d&quot;;</div><div class="line">else if (d[2]() == &quot;3&quot;)</div><div class="line">color = &quot;#fee905&quot;;</div><div class="line">return color;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">Nodes.on(&quot;mouseenter&quot;,function()&#123;d3.select(this).style(&apos;fill&apos;,&apos;red&apos;)</div><div class="line"></div><div class="line">var x = d3.select(this).attr(&apos;cx&apos;);</div><div class="line">var y = d3.select(this).attr(&apos;cy&apos;);</div><div class="line"></div><div class="line">//                    alert(x+&quot; &quot;+y)</div><div class="line">//                    var sequence = new Array();</div><div class="line">sequence = kNN(NodePoint,[x,y](),5);</div><div class="line">var NN=  Nodes.filter(function(d,i)&#123;</div><div class="line">var flag=false;</div><div class="line">for(var i=0;i\&lt;sequence.length;i++)</div><div class="line">&#123;</div><div class="line">if(d[3]()==sequence[i]())&#123;</div><div class="line">flag=true;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">return flag;</div><div class="line">&#125;).style(&apos;fill&apos;,&apos;red&apos;)</div><div class="line"></div><div class="line">&#125;)</div><div class="line">.on(&apos;mouseleave&apos;,function(d,i)&#123;Nodes.style(&quot;fill&quot;,function(d, i) &#123;</div><div class="line">var color;</div><div class="line">if (d[2]() == &quot;1&quot;)</div><div class="line">color = &quot;#ffc2ce&quot;;</div><div class="line">else if (d[2]() == &quot;2&quot;)</div><div class="line">color = &quot;#0ffa1d&quot;;</div><div class="line">else if (d[2]() == &quot;3&quot;)</div><div class="line">color = &quot;#fee905&quot;;</div><div class="line">return color;</div><div class="line">&#125;)&#125;)</div><div class="line"></div><div class="line">.style(&quot;stroke&quot;, &quot;black&quot;)</div><div class="line">.style(&quot;stroke-width&quot;, 0.8)</div><div class="line">.append(&quot;title&quot;)</div><div class="line">.text(function(d) &#123; return &quot;point&quot;+d[3]()+&quot;-class:&quot;+d[2](); &#125;)</div><div class="line"></div><div class="line">Nodes.on(&apos;click&apos;,function(d,i)&#123;</div><div class="line"></div><div class="line">//                   var x = d3.select(this).attr(&apos;cx&apos;)</div><div class="line">//                   var y = d3.select(this).attr(&apos;cy&apos;)</div><div class="line"></div><div class="line">var x = d[0]();</div><div class="line">var y = d[1]();</div><div class="line"></div><div class="line">//                    alert(x+&quot; &quot;+y)</div><div class="line">//                    var sequence = new Array();</div><div class="line">sequence = kNN(NodePoint,[x,y](),5);</div><div class="line">//                    alert(sequence);</div><div class="line">var Str=&quot;&quot;;</div><div class="line">for(var kk=0;kk\&lt;sequence.length;kk++)&#123;</div><div class="line">Str=Str+NodePoint[sequence[kk]()][2]()+&quot;  &quot;;</div><div class="line">&#125;</div><div class="line">alert(Str);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&#125;)</div><div class="line"></div><div class="line">var KNum =15;</div><div class="line">var right = 0;</div><div class="line">for(var i=0;i\&lt;NodePoint.length;i++) &#123;</div><div class="line">var tmp = new Array();</div><div class="line">tmp = [NodePoint[i]()[0](), NodePoint[i]()[1]()];</div><div class="line">//                    console.log(tmp);</div><div class="line"></div><div class="line">sequence = kNN(NodePoint, tmp, KNum);</div><div class="line">var count1 = 0;</div><div class="line">var count2 = 0;</div><div class="line">var count3 = 0;</div><div class="line">for (var kk = 0; kk \&lt; sequence.length; kk++) &#123;</div><div class="line">if (NodePoint[sequence[kk]()][2]() == 1) &#123;</div><div class="line">count1++;</div><div class="line">&#125; else if (NodePoint[sequence[kk]()][2]() == 2) &#123;</div><div class="line">count2++;</div><div class="line">&#125; else if (NodePoint[sequence[kk]()][2]() == 3) &#123;</div><div class="line">count3++;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var max = Math.max(count1, Math.max(count2, count3))</div><div class="line">var predict = 0;</div><div class="line">if (count1 == max) &#123;</div><div class="line">predict = 1;</div><div class="line">&#125; else if (count2 == max) &#123;</div><div class="line">predict = 2;</div><div class="line">&#125; else if (count3 == max) &#123;</div><div class="line">predict = 3;</div><div class="line">&#125;</div><div class="line">if (NodePoint[i]()[2]() == predict) &#123;</div><div class="line">right++;</div><div class="line">&#125; else &#123;</div><div class="line">console.log(&quot;predict is &quot; + predict + &quot; NodePoint is &quot; + NodePoint[i]()[2]())</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">console.log(right);</div><div class="line"></div><div class="line">var dunnsindex = (dunnsIndex(3,NodePoint));</div><div class="line"></div><div class="line">svg.append(&apos;text&apos;)</div><div class="line">.text(&apos;Dunns Index: &apos;+dunnsindex.toFixed(3))</div><div class="line">.attr(&apos;x&apos;,width)</div><div class="line">.attr(&apos;y&apos;,height)</div><div class="line">.attr(&apos;dx&apos;,-250)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&#125;);//.data</div><div class="line"></div><div class="line">function getSumUpX(RecordData,Radius,orderNum)&#123;</div><div class="line">var TempUpX=0;</div><div class="line">for(var i=0;i\&lt;orderNum;i++)&#123;</div><div class="line">TempUpX=TempUpX+r*RecordData[i]()*Math.cos(Radius[i]());</div><div class="line">&#125;</div><div class="line">return TempUpX;</div><div class="line">&#125;</div><div class="line">function getSumUpY(RecordData,Radius,orderNum)&#123;</div><div class="line">var TempUpY=0;</div><div class="line">for(var i=0;i\&lt;orderNum;i++)&#123;</div><div class="line">TempUpY=TempUpY+r*RecordData[i]()*Math.sin(Radius[i]());</div><div class="line">&#125;</div><div class="line">return TempUpY;</div><div class="line">&#125;</div><div class="line">function getSumDown(RecordData,orderNum)&#123;</div><div class="line">var TempDown=0;</div><div class="line">for(var i=0;i\&lt;orderNum;i++)&#123;</div><div class="line">TempDown =TempDown+RecordData[i]();</div><div class="line">&#125;</div><div class="line">return TempDown;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">\&lt;/script\&gt;</div><div class="line"></div><div class="line">\&lt;style\&gt;</div><div class="line"></div><div class="line">svg &#123;</div><div class="line">font: 10px sans-serif;</div><div class="line">padding: 10px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.axis,</div><div class="line">.frame &#123;</div><div class="line">shape-rendering: crispEdges;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.axis line &#123;</div><div class="line">stroke: #ddd;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.axis path &#123;</div><div class="line">display: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.cell text &#123;</div><div class="line">font-weight: bold;</div><div class="line">text-transform: capitalize;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.frame &#123;</div><div class="line">fill: none;</div><div class="line">stroke: #aaa;</div><div class="line">&#125;</div><div class="line"></div><div class="line">circle &#123;</div><div class="line">fill-opacity: .7;</div><div class="line">&#125;</div><div class="line"></div><div class="line">circle.hidden &#123;</div><div class="line">fill: #ccc !important;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.extent &#123;</div><div class="line">fill: #000;</div><div class="line">fill-opacity: .125;</div><div class="line">stroke: #fff;</div><div class="line">&#125;</div><div class="line"></div><div class="line">\&lt;/style\&gt;</div><div class="line"></div><div class="line"></div><div class="line">\&lt;script\&gt;</div><div class="line"></div><div class="line">var width = 960,</div><div class="line">size = 130,</div><div class="line">padding = 20;</div><div class="line"></div><div class="line">var x = d3.scale.linear()</div><div class="line">.range([padding / 2, size - padding / 2]());</div><div class="line"></div><div class="line">var y = d3.scale.linear()</div><div class="line">.range([size - padding / 2, padding / 2]());</div><div class="line"></div><div class="line">var xAxis = d3.svg.axis()</div><div class="line">.scale(x)</div><div class="line">.orient(&quot;bottom&quot;)</div><div class="line">.ticks(6);</div><div class="line"></div><div class="line">var yAxis = d3.svg.axis()</div><div class="line">.scale(y)</div><div class="line">.orient(&quot;left&quot;)</div><div class="line">.ticks(6);</div><div class="line"></div><div class="line">var color = d3.scale.category10();</div><div class="line"></div><div class="line">d3.csv(&quot;flowers.csv&quot;, function(error, data) &#123;</div><div class="line">if (error) throw error;</div><div class="line"></div><div class="line">var domainByTrait = &#123;&#125;,</div><div class="line">traits = d3.keys(data[0]()).filter(function(d) &#123; return d !== &quot;species&quot;&amp;&amp;d!=&quot;id&quot;; &#125;),</div><div class="line">n = traits.length;</div><div class="line"></div><div class="line">traits.forEach(function(trait) &#123;</div><div class="line">domainByTrait[trait]() = d3.extent(data, function(d) &#123; return d[trait](); &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">xAxis.tickSize(size \* n);</div><div class="line">yAxis.tickSize(-size \* n);</div><div class="line"></div><div class="line">var brush = d3.svg.brush()</div><div class="line">.x(x)</div><div class="line">.y(y)</div><div class="line">.on(&quot;brushstart&quot;, brushstart)</div><div class="line">.on(&quot;brush&quot;, brushmove)</div><div class="line">.on(&quot;brushend&quot;, brushend);</div><div class="line"></div><div class="line">var svg = d3.select(&quot;body&quot;).append(&quot;svg&quot;)</div><div class="line">.attr(&quot;width&quot;, size \* n + padding)</div><div class="line">.attr(&quot;height&quot;, size \* n + padding)</div><div class="line">.append(&quot;g&quot;)</div><div class="line">.attr(&quot;transform&quot;, &quot;translate(&quot; + padding + &quot;,&quot; + padding / 2 + &quot;)&quot;);</div><div class="line"></div><div class="line">svg.selectAll(&quot;.x.axis&quot;)</div><div class="line">.data(traits)</div><div class="line">.enter().append(&quot;g&quot;)</div><div class="line">.attr(&quot;class&quot;, &quot;x axis&quot;)</div><div class="line">.attr(&quot;transform&quot;, function(d, i) &#123; return &quot;translate(&quot; + (n - i - 1) \* size + &quot;,0)&quot;; &#125;)</div><div class="line">.each(function(d) &#123; x.domain(domainByTrait[d]()); d3.select(this).call(xAxis); &#125;);</div><div class="line"></div><div class="line">svg.selectAll(&quot;.y.axis&quot;)</div><div class="line">.data(traits)</div><div class="line">.enter().append(&quot;g&quot;)</div><div class="line">.attr(&quot;class&quot;, &quot;y axis&quot;)</div><div class="line">.attr(&quot;transform&quot;, function(d, i) &#123; return &quot;translate(0,&quot; + i \* size + &quot;)&quot;; &#125;)</div><div class="line">.each(function(d) &#123; y.domain(domainByTrait[d]()); d3.select(this).call(yAxis); &#125;);</div><div class="line"></div><div class="line">var cell = svg.selectAll(&quot;.cell&quot;)</div><div class="line">.data(cross(traits, traits))</div><div class="line">.enter().append(&quot;g&quot;)</div><div class="line">.attr(&quot;class&quot;, &quot;cell&quot;)</div><div class="line">.attr(&quot;transform&quot;, function(d) &#123; return &quot;translate(&quot; + (n - d.i - 1) * size + &quot;,&quot; + d.j * size + &quot;)&quot;; &#125;)</div><div class="line">.each(plot);</div><div class="line"></div><div class="line">// Titles for the diagonal.</div><div class="line">cell.filter(function(d) &#123; return d.i === d.j; &#125;).append(&quot;text&quot;)</div><div class="line">.attr(&quot;x&quot;, padding)</div><div class="line">.attr(&quot;y&quot;, padding)</div><div class="line">.attr(&quot;dy&quot;, &quot;.71em&quot;)</div><div class="line">.text(function(d) &#123; return d.x; &#125;);</div><div class="line"></div><div class="line">cell.call(brush);</div><div class="line"></div><div class="line">function plot(p) &#123;</div><div class="line">var cell = d3.select(this);</div><div class="line"></div><div class="line">x.domain(domainByTrait[p.x]());</div><div class="line">y.domain(domainByTrait[p.y]());</div><div class="line"></div><div class="line">cell.append(&quot;rect&quot;)</div><div class="line">.attr(&quot;class&quot;, &quot;frame&quot;)</div><div class="line">.attr(&quot;x&quot;, padding / 2)</div><div class="line">.attr(&quot;y&quot;, padding / 2)</div><div class="line">.attr(&quot;width&quot;, size - padding)</div><div class="line">.attr(&quot;height&quot;, size - padding);</div><div class="line"></div><div class="line">cell.selectAll(&quot;circle&quot;)</div><div class="line">.data(data)</div><div class="line">.enter().append(&quot;circle&quot;)</div><div class="line">.attr(&quot;cx&quot;, function(d) &#123; return x(d[p.x]()); &#125;)</div><div class="line">.attr(&quot;cy&quot;, function(d) &#123; return y(d[p.y]()); &#125;)</div><div class="line">.attr(&quot;r&quot;, 4)</div><div class="line">.style(&quot;fill&quot;, function(d) &#123;</div><div class="line">return color(d.species);</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">var brushCell;</div><div class="line"></div><div class="line">// Clear the previously-active brush, if any.</div><div class="line">function brushstart(p) &#123;</div><div class="line">if (brushCell !== this) &#123;</div><div class="line">d3.select(brushCell).call(brush.clear());</div><div class="line">x.domain(domainByTrait[p.x]());</div><div class="line">y.domain(domainByTrait[p.y]());</div><div class="line">brushCell = this;</div><div class="line">&#125;</div><div class="line">d3.select(&apos;#RadViz&apos;).selectAll(&apos;.nodes&apos;)</div><div class="line">.classed(&apos;hidden&apos;,true);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">// Highlight the selected circles.</div><div class="line">function brushmove(p) &#123;</div><div class="line">var e = brush.extent();</div><div class="line">svg.selectAll(&quot;circle&quot;).classed(&quot;hidden&quot;, function(d) &#123;</div><div class="line"></div><div class="line"></div><div class="line">if( e[0]()[0]() \&gt; d[p.x]() || d[p.x]() \&gt; e[1]()[0]()</div><div class="line">|| e[0]()[1]() \&gt; d[p.y]() || d[p.y]() \&gt; e[1]()[1]())&#123;</div><div class="line">return true;</div><div class="line">&#125;else&#123;</div><div class="line">//                    console.log(d);</div><div class="line">d3.select(&apos;#RadViz&apos;).selectAll(&apos;.nodes&apos;)</div><div class="line">.filter(function(dd)&#123;</div><div class="line"></div><div class="line">return d.id==dd[3]();</div><div class="line">&#125;)</div><div class="line">.classed(&apos;hidden&apos;,false);</div><div class="line"></div><div class="line">return false;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">// If the brush is empty, select all circles.</div><div class="line">function brushend() &#123;</div><div class="line">if (brush.empty())</div><div class="line">&#123;</div><div class="line">svg.selectAll(&quot;.hidden&quot;).classed(&quot;hidden&quot;, false);</div><div class="line">d3.select(&apos;#RadViz&apos;).selectAll(&apos;.nodes&apos;)</div><div class="line">.classed(&apos;hidden&apos;,false);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">d3.select(self.frameElement).style(&quot;height&quot;, size \* n + padding + 20 + &quot;px&quot;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">function cross(a, b) &#123;</div><div class="line">var c = [](), n = a.length, m = b.length, i, j;</div><div class="line">for (i = -1; ++i \&lt; n;) for (j = -1; ++j \&lt; m;) c.push(&#123;x: a[i](), i: i, y: b[j](), j: j&#125;);</div><div class="line">return c;</div><div class="line">&#125;</div><div class="line"></div><div class="line">\&lt;/script\&gt;</div><div class="line"></div><div class="line"></div><div class="line">\&lt;/body\&gt;</div><div class="line">\&lt;/html\&gt;</div><div class="line"></div></pre></td></tr></table></figure><p>这次实现的associate brush操作，有下面需要注意和值得总结的地方：</p><ol><li>首先考虑的是，既然需要实现associate，就必须要有将两个view联系起来的东西，可以类比数据库表中的外键，两个表都有这个键，就可以联系起来。</li><li>特别需要注意的是brushed、brushstart和brushend这三个函数，如何判断一个点在brush的区域里面还是外面，以及如何在brush动作完成之后，继续保持brush点的highlight，需要加一句判断if（brush.emtpy()）。</li><li>控制是否高亮，可以给circle加一个class .hidden,这样的话可以方便的给circle加上这个class，也方便后面不要这个class的时候去掉，刚开始实现的时候还加了对原来颜色的判断，很麻烦，而引入了.hidden class后，想加上这个class的时候就一句 .classed(‘hidden’,true)就可以了，不想要的时候，用.classed(‘hidden’,false)就去掉了这个包袱，非常方便。</li><li>关于hidden这个class，还遇到了一个大坑。在前端测试可以通过，但是加入了node.js的后端之后，始终测试无法通过，出现了hidden的类完全消失了的情况，其他地方怎么找也找不到问题，可能是hidden class是node的保留class？将hidden改成hidden1之后问题就解决了，以后这种敏感的词前面还是加上my的好，如myHidden…</li></ol><p>发现一个bug，就是brush之后，如果再次resize brush的框，对应的已经着色了的其他点不会相应的变化，需要修改brushmove函数为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">function brushmove(p) &#123;</div><div class="line">var e = brush.extent();</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">svg.selectAll(&quot;circle&quot;).classed(&quot;hidden&quot;, function(d) &#123;</div><div class="line"></div><div class="line"></div><div class="line">if( e[0]()[0]() \&gt; d[p.x]() || d[p.x]() \&gt; e[1]()[0]()</div><div class="line">|| e[0]()[1]() \&gt; d[p.y]() || d[p.y]() \&gt; e[1]()[1]())&#123;</div><div class="line"></div><div class="line">d3.select(&apos;#RadViz&apos;).selectAll(&apos;.nodes&apos;)</div><div class="line">.filter(function(dd)&#123;</div><div class="line">return d.id==dd[3]()</div><div class="line">&#125;).classed(&apos;hidden&apos;,true);</div><div class="line"></div><div class="line">return true;</div><div class="line">&#125;else&#123;</div><div class="line">//                    console.log(d);</div><div class="line">d3.select(&apos;#RadViz&apos;).selectAll(&apos;.nodes&apos;)</div><div class="line">.filter(function(dd)&#123;</div><div class="line"></div><div class="line">return d.id==dd[3]();</div><div class="line">&#125;)</div><div class="line">.classed(&apos;hidden&apos;,false);</div><div class="line"></div><div class="line"></div><div class="line">return false;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇博客记录了在上一篇博客加入scatterplot matrix的基础上，实现了associate brush的操作，即，从RadViz中brush一块区域，右边16个scatterplot里对应的点都会高亮出来，其他的点将暗淡下去；同样的，从右边16个scatterpl
      
    
    </summary>
    
      <category term="visualization" scheme="http://zhihaozhang.github.io/categories/visualization/"/>
    
    
      <category term="d3" scheme="http://zhihaozhang.github.io/tags/d3/"/>
    
  </entry>
  
  <entry>
    <title>冷门但实用的d3.js内置函数</title>
    <link href="http://zhihaozhang.github.io/2014/11/15/%E5%86%B7%E9%97%A8%E4%BD%86%E5%AE%9E%E7%94%A8%E7%9A%84d3.js%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"/>
    <id>http://zhihaozhang.github.io/2014/11/15/冷门但实用的d3.js内置函数/</id>
    <published>2014-11-15T05:54:57.000Z</published>
    <updated>2017-12-25T07:30:55.315Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在d3.js的API文档中，提供了很多内置的函数，但是有些很有用的内置函数却被无情的忽略了，这篇博客就来整理整理这些被遗忘却很实用的函数。希望整理过后，他们不再被遗忘。</p><h1 id="selection-classed-name-【value】"><a href="#selection-classed-name-【value】" class="headerlink" title="selection.classed(name,【value】)"></a>selection.classed(name,【value】)</h1><p>value参数可选，如果没有指定，则返回与name参数匹配的第一个非空元素是否绑定了指定的CSS类，true表示绑定，false表示未绑定。如果value指定了的话，就是为selection添加/删除CSS类。<br>这点与selection.attr(name,【value】)非常类似，但是相比而言，就冷门的多，恐怕没有多少人不知道selection.attr(name,【value】)，但是有很多人真的不知道selection.classed(name,【value】)。<br>这个函数很实用，比如鼠标进入某些点，让这些点高亮以表示强调，但是移出去之后，让他们回复原来的样式就可以用这个函数，免去了重新设置样式的麻烦，甚至有时候恢复原来样式的时候，还需要判断，就更麻烦了。</p><h1 id="transition-filter-selector"><a href="#transition-filter-selector" class="headerlink" title="transition.filter(selector)"></a>transition.filter(selector)</h1><p>过滤也有过渡，这点可能很多人都忽略了，比如设置动画结束时，索引为奇数的元素旋转30度。甚至可以自己定义规则，如第5、10、15个元素改变，其他的不变。</p><h1 id="d3-interpolate-a-b"><a href="#d3-interpolate-a-b" class="headerlink" title="d3.interpolate(a,b)"></a>d3.interpolate(a,b)</h1><p>返回一个介于a,b之间的默认插值器，插值器的类型取决于b的类型。<br>1）如果b是颜色类型，那么返回的是interpolateRgb插值器<br>2）如果是字符串类型，则返回interpolateString插值器<br>3）如果是数组类型，则返回interpolateArray插值器<br>4）如果是对象类型，且不能强制转换成字符串类型，则返回interpolateObject插值器<br>5）否则，返回interpolateNumber插值器</p><h1 id="数组相关API"><a href="#数组相关API" class="headerlink" title="数组相关API"></a>数组相关API</h1><p>使用d3时，会有大量的数组操作，如果能合理运用d3提供的数组相关的函数，将会使得工作效率大大提高。</p><h2 id="d3-ascending-a-b"><a href="#d3-ascending-a-b" class="headerlink" title="d3.ascending(a,b)"></a>d3.ascending(a,b)</h2><p>如果a\<b,返回-1，a\>b，返回1，如果a=b,返回0.<br>在可视化元素需要有序的时候，这个函数很有用，可以帮助我们排好序。</b,返回-1，a\></p><h2 id="d3-min-d3-max-d3-extent"><a href="#d3-min-d3-max-d3-extent" class="headerlink" title="d3.min(),d3.max(),d3.extent()"></a>d3.min(),d3.max(),d3.extent()</h2><p>前两个函数知道的人应该不少，但是最后一个却相对冷门，它可以直接返回数组自然排序的最小值和最大值，省的同时调用前面两个函数了。</p><h2 id="d3-sum-d3-mean-d3-median-d3-quantile"><a href="#d3-sum-d3-mean-d3-median-d3-quantile" class="headerlink" title="d3.sum(),d3.mean(),d3.median(),d3.quantile()"></a>d3.sum(),d3.mean(),d3.median(),d3.quantile()</h2><p>基本的求和、平均数、中位数、p分位数，都帮你实现好了，之前还傻乎乎的自己去实现了，虽然不难，但是代码会很难看。</p><h2 id="d3-shuffle-array"><a href="#d3-shuffle-array" class="headerlink" title="d3.shuffle(array)"></a>d3.shuffle(array)</h2><p>用Fisher-Yates shuffle算法把传入的数组随机排序。这样想得到乱序的时候会不会比较高大上呢？嘿嘿。</p><h2 id="d3-keys-object-d3-values-object"><a href="#d3-keys-object-d3-values-object" class="headerlink" title="d3.keys(object),d3.values(object)"></a>d3.keys(object),d3.values(object)</h2><p>keys返回一个包含指定对象(关联数组)中所有属性名称的数组。这点很有用，比如用d3.csv()读文件的时候，想要滤掉一些无关的dimension，比如id等等，用这个函数就很有用。</p><h2 id="d3-map-d3-set"><a href="#d3-map-d3-set" class="headerlink" title="d3.map(),d3.set()"></a>d3.map(),d3.set()</h2><p>映射与集合是很常见的数据结构，但是不是所有js版本中都有默认的实现的，但是d3提供了。昨天在做项目的时候就遇到了这个问题，最后是借用了d3提供的map与set解决了。</p><h2 id="d3-merge（arrays）"><a href="#d3-merge（arrays）" class="headerlink" title="d3.merge（arrays）"></a>d3.merge（arrays）</h2><p>合并指定参数arrays为一个数组，与内置的concat类似，不过处理二维数组的时候，它会更方便。</p><h2 id="d3-zip-arrays-，d3-pairs-arrays"><a href="#d3-zip-arrays-，d3-pairs-arrays" class="headerlink" title="d3.zip(arrays)，d3.pairs(arrays)"></a>d3.zip(arrays)，d3.pairs(arrays)</h2><p>d3.zip(【1，2】，【3，4，5】)返回【【1，3】，【2，4】】有啥用自己体会。<br>d3.pairs(【1，2，3，4】)返回【【1，2】，【2，3】，【3，4】】</p><h2 id="d3-transpose-matrix"><a href="#d3-transpose-matrix" class="headerlink" title="d3.transpose(matrix)"></a>d3.transpose(matrix)</h2><p>转置二维矩阵用的。</p><h1 id="brush"><a href="#brush" class="headerlink" title="brush"></a>brush</h1><p>作为一个可视化系统，怎么能没有brush！实现brush的功能非常简单，构造刷子之前，需要制定x/y比例尺和空的范围。绘制的刷子可以重新调整大小和位置。<br>关于brush的使用，请看前面的博客（associate brush）。</p><h1 id="时间的计数"><a href="#时间的计数" class="headerlink" title="时间的计数"></a>时间的计数</h1><p>d3.time.dayOfYear(date) 返回参数date是一年里的第几天，1月1日是第0天。<br>weekOfYear….等等函数也是有的，需要用的时候可以查查API，省的写闰年的判断，嘿嘿。</p><h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><p>Stack(layers【,index】),让我记忆最深，之前做一个项目的时候，就不知道有这东西存在，愣是自己实现了一遍，麻烦不说,对不对可能还一定.</p><h1 id="地理"><a href="#地理" class="headerlink" title="地理"></a>地理</h1><p>地理的API这块我很陌生,没有什么机会做这方面的项目,所以用的很少,后面有机会再来补充.</p><h1 id="几何"><a href="#几何" class="headerlink" title="几何"></a>几何</h1><p>同样陌生的还有几何这部分的内容,比如四叉树/凸包/多边形/泰森多边形,记住这部分有就可以了,后面用过之后再来补充.</p><h1 id="行为"><a href="#行为" class="headerlink" title="行为"></a>行为</h1><p>由zoom和drag两部分组成，很重要却很简单的内容，希望好好掌握。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在d3.js的API文档中，提供了很多内置的函数，但是有些很有用的内置函数却被无情的忽略了，这篇博客就来整理整理这些被遗忘却很实用的函数。希
      
    
    </summary>
    
      <category term="visualization" scheme="http://zhihaozhang.github.io/categories/visualization/"/>
    
    
      <category term="d3" scheme="http://zhihaozhang.github.io/tags/d3/"/>
    
  </entry>
  
  <entry>
    <title>Build reusable visualization using d3.js and AngularJS</title>
    <link href="http://zhihaozhang.github.io/2014/11/15/Build%20reuseable%20visualization%20using%20d3.js%20and%20AngularJS/"/>
    <id>http://zhihaozhang.github.io/2014/11/15/Build reuseable visualization using d3.js and AngularJS/</id>
    <published>2014-11-15T05:54:57.000Z</published>
    <updated>2017-12-25T07:30:55.312Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>前面两篇博客介绍了如何借助angular，让我们的可视化图能够更有<strong>模块化</strong>、<strong>方便复用</strong>、<strong>具有交互性</strong>，不过前面的博客只介绍了基本的原理以及最简单的图，在这篇博客中，我们来一起绘制一个相对复杂一些的热力图，最终的效果如下图。<br><img src="http://i13.tietuku.cn/5b566b315d0593c2.jpg" alt=""><br>这个热力图主要是用来展现维度与维度之间的相关性的，而相关性在0-1之间。千万不要小看这个热力图，图中的每一个元素，甚至每一个字都是绘制出来的，完成这个看似简单的热力图大概需要<strong>350行代码</strong>。</p><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>我们想要用热力图的时候呢，希望能像内置的html DOM元素一样使用，比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">\&lt;heatmap\&gt;\&lt;/heatmap\&gt;</div><div class="line"></div><div class="line">//如果我们能指定一些属性就更好了，比如下面。</div><div class="line"></div><div class="line">\&lt;heatmap class=&quot;chart&quot; data=&quot;data&quot; dispatch=&quot;dispatch&quot; options=&quot;options&quot;\&gt;\&lt;/heatmap\&gt;</div></pre></td></tr></table></figure><br>不要着急我们一步一步来完成。</p><h2 id="create-directive-using-Angular"><a href="#create-directive-using-Angular" class="headerlink" title="create directive using Angular"></a>create directive using Angular</h2><p>前面的博客里已经介绍过了如何使用Angular来构造指令了，主要是借助angular.directive(‘heatmap’,function(){…})来完成的，主体框架如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">angular.module(&quot;heatmap&quot;, []()).directive(&quot;heatmap&quot;,</div><div class="line">function() &#123;</div><div class="line">return &#123;</div><div class="line">restrict: &quot;E&quot;,</div><div class="line">replace: true,</div><div class="line">scope: &#123;</div><div class="line">data: &quot;=&quot;,</div><div class="line">options: &quot;=?&quot;,</div><div class="line">dispatch: &quot;=?&quot;</div><div class="line">&#125;,</div><div class="line">transclude: false,</div><div class="line">template: &quot;\&lt;div\&gt;\&lt;/div\&gt;&quot;,</div><div class="line">link: function(scope, element) &#123;</div><div class="line">…</div><div class="line">//暂时先不贴出来，后面详解。</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;）</div><div class="line"></div></pre></td></tr></table></figure></p><h2 id="link-function"><a href="#link-function" class="headerlink" title="link function"></a>link function</h2><p>前面已经提过了，link function类似于面向对象编程中的构造(constructor)函数,在个函数里，我们需要用d3.js来绘制所需的所有视觉元素。首先我们需要一些数据。</p><h3 id="data"><a href="#data" class="headerlink" title="data"></a>data</h3><p>数据是维度与维度之间的相关性，因此，对于每一个数据，我们需要知道的有：维度1，维度2，维度1与维度2之间的相关性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">\&lt;script\&gt;</div><div class="line"></div><div class="line">var s =[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;,&quot;g&quot;,&quot;h&quot;,&quot;i&quot;,&apos;j&apos;,&apos;k&apos;,&apos;l&apos;]();</div><div class="line">var data = []();</div><div class="line">for(var i=0;i\&lt; s.length;i++)</div><div class="line">for(var j=0;j\&lt; s.length;j++)</div><div class="line">&#123;</div><div class="line">data.push(&#123;&apos;y&apos;:s[j](),&apos;x&apos;:s[i](),&quot;value&quot;:Math.random()&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">\&lt;/script\&gt;</div><div class="line"></div></pre></td></tr></table></figure><br>这样我们得到的数据将会是这样的结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">data = [</div><div class="line">]()&#123;</div><div class="line">&quot;y&quot;: &quot;a&quot;,</div><div class="line">&quot;x&quot;: “a”,</div><div class="line">&quot;value&quot;: 1.0</div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line">&quot;y&quot;: &quot;a&quot;,</div><div class="line">&quot;x&quot;: “b”,</div><div class="line">&quot;value&quot;: 0.73</div><div class="line">&#125;，…]</div></pre></td></tr></table></figure></p><h3 id="options"><a href="#options" class="headerlink" title="options"></a>options</h3><p>为了实现options的可配置，我们需要预先提供一些已经定好的option。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  var options = &#123;</div><div class="line">legend: true,</div><div class="line">margin: &#123; top: 50, right: 0, bottom: 100, left: 50 &#125;,</div><div class="line">buckets: 9,</div><div class="line">colors: [&quot;#ffffd9&quot;, &quot;#edf8b1&quot;, &quot;#c7e9b4&quot;, &quot;#7fcdbb&quot;, &quot;#41b6c4&quot;, &quot;#1d91c0&quot;, &quot;#225ea8&quot;, &quot;#253494&quot;, &quot;#081d58&quot;](),</div><div class="line">duration: 1000,</div><div class="line">legendWidth: 0.3,</div><div class="line">breaks: null</div><div class="line">&#125;;</div><div class="line"></div></pre></td></tr></table></figure><br>为了使得可以添加或者替换默认的options，我们借助angular.extend()函数将scope里传进来的options和默认的options进行合并，作为新的options。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> if (scope.options) &#123;</div><div class="line">options = angular.extend(options, scope.options);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="dispatch"><a href="#dispatch" class="headerlink" title="dispatch"></a>dispatch</h3><p>通过dispatch预先定义一些操作，比如click,mouseover,mouse out,mouse move，在特定的情况下可以触发他们。代码这样写起来会比较优雅，显得非常的有条理。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">scope.dispatch = d3.dispatch(&quot;click&quot;, &quot;mouseover&quot;, &quot;mouseout&quot;, &quot;mousemove&quot;);</div><div class="line"></div><div class="line"> $scope.$watch(&quot;dispatch&quot;, function() &#123;</div><div class="line">if ($scope.dispatch) &#123;</div><div class="line">$scope.dispatch.on(&quot;click&quot;, function(e) &#123;</div><div class="line">console.log(e);</div><div class="line">&#125;);</div><div class="line">$scope.dispatch.on(&quot;mouseover&quot;, function(e) &#123;</div><div class="line">return tooltip.text(e.y + &quot;: &quot; + e.x + &quot; (&quot; + e.value + &quot;)&quot;).style(&quot;visibility&quot;, &quot;visible&quot;);</div><div class="line">&#125;)</div><div class="line">$scope.dispatch.on(&quot;mousemove&quot;, function(e) &#123;</div><div class="line">return tooltip.style(&quot;top&quot;, (d3.event.pageY - 10) + &quot;px&quot;).style(&quot;left&quot;, (d3.event.pageX + 10) + &quot;px&quot;);</div><div class="line">&#125;)</div><div class="line">$scope.dispatch.on(&quot;mouseout&quot;, function(e) &#123;</div><div class="line">return tooltip.style(&quot;visibility&quot;, &quot;hidden&quot;);</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line">&#125;, true);</div><div class="line"></div></pre></td></tr></table></figure></p><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><p>前期的准备工作做得差不多了，接下来到了最重要的环节，<strong>绘制</strong>。说重要也重要，但其实这应该是d3.js的基本功了。无非就是控制每个元素的各种属性。值得注意的是，这里定义的svg不再是d3.select(‘body’)了，而是select(element【0】)。<br>相关代码以及注释如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  var render = function() &#123;</div><div class="line"></div><div class="line">var w = element[0]().offsetWidth;</div><div class="line">var h = element[0]().offsetHeight;</div><div class="line">var width = w - options.margin.left - options.margin.right;</div><div class="line">var height = h - options.margin.top - options.margin.bottom;</div><div class="line">//先要移除之前的记录</div><div class="line">d3.select(element[0]()).select(&quot;svg&quot;).remove();</div><div class="line">//svg的位置、大小</div><div class="line">var svg = d3.select(element[0]()).append(&quot;svg&quot;)</div><div class="line">.attr(&quot;width&quot;, width + options.margin.left + options.margin.right)</div><div class="line">.attr(&quot;height&quot;, height + options.margin.top + options.margin.bottom)</div><div class="line">.append(&quot;g&quot;)</div><div class="line">.attr(&quot;transform&quot;, &quot;translate(&quot; + options.margin.left + &quot;,&quot; + options.margin.top + &quot;)&quot;);</div><div class="line">//找到data中每一个维度的坐标，方便绘制</div><div class="line">var xu = &#123;&#125;;</div><div class="line">var x = []();</div><div class="line">var yu = &#123;&#125;;</div><div class="line">var y = []();</div><div class="line"></div><div class="line">for (var i in scope.data) &#123;</div><div class="line">if (typeof(xu[scope.data[i]().x]) == &quot;undefined&quot;) &#123;</div><div class="line">x.push(scope.data[i]().x);</div><div class="line">&#125;</div><div class="line">xu[scope.data[i]().x] = 0;</div><div class="line">if (typeof(yu[scope.data[i]().y]) == &quot;undefined&quot;) &#123;</div><div class="line">y.push(scope.data[i]().y);</div><div class="line">&#125;</div><div class="line">yu[scope.data[i]().y] = 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">for (d in scope.data) &#123;</div><div class="line">scope.data[d]().xIndex = x.indexOf(scope.data[d]().x);</div><div class="line">scope.data[d]().yIndex = y.indexOf(scope.data[d]().y);</div><div class="line">&#125;</div><div class="line">//根据维度来决定热力图每一块的长宽，更dynamic</div><div class="line">var xGridSize = Math.floor(width / x.length);</div><div class="line">var yGridSize = Math.floor(height / y.length);</div><div class="line">var legendElementWidth = Math.floor(width \* options.legendWidth / (options.buckets));</div><div class="line">var legendElementHeight = height / 20;</div><div class="line">// 绘制y轴旁的元素名</div><div class="line">var yLabels = svg.selectAll(&quot;.yLabel&quot;)</div><div class="line">.data(y)</div><div class="line">.enter().append(&quot;text&quot;)</div><div class="line">.text(function (d) &#123; return d; &#125;)</div><div class="line">.attr(&quot;x&quot;, 0)</div><div class="line">.attr(&quot;y&quot;, function (d, i) &#123; return i \* yGridSize; &#125;)</div><div class="line">.style(&quot;text-anchor&quot;, &quot;end&quot;)</div><div class="line">.attr(&quot;transform&quot;, &quot;translate(-6,&quot; + yGridSize / 1.5 + &quot;)&quot;)</div><div class="line">.attr(&quot;class&quot;, function (d, i) &#123; return (&quot;yLabel axis&quot;); &#125;);</div><div class="line">// 绘制x轴旁的元素名</div><div class="line">var xLabels = svg.selectAll(&quot;.xLabel&quot;)</div><div class="line">.data(x)</div><div class="line">.enter().append(&quot;text&quot;)</div><div class="line">.text(function(d) &#123; return d; &#125;)</div><div class="line">.attr(&quot;y&quot;, function(d, i) &#123; return i \* xGridSize; &#125;)</div><div class="line">.attr(&quot;x&quot;, 0)</div><div class="line">.style(&quot;text-anchor&quot;, &quot;start&quot;)</div><div class="line">.attr(&quot;transform&quot;, &quot;rotate(-90) translate(10, &quot; + xGridSize / 2 + &quot;)&quot;)</div><div class="line">.attr(&quot;class&quot;, function(d, i) &#123; return (&quot;xLabel axis&quot;); &#125;);</div><div class="line"></div><div class="line">var colorScales = []();</div><div class="line">if (options.breaks != null &amp;&amp; options.breaks.length \&gt; 0) &#123;</div><div class="line">for (b in options.colors) &#123;</div><div class="line">colorScales.push(d3.scale.quantile()</div><div class="line">.domain([0, options.buckets - 1, d3.max(scope.data, function(d) &#123; return d.value; &#125;)]())</div><div class="line">.range(options.colors[b]()));</div><div class="line">&#125;</div><div class="line">&#125; else &#123;</div><div class="line">colorScales.push(d3.scale.quantile()</div><div class="line">.domain([0, options.buckets - 1, d3.max(scope.data, function(d) &#123; return d.value; &#125;)]())</div><div class="line">.range(options.colors));</div><div class="line">&#125;</div><div class="line">//绘制热力图中的最小cell单位，并制定颜色，动作</div><div class="line">var cards = svg.selectAll(&quot;.square&quot;)</div><div class="line">.data(scope.data);</div><div class="line"></div><div class="line">cards.enter().append(&quot;rect&quot;)</div><div class="line">.filter(function(d) &#123; return d.value != null &#125;)</div><div class="line">.attr(&quot;x&quot;, function(d) &#123; return d.xIndex \* xGridSize; &#125;)</div><div class="line">.attr(&quot;y&quot;, function(d) &#123; return d.yIndex \* yGridSize; &#125;)</div><div class="line">.attr(&quot;class&quot;, &quot;square&quot;)</div><div class="line">.attr(&quot;width&quot;, xGridSize)</div><div class="line">.attr(&quot;height&quot;, yGridSize)</div><div class="line">.on(&quot;click&quot;, function(d) &#123; scope.dispatch.click(d); &#125;)</div><div class="line">.on(&quot;mouseover&quot;, function(d) &#123; scope.dispatch.mouseover(d); &#125;)</div><div class="line">.on(&quot;mouseout&quot;, function(d) &#123; scope.dispatch.mouseout(d); &#125;)</div><div class="line">.on(&quot;mousemove&quot;, function(d) &#123; scope.dispatch.mousemove(d); &#125;)</div><div class="line">.style(&quot;fill&quot;, &quot;#ffffff&quot;);</div><div class="line"></div><div class="line">//增加动画效果                cards.transition().duration(options.duration).style(&quot;fill&quot;, function(d) &#123;</div><div class="line">if (options.customColors &amp;&amp; options.customColors.hasOwnProperty(d.value)) &#123;</div><div class="line">return options.customColors[d.value]();</div><div class="line">&#125; else if (options.breaks != null &amp;&amp; options.breaks.length \&gt; 0) &#123;</div><div class="line">for (b in options.breaks) &#123;</div><div class="line">if (d.xIndex \&lt; options.breaks[b]()) &#123;</div><div class="line">return colorScales[b]()(d.value);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">return colorScales[options.breaks.length]()(d.value);</div><div class="line">&#125; else &#123;</div><div class="line">return colorScales[0]()(d.value);</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">cards.exit().remove();</div><div class="line"></div><div class="line">if (options.legend) &#123;</div><div class="line"></div><div class="line">var legend = svg.selectAll(&quot;.legend&quot;)</div><div class="line">.data([0]().concat(colorScales[0]().quantiles()).concat(d3.max(scope.data, function (d) &#123; return d.value; &#125;)), function(d) &#123; return d; &#125;);</div><div class="line"></div><div class="line">legend.enter().append(&quot;g&quot;).attr(&quot;class&quot;, &quot;legend&quot;);</div><div class="line">//下面的参考数值对应的颜色</div><div class="line">legend.append(&quot;rect&quot;)</div><div class="line">.attr(&quot;x&quot;, function(d, i) &#123; return legendElementWidth \* i; &#125;)</div><div class="line">.attr(&quot;y&quot;, height \* 1.05)</div><div class="line">.attr(&quot;width&quot;, legendElementWidth)</div><div class="line">.attr(&quot;height&quot;, legendElementHeight)</div><div class="line">.style(&quot;fill&quot;, function(d, i) &#123; return options.colors[i](); &#125;)</div><div class="line">.style(&quot;visibility&quot;, function(d, i) &#123; return(i \&lt; options.buckets ? &quot;visible&quot; : &quot;hidden&quot;) &#125;);</div><div class="line">//参考数值</div><div class="line">legend.append(&quot;text&quot;)</div><div class="line">.attr(&quot;class&quot;, &quot;legendLabel&quot;)</div><div class="line">.text(function(d,i) &#123; return (0.1\*i+0.1).toFixed(1); &#125;)</div><div class="line">.attr(&quot;x&quot;, function(d, i) &#123; return legendElementWidth \* i; &#125;)</div><div class="line">.attr(&quot;y&quot;, height \* 1.15)</div><div class="line">.style(&quot;text-anchor&quot;, &quot;middle&quot;);</div><div class="line"></div><div class="line">legend.exit().remove();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div></pre></td></tr></table></figure></p><h3 id="增加响应"><a href="#增加响应" class="headerlink" title="增加响应"></a>增加响应</h3><p>当数据变化，或webpage的窗口大小发生改变时，希望能够重新绘制热力图，这也是为什么我们上面将render函数定义为一个变量的原因。<br>监控数据的变化，可以借助angular的$watch函数来完成。为了有延时的效果，需要一个辅助函数，代码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//数据变化了</div><div class="line">scope.$watch(&quot;data&quot;, function() &#123;</div><div class="line">render();</div><div class="line">&#125;, true);</div><div class="line">//窗口大小改变</div><div class="line">d3.select(window).on(&quot;resize&quot;, debounce(function() &#123;</div><div class="line">render();</div><div class="line">&#125;, 500));</div><div class="line"></div><div class="line">//辅助函数，控制延时</div><div class="line">var debounce = function(f, timeout) &#123;</div><div class="line">var id = -1;</div><div class="line">return function() &#123;</div><div class="line">if (id \&gt; -1) &#123;</div><div class="line">window.clearTimeout(id);</div><div class="line">&#125;</div><div class="line">id = window.setTimeout(f, timeout);</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"></div></pre></td></tr></table></figure><h3 id="CSS样式表"><a href="#CSS样式表" class="headerlink" title="CSS样式表"></a>CSS样式表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">\&lt;style\&gt;</div><div class="line">.xLabel, .yLabel, .legendLabel &#123;</div><div class="line">font-size: 9px;</div><div class="line">font-family: Verdana;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.tooltip &#123;</div><div class="line">font-size: 9px;</div><div class="line">font-family: Verdana;</div><div class="line">background-color: #333333;</div><div class="line">padding: 5px;</div><div class="line">color: #ffffff;</div><div class="line">border-radius: 3px;</div><div class="line">opacity: 0.7;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.chart &#123;</div><div class="line">width: 50%;</div><div class="line">height: 600px;</div><div class="line">background-color: #ffffff;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.square &#123;</div><div class="line">cursor: pointer;</div><div class="line">&#125;</div><div class="line"></div><div class="line">\&lt;/style\&gt;</div></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li>《D3 on AngularJS》 <a href="https://leanpub.com/d3angularjs" target="_blank" rel="external">https://leanpub.com/d3angularjs</a></li><li>《Build custom directives with AngularJS》 <a href="http://ngnewsletter.wpengine.com/?p=218" target="_blank" rel="external">http://ngnewsletter.wpengine.com/?p=218</a></li><li>《AngularJS &amp; D3: Directives for Visualizations》 <a href="https://www.youtube.com/watch?v=aqHBLS_6gF8" target="_blank" rel="external">https://www.youtube.com/watch?v=aqHBLS_6gF8</a></li><li>pieterprovoost’s github <a href="https://github.com/pieterprovoost/heatmap" target="_blank" rel="external">https://github.com/pieterprovoost/heatmap</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;前面两篇博客介绍了如何借助angular，让我们的可视化图能够更有&lt;strong&gt;模块化&lt;/strong&gt;、&lt;strong&gt;方便复用&lt;/st
      
    
    </summary>
    
      <category term="visualization" scheme="http://zhihaozhang.github.io/categories/visualization/"/>
    
    
      <category term="d3" scheme="http://zhihaozhang.github.io/tags/d3/"/>
    
  </entry>
  
</feed>
